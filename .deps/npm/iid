'use strict';
import { v4 } from "uuid";
const Uuid = v4;
const base62 = createBase("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
const base16 = createBase("0123456789abcdef");
/// Generate a new uuid/v4, encoded in base62, zero-padded to always be 22 chars
export const Iid = function () {
    const uuidBytes = Uuid(null, []);
    const uuid62 = base62.encode(uuidBytes);
    return justifyRight(uuid62, 22);
};
/// Convenience function for when the input can be either kind
// *TODO* should handle array of bytes too
Iid.from = function (someId) {
    // We do assume this is used in such a context that any string fitting the
    // length won't be something completely arbitrary
    if (someId.length === 22) {
        return someId;
    }
    else if (someId.length === 36) {
        return Iid.fromUuid(someId);
    }
    else {
        throw new Error(`Iid.fromIidOrUuid expects an Iid or a standard formatted Uuid base16, with the dashes, 36 characters long. The input "${someId}" isn't recognized.`);
    }
};
/// Convenience function for when input can be either format or undefined/null,
/// in which case it will create a new Iid
Iid.fromOrMake = function (maybeSomeId) {
    if (maybeSomeId) {
        return Iid.from(maybeSomeId);
    }
    else {
        return Iid();
    }
};
/// Convert a uuid/v4 in common base-16 format, with the dashes and all to an Iid
Iid.fromUuid = function (uuidBase16) {
    // We do assume this is used in such a context that any string fitting the
    // length won't be something completely arbitrary
    if (uuidBase16.length != 36)
        throw new Error(`Iid.fromUuid expects a standard formatted Uuid base16, with the dashes, 36 characters long. The input "${uuidBase16}" isn't recognized.`);
    // Our hex-digits-lut and decoder only handles lowercase
    const washed = uuidBase16.replace(/-/g, "").toLowerCase();
    const uuid62 = base62.encode(base16.decode(washed));
    return justifyRight(uuid62, 22);
};
/// Convert an Iid to a uuid/v4 in common base-16 format, with the dashes and all
Iid.toUuid = function (iid) {
    const uuid16Raw = base16.encode(base62.decode(iid));
    const uuid16 = justifyRight(uuid16Raw, 32);
    const part = (start, stop) => { return uuid16.substring(start, stop); };
    const specFormattedUuid16 = part(0, 8) + "-" +
        part(8, 12) + "-" +
        part(12, 16) + "-" +
        part(16, 20) + "-" +
        part(20, 32);
    return specFormattedUuid16;
};
Iid.base16 = base16;
Iid.base62 = base62;
Iid.createBase = createBase;
Iid.Uuid = Uuid;
function justifyRight(text, width, padChar = "0") {
    const delta = width - text.length;
    // console.log("delta", delta, text.length, width, text)
    if (delta == -1) {
        return text.slice(1);
    }
    else {
        return padChar.repeat(delta) + text;
    }
}
// For some reason typescript module resolvment fucks up unless we export more
// than one item(!?)
export function createBase(baseDigits_) {
    const digitsLut_ = {};
    const base_ = baseDigits_.length;
    const padDigit_ = baseDigits_.charAt(0);
    // pre-compute lookup table
    for (let i = 0; i < base_; i++) {
        const digit = baseDigits_.charAt(i);
        if (digitsLut_[digit] !== undefined)
            throw new Error(`Duplicate digit: "${digit}"`);
        digitsLut_[digit] = i;
    }
    function encode(byteArray) {
        if (byteArray.length === 0)
            throw new Error("Empty input");
        const dest = [0];
        for (let i = 0; i < byteArray.length; ++i) {
            let carry = byteArray[i];
            for (let j = 0; j < dest.length; ++j) {
                carry += dest[j] << 8;
                dest[j] = carry % base_;
                carry = (carry / base_) | 0;
            }
            while (carry > 0) {
                dest.push(carry % base_);
                carry = (carry / base_) | 0;
            }
        }
        let output = "";
        // deal with leading zeros
        for (let i = 0; byteArray[i] === 0 && i < byteArray.length - 1; ++i) {
            output += padDigit_;
        }
        // convert digits to a string
        for (let i = dest.length - 1; i >= 0; --i) {
            output += baseDigits_[dest[i]];
        }
        return output;
    }
    function decode(inputString) {
        if (typeof inputString !== 'string')
            throw new TypeError('Expected String');
        if (inputString.length === 0)
            throw new Error("Empty input");
        const bytes = [0];
        for (let i = 0; i < inputString.length; ++i) {
            const value = digitsLut_[inputString.charAt(i)];
            if (value === undefined)
                throw new Error(`Non-base${base_} digit: "${inputString.charAt(i)}"`);
            let carry = value;
            for (let j = 0; j < bytes.length; ++j) {
                carry += bytes[j] * base_;
                bytes[j] = carry & 0xff;
                carry >>= 8;
            }
            while (carry > 0) {
                bytes.push(carry & 0xff);
                carry >>= 8;
            }
        }
        // deal with leading zeros
        for (let i = 0; inputString[i] === padDigit_ && i < inputString.length - 1; ++i) {
            bytes.push(0);
        }
        return bytes.reverse();
    }
    return {
        encode: encode,
        decode: decode,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBO0FBQ1osT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUN6QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUE7QUFFZixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsZ0VBQWdFLENBQUMsQ0FBQTtBQUMzRixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUU3QyxnRkFBZ0Y7QUFDaEYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFRO0lBQ3BCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN2QyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNuQyxDQUFDLENBQUE7QUFFRCw4REFBOEQ7QUFDOUQsMENBQTBDO0FBQzFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxNQUFjO0lBQy9CLDBFQUEwRTtJQUMxRSxpREFBaUQ7SUFDakQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDakIsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyx5SEFBeUgsTUFBTSxxQkFBcUIsQ0FBQyxDQUFBO0lBQ3pL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