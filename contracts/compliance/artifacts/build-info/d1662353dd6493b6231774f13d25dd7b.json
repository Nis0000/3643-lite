{
	"id": "d1662353dd6493b6231774f13d25dd7b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/compliance/BasicCompliance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"./interface/ICompliance.sol\";\nimport \"../token/IToken.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract BasicCompliance is ICompliance, AccessControl {\n    /// Mapping between agents and their statuses\n    mapping(address => bool) private _tokenAgentsList;\n    /// Mapping of tokens linked to the compliance contract\n    IToken public tokenBound;\n\n    // keccak256(ADMIN_ROLE)\n    bytes32 public constant ADMIN_ROLE =\n        0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\n\n    // keccak256(TOKEN_ROLE)\n    bytes32 public constant TOKEN_ROLE =\n        0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4;\n\n\n   \n   mapping (uint16=>bool)  public  isCountryAllowed;\n\n\n    constructor() {\n        _grantRole(0x00, _msgSender());\n        _grantRole(ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     *  @dev See {ICompliance-bindToken}.\n     */\n    function bindToken(address _token) external {\n        require(\n            hasRole(ADMIN_ROLE, _msgSender()) ||\n                address(tokenBound) == address(0),\n            \"ERC-3643: Caller not authorized\"\n        );\n        tokenBound = IToken(_token);\n        emit TokenBound(_token);\n    }\n\n    /**\n     *  @dev See {ICompliance-unbindToken}.\n     */\n    function unbindToken(address _token) external {\n        require(\n            hasRole(ADMIN_ROLE, _msgSender()) ||\n                hasRole(TOKEN_ROLE, _msgSender()),\n            \"ERC-3643: Caller not authorized\"\n        );\n        require(_token == address(tokenBound), \"ERC-3643: Token not bound\");\n        delete tokenBound;\n        emit TokenUnbound(_token);\n    }\n\n    /*\n     *  @dev See {ICompliance-transferred}.\n     */\n    function transferred(address _from, address _to, uint256 _value) external {}\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n\n    function created(address _to, uint256 _value) external {}\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external {}\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer (\n        address /*_from*/,\n        address /*_to*/,\n        uint256 /*_value*/,\n        uint16 countryCode\n    ) external view returns (bool) {\n        require(isCountryAllowed[countryCode],\" country complinance is rejected\");\n        return true;\n    }\n\n    /**\n     *  @dev See {ICompliance-isTokenBound}.\n     */\n    function isTokenBound(address _token) external view returns (bool) {\n        return (_token == address(tokenBound));\n     }\n//     function isCountryAllowed () internal {\n//         require(_isCountryAllowed(),\"your country not allowed\");\n// }\n    function addAllowedCountry (uint16 country_code) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()));\n        isCountryAllowed[country_code]=true;\n\n    }\n    function removeAllowedCountry (uint16 country_code) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()));\n        isCountryAllowed[country_code]=false;\n\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
			},
			"contracts/token/IToken.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"../registry/interface/IIdentityRegistry.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev interface\ninterface IToken is IERC20 {\n    /// events\n\n    /**\n     *  this event is emitted when the onchainID  is updated.\n     *  the event is emitted by the token init function and by the setOnchainID function\n     *  `_newOnchainID` is the address of the onchainID of the token\n     */\n    event UpdatedOnchainID(address indexed _newOnchainID);\n\n    /**\n     *  this event is emitted when the IdentityRegistry has been set for the token\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\n     *  `_identityRegistry` is the address of the Identity Registry of the token\n     */\n    event IdentityRegistryAdded(address indexed _identityRegistry);\n\n    /**\n     *  this event is emitted when the Compliance has been set for the token\n     *  the event is emitted by the token constructor and by the setCompliance function\n     *  `_compliance` is the address of the Compliance contract of the token\n     */\n    event ComplianceAdded(address indexed _compliance);\n\n    /**\n     *  this event is emitted when an investor successfully recovers his tokens\n     *  the event is emitted by the recoveryAddress function\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\n     */\n    event RecoverySuccess(\n        address indexed _lostWallet,\n        address indexed _newWallet,\n        address indexed _investorOnchainID\n    );\n\n    /**\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_isFrozen` is the freezing status of the wallet\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\n     */\n    event AddressFrozen(\n        address indexed _userAddress,\n        bool indexed _isFrozen,\n        address indexed _owner\n    );\n\n    /**\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are frozen\n     */\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are unfrozen\n     */\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  @dev sets the onchain ID of the token\n     *  @param _onchainID the address of the onchain ID to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setOnchainID(address _onchainID) external;\n\n    /**\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Paused` event\n     */\n    function pause() external;\n\n    /**\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `Unpaused` event\n     */\n    function unpause() external;\n\n    /**\n     *  @dev sets an address frozen status for this token.\n     *  @param _userAddress The address for which to update frozen status\n     *  @param _freeze Frozen status of the address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `AddressFrozen` event\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\n\n    /**\n     *  @dev freezes token amount specified for given address.\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be frozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensFrozen` event\n     */\n    function freezePartialTokens(\n        address _userAddress,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev unfreezes token amount specified for given address\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be unfrozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event\n     */\n    function unfreezePartialTokens(\n        address _userAddress,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev sets the Identity Registry for the token\n     *  @param _identityRegistry the address of the Identity Registry to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits an `IdentityRegistryAdded` event\n     */\n    function setIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev sets the compliance contract of the token\n     *  @param _compliance the address of the compliance contract to set\n     *  Only the owner of the token smart contract can call this function\n     *  calls bindToken on the compliance contract\n     *  emits a `ComplianceAdded` event\n     */\n    function setCompliance(address _compliance) external;\n\n    /**\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `amount`\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\n     *  account is 100% composed of frozen tokens post-transfer.\n     *  Require that the `to` address is a verified address,\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n     *  emits a `Transfer` event\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool);\n\n    /**\n     *  @dev mint tokens on a wallet\n     *  Improved version of default mint method. Tokens can be minted\n     *  to an address if only it is a verified address as per the security token.\n     *  @param _to Address to mint the tokens to.\n     *  @param _amount Amount of tokens to mint.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Transfer` event\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev burn tokens on a wallet\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `value` amount\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\n     *  is 100% composed of frozen tokens post-transaction.\n     *  @param _userAddress Address to burn the tokens from.\n     *  @param _amount Amount of tokens to burn.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n     *  emits a `Transfer` event\n     */\n    function burn(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev recovery function used to force transfer tokens from a\n     *  lost wallet to a new wallet for an investor.\n     *  @param _lostWallet the wallet that the investor lost\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n     *  emits a `Transfer` event if the recovery process is successful\n     *  emits a `RecoverySuccess` event if the recovery process is successful\n     *  emits a `RecoveryFails` event if the recovery process fails\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external returns (bool);\n\n    /**\n     *  @dev function allowing to issue transfers in batch\n     *  Require that the msg.sender and `to` addresses are not frozen.\n     *  Require that the total value should not exceed available balance.\n     *  Require that the `to` addresses are all verified addresses,\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  emits _toList.length `Transfer` events\n     */\n    function batchTransfer(\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to issue forced transfers in batch\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _fromList The addresses of the senders\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n     *  emits _fromList.length `Transfer` events\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to mint tokens in batch\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _toList.length `Transfer` events\n     */\n    function batchMint(\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to burn tokens in batch\n     *  Require that the `_userAddresses` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `Transfer` events\n     */\n    function batchBurn(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to set frozen addresses in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses for which to update frozen status\n     *  @param _freeze Frozen status of the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `AddressFrozen` events\n     */\n    function batchSetAddressFrozen(\n        address[] calldata _userAddresses,\n        bool[] calldata _freeze\n    ) external;\n\n    /**\n     *  @dev function allowing to freeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be frozen\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensFrozen` events\n     */\n    function batchFreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to unfreeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensUnfrozen` events\n     */\n    function batchUnfreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * balanceOf() and transfer().\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the address of the onchainID of the token.\n     * the onchainID of the token gives all the information available\n     * about the token and is managed by the token issuer or his agent.\n     */\n    function onchainID() external view returns (address);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the TREX version of the token.\n     * current version is 3.0.0\n     */\n    function version() external view returns (string memory);\n\n    /**\n     *  @dev Returns the Identity Registry linked to the token\n     */\n    function identityRegistry() external view returns (IIdentityRegistry);\n\n    /**\n     *  @dev Returns the Compliance contract linked to the token\n     */\n    function compliance() external view returns (address);\n\n    /**\n     *  @dev Returns the freezing status of a wallet\n     *  if isFrozen returns `true` the wallet is frozen\n     *  if isFrozen returns `false` the wallet is not frozen\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n     *  a partial freeze or the whole token could be blocked by pause\n     *  @param _userAddress the address of the wallet on which isFrozen is called\n     */\n    function isFrozen(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\n     */\n    function getFrozenTokens(\n        address _userAddress\n    ) external view returns (uint256);\n}\n"
			},
			"contracts/compliance/interface/ICompliance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\ninterface ICompliance {\n    /**\n     *  this event is emitted when a token has been bound to the compliance contract\n     *  the event is emitted by the bindToken function\n     *  `_token` is the address of the token to bind\n     */\n    event TokenBound(address _token);\n\n    /**\n     *  this event is emitted when a token has been unbound from the compliance contract\n     *  the event is emitted by the unbindToken function\n     *  `_token` is the address of the token to unbind\n     */\n    event TokenUnbound(address _token);\n\n    /**\n     *  @dev binds a token to the compliance contract\n     *  @param _token address of the token to bind\n     *  Emits a TokenBound event\n     */\n    function bindToken(address _token) external;\n\n    /**\n     *  @dev unbinds a token from the compliance contract\n     *  @param _token address of the token to unbind\n     *  Emits a TokenUnbound event\n     */\n    function unbindToken(address _token) external;\n\n    /**\n     *  @dev function called whenever tokens are transferred\n     *  from one wallet to another\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function transferred(address _from, address _to, uint256 _amount) external;\n\n    /**\n     *  @dev function called whenever tokens are created\n     *  on a wallet\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function created(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev function called whenever tokens are destroyed\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function destroyed(address _from, uint256 _amount) external;\n\n    /**\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\n     *  @param _token address of the token\n     */\n    function isTokenBound(address _token) external view returns (bool);\n\n    /**\n     *  @dev checks that the transfer is compliant.\n     *  default compliance always returns true\n     *  READ ONLY FUNCTION, this function cannot be used to increment\n     *  counters, emit events, ...\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function canTransfer(\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint16 code\n    ) external view returns (bool);\n    \n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"./IClaimIssuersRegistry.sol\";\nimport \"./IClaimTopicsRegistry.sol\";\nimport \"./IIdentityRegistryStorage.sol\";\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistry {\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n     */\n    event ClaimTopicsRegistrySet(\n        IClaimTopicsRegistry indexed claimTopicsRegistry\n    );\n\n    /**\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `identityStorage` is the address of the Identity Registry Storage contract\n     */\n    event IdentityStorageSet(IIdentityRegistryStorage indexed identityStorage);\n\n    /**\n     *  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\n     */\n    event ClaimIssuersRegistrySet(\n        IClaimIssuersRegistry indexed claimIssuersRegistry\n    );\n\n    /**\n     *  this event is emitted when an Identity is registered into the Identity Registry.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRegistered(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity is removed from the Identity Registry.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRemoved(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityUpdated(\n        IIdentity indexed oldIdentity,\n        IIdentity indexed newIdentity\n    );\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryUpdated(\n        address indexed investorAddress,\n        uint16 indexed country\n    );\n\n    /**\n     *  @dev Register an identity contract corresponding to a user address.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityRegistered` event\n     */\n    function registerIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the identity registry.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityRemoved` event\n     */\n    function deleteIdentity(address _userAddress) external;\n\n    /**\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n     *  emits `IdentityStorageSet` event\n     */\n    function setIdentityRegistryStorage(\n        IIdentityRegistryStorage _identityRegistryStorage\n    ) external;\n\n    /**\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n     *  emits `ClaimTopicsRegistrySet` event\n     */\n    function setClaimTopicsRegistry(\n        IClaimTopicsRegistry _claimTopicsRegistry\n    ) external;\n\n    /**\n     *  @dev Replace the actual claimIssuersRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\n     *  emits `ClaimIssuersRegistrySet` event\n     */\n    function setClaimIssuersRegistry(\n        IClaimIssuersRegistry _claimIssuersRegistry\n    ) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryUpdated` event\n     */\n    function updateCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityUpdated` event\n     */\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\n\n    /**\n     *  @dev function allowing to register identities in batch\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  Requires that none of the users has an identity contract already registered.\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the users\n     *  @param _identities The addresses of the corresponding identity contracts\n     *  @param _countries The countries of the corresponding investors\n     *  emits _userAddresses.length `IdentityRegistered` events\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        IIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external;\n\n    /**\n     *  @dev This functions checks whether a wallet has its Identity registered or not\n     *  in the Identity Registry.\n     *  @param _userAddress The address of the user to be checked.\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n     */\n    function contains(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev This functions checks whether an identity contract\n     *  corresponding to the provided user address has the required claims or not based\n     *  on the data fetched from claim issuers registry and from the claim topics registry\n     *  @param _userAddress The address of the user to be verified.\n     *  @return 'True' if the address is verified, 'false' if not.\n     */\n    function isVerified(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function identity(address _userAddress) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function investorCountry(\n        address _userAddress\n    ) external view returns (uint16);\n\n    /**\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n     */\n    function identityStorage() external view returns (IIdentityRegistryStorage);\n\n    /**\n     *  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\n     */\n    function issuersRegistry() external view returns (IClaimIssuersRegistry);\n\n    /**\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n     */\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"./IERC734.sol\";\nimport \"./IERC735.sol\";\n\n// solhint-disable-next-line no-empty-blocks\ninterface IIdentity is IERC734, IERC735 {\n    /**\n     * @dev Checks if a claim is valid.\n     * @param _identity the identity contract related to the claim\n     * @param claimTopic the claim topic of the claim\n     * @param sig the signature of the claim\n     * @param data the data field of the claim\n     * @return claimValid true if the claim is valid, false otherwise\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IClaimIssuer is IIdentity {\n\n    /**\n     * @dev Emitted when a claim is revoked.\n     *\n     * Specification: MUST be triggered when revoking a claim.\n     */\n    event ClaimRevoked(bytes indexed signature);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @notice will fetch the claim from the identity contract (unsafe).\n     * @param _claimId the id of the claim\n     * @param _identity the address of the identity contract\n     * @return isRevoked true when the claim is revoked\n     */\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @param signature the signature of the claim\n     */\n    function revokeClaimBySignature(bytes calldata signature) external;\n\n    /**\n     * @dev Returns revocation status of a claim.\n     * @param _sig the signature of the claim\n     * @return isRevoked true if the claim is revoked and false otherwise\n     */\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n\n    /**\n     * @dev Checks if a claim is valid.\n     * @param _identity the identity contract related to the claim\n     * @param claimTopic the claim topic of the claim\n     * @param sig the signature of the claim\n     * @param data the data field of the claim\n     * @return claimValid true if the claim is valid, false otherwise\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n}\n"
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistryStorage {\n    /// events\n\n    /**\n     *  this event is emitted when an Identity is registered into the storage contract.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityStored(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity is removed from the storage contract.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityUnstored(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityModified(\n        IIdentity indexed oldIdentity,\n        IIdentity indexed newIdentity\n    );\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryModified(\n        address indexed investorAddress,\n        uint16 indexed country\n    );\n\n    /**\n     *  this event is emitted when an Identity Registry is bound to the storage contract\n     *  the event is emitted by the 'addIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry added\n     */\n    event IdentityRegistryBound(address indexed identityRegistry);\n\n    /**\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\n     *  the event is emitted by the 'removeIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry removed\n     */\n    event IdentityRegistryUnbound(address indexed identityRegistry);\n\n    /// functions\n\n    /**\n     *  @dev adds an identity contract corresponding to a user address in the storage.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityStored` event\n     */\n    function addIdentityToStorage(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the storage.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityUnstored` event\n     */\n    function removeIdentityFromStorage(address _userAddress) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryModified` event\n     */\n    function modifyStoredInvestorCountry(\n        address _userAddress,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityModified` event\n     */\n    function modifyStoredIdentity(\n        address _userAddress,\n        IIdentity _identity\n    ) external;\n\n    /**\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n     *  cannot bind more than 300 IR to 1 IRS\n     *  @param _identityRegistry The identity registry address to add.\n     */\n    function bindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n     *  @param _identityRegistry The identity registry address to remove.\n     */\n    function unbindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev Returns the identity registries linked to the storage contract\n     */\n    function linkedIdentityRegistries()\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedIdentity(\n        address _userAddress\n    ) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedInvestorCountry(\n        address _userAddress\n    ) external view returns (uint16);\n}\n"
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\ninterface IClaimTopicsRegistry {\n    /**\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n     *  the event is emitted by the 'addClaimTopic' function\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\n     */\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n\n    /**\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n     *  the event is emitted by the 'removeClaimTopic' function\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\n     */\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    /**\n     * @dev Add a claim claim topic (For example: KYC=1, AML=2).\n     * Only owner can call.\n     * emits `ClaimTopicAdded` event\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\n     * @param _claimTopic The claim topic index\n     */\n    function addClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\n     *  Only owner can call.\n     *  emits `ClaimTopicRemoved` event\n     *  @param _claimTopic The claim topic index\n     */\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Get the claim claim topics for the security token\n     *  @return Array of claim claim topics\n     */\n    function getClaimTopics() external view returns (uint256[] memory);\n}\n"
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\n\ninterface IClaimIssuersRegistry {\n    /**\n     *  this event is emitted when a claim issuer is added in the registry.\n     *  the event is emitted by the addClaimIssuer function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\n     */\n    event ClaimIssuerAdded(\n        IClaimIssuer indexed claimIssuer,\n        uint256[] claimTopics\n    );\n\n    /**\n     *  this event is emitted when a claim issuer is removed from the registry.\n     *  the event is emitted by the removeClaimIssuer function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     */\n    event ClaimIssuerRemoved(IClaimIssuer indexed claimIssuer);\n\n    /**\n     *  this event is emitted when the set of claim topics is changed for a given claim issuer.\n     *  the event is emitted by the updateIssuerClaimTopics function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\n     */\n    event ClaimTopicsUpdated(\n        IClaimIssuer indexed claimIssuer,\n        uint256[] claimTopics\n    );\n\n    /**\n     *  @dev registers a ClaimIssuer contract as claim claim issuer.\n     *  Requires that a ClaimIssuer contract doesn't already exist\n     *  Requires that the claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  Requires that there is no more than 50 Claim issuers\n     *  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimIssuerAdded` event\n     */\n    function addClaimIssuer(\n        IClaimIssuer _claimIssuer,\n        uint256[] calldata _claimTopics\n    ) external;\n\n    /**\n     *  @dev Removes the ClaimIssuer contract of a claim claim issuer.\n     *  Requires that the claim issuer contract to be registered first\n     *  @param _claimIssuer the claim issuer to remove.\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimIssuerRemoved` event\n     */\n    function removeClaimIssuer(IClaimIssuer _claimIssuer) external;\n\n    /**\n     *  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\n     *  Requires that this ClaimIssuer contract already exists in the registry\n     *  Requires that the provided claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  @param _claimIssuer the claim issuer to update.\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimTopicsUpdated` event\n     */\n    function updateIssuerClaimTopics(\n        IClaimIssuer _claimIssuer,\n        uint256[] calldata _claimTopics\n    ) external;\n\n    /**\n     *  @dev Function for getting all the claim claim issuers stored.\n     *  @return array of all claim issuers registered.\n     */\n    function getClaimIssuers() external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Function for getting all the claim issuer allowed for a given claim topic.\n     *  @param claimTopic the claim topic to get the claim issuers for.\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\n     */\n    function getClaimIssuersForClaimTopic(\n        uint256 claimTopic\n    ) external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Checks if the ClaimIssuer contract is claim\n     *  @param _issuer the address of the ClaimIssuer contract\n     *  @return true if the issuer is claim, false otherwise.\n     */\n    function isClaimIssuer(IClaimIssuer _issuer) external view returns (bool);\n\n    /**\n     *  @dev Function for getting all the claim topic of claim claim issuer\n     *  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\n     *  @param _claimIssuer the claim issuer concerned.\n     *  @return The set of claim topics that the claim issuer is allowed to emit\n     */\n    function getClaimIssuerClaimTopics(\n        IClaimIssuer _claimIssuer\n    ) external view returns (uint256[] memory);\n\n    /**\n     *  @dev Function for checking if the claim claim issuer is allowed\n     *  to emit a certain claim topic\n     *  @param _issuer the address of the claim issuer's ClaimIssuer contract\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n     *  @return true if the issuer is claim for this claim topic.\n     */\n    function hasClaimTopic(\n        IClaimIssuer _issuer,\n        uint256 _claimTopic\n    ) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n */\ninterface IERC735 {\n\n    /**\n     * @dev Emitted when a claim was added.\n     *\n     * Specification: MUST be triggered when a claim was successfully added.\n     */\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was removed.\n     *\n     * Specification: MUST be triggered when removeClaim was successfully called.\n     */\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was changed.\n     *\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\n     */\n    event ClaimChanged(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Add or update a claim.\n     *\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\n     *\n     * Specification: Add or update a claim from an issuer.\n     *\n     * _signature is a signed message of the following structure:\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n     */\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address issuer,\n        bytes calldata _signature,\n        bytes calldata _data,\n        string calldata _uri)\n    external returns (bytes32 claimRequestId);\n\n    /**\n     * @dev Removes a claim.\n     *\n     * Triggers Event: `ClaimRemoved`\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n\n    /**\n     * @dev Get a claim by its ID.\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function getClaim(bytes32 _claimId)\n    external view returns(\n        uint256 topic,\n        uint256 scheme,\n        address issuer,\n        bytes memory signature,\n        bytes memory data,\n        string memory uri);\n\n    /**\n     * @dev Returns an array of claim IDs by topic.\n     */\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\n */\ninterface IERC734 {\n\n    /**\n     * @dev Emitted when an execution request was approved.\n     *\n     * Specification: MUST be triggered when approve was successfully called.\n     */\n    event Approved(uint256 indexed executionId, bool approved);\n\n    /**\n     * @dev Emitted when an execute operation was approved and successfully performed.\n     *\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n     */\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execution request was performed via `execute`.\n     *\n     * Specification: MUST be triggered when execute was successfully called.\n     */\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execute operation was called and failed\n     *\n     * Specification: MUST be triggered when execute call failed\n     */\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when a key was added to the Identity.\n     *\n     * Specification: MUST be triggered when addKey was successfully called.\n     */\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Emitted when a key was removed from the Identity.\n     *\n     * Specification: MUST be triggered when removeKey was successfully called.\n     */\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n     *\n     * Triggers Event: `KeyAdded`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity\n     * itself. If it's the identity itself, the approval process will determine its approval.\n     */\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n\n    /**\n    * @dev Approves an execution.\n    *\n    * Triggers Event: `Approved`\n    * Triggers on execution successful Event: `Executed`\n    * Triggers on execution failure Event: `ExecutionFailed`\n    */\n    function approve(uint256 _id, bool _approve) external returns (bool success);\n\n    /**\n     * @dev Removes _purpose for _key from the identity.\n     *\n     * Triggers Event: `KeyRemoved`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\n     * If it's the identity itself, the approval process will determine its approval.\n     */\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n\n    /**\n     * @dev Passes an execution instruction to an ERC734 identity.\n     * How the execution is handled is up to the identity implementation:\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n     * approve this execution.\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n     *\n     * Triggers Event: ExecutionRequested\n     * Triggers on direct execution Event: Executed\n     */\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n\n    /**\n     * @dev Returns the full key data, if present in the identity.\n     */\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n\n    /**\n     * @dev Returns the list of purposes associated with a key.\n     */\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\n\n    /**\n     * @dev Returns an array of public key bytes32 held by this identity.\n     */\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n\n    /**\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n     */\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"IClaimIssuer": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "ClaimRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_sig",
									"type": "bytes"
								}
							],
							"name": "isClaimRevoked",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "sig",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "isClaimValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "revokeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "revokeClaimBySignature",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							},
							"ClaimRevoked(bytes)": {
								"details": "Emitted when a claim is revoked. Specification: MUST be triggered when revoking a claim."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"isClaimRevoked(bytes)": {
								"details": "Returns revocation status of a claim.",
								"params": {
									"_sig": "the signature of the claim"
								},
								"returns": {
									"_0": "isRevoked true if the claim is revoked and false otherwise"
								}
							},
							"isClaimValid(address,uint256,bytes,bytes)": {
								"details": "Checks if a claim is valid.",
								"params": {
									"_identity": "the identity contract related to the claim",
									"claimTopic": "the claim topic of the claim",
									"data": "the data field of the claim",
									"sig": "the signature of the claim"
								},
								"returns": {
									"_0": "claimValid true if the claim is valid, false otherwise"
								}
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"revokeClaim(bytes32,address)": {
								"details": "Revoke a claim previously issued, the claim is no longer considered as valid after revocation.",
								"params": {
									"_claimId": "the id of the claim",
									"_identity": "the address of the identity contract"
								},
								"returns": {
									"_0": "isRevoked true when the claim is revoked"
								}
							},
							"revokeClaimBySignature(bytes)": {
								"details": "Revoke a claim previously issued, the claim is no longer considered as valid after revocation.",
								"params": {
									"signature": "the signature of the claim"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"isClaimRevoked(bytes)": "2646b264",
							"isClaimValid(address,uint256,bytes,bytes)": "c0969a6e",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeClaim(bytes32)": "4eee424a",
							"removeKey(bytes32,uint256)": "53d413c5",
							"revokeClaim(bytes32,address)": "73c33708",
							"revokeClaimBySignature(bytes)": "9f7f9edd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ClaimRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"isClaimRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isClaimValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"revokeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeClaimBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"},\"ClaimRevoked(bytes)\":{\"details\":\"Emitted when a claim is revoked. Specification: MUST be triggered when revoking a claim.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"isClaimRevoked(bytes)\":{\"details\":\"Returns revocation status of a claim.\",\"params\":{\"_sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"isRevoked true if the claim is revoked and false otherwise\"}},\"isClaimValid(address,uint256,bytes,bytes)\":{\"details\":\"Checks if a claim is valid.\",\"params\":{\"_identity\":\"the identity contract related to the claim\",\"claimTopic\":\"the claim topic of the claim\",\"data\":\"the data field of the claim\",\"sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"claimValid true if the claim is valid, false otherwise\"}},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"revokeClaim(bytes32,address)\":{\"details\":\"Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\",\"params\":{\"_claimId\":\"the id of the claim\",\"_identity\":\"the address of the identity contract\"},\"returns\":{\"_0\":\"isRevoked true when the claim is revoked\"}},\"revokeClaimBySignature(bytes)\":{\"details\":\"Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\",\"params\":{\"signature\":\"the signature of the claim\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"revokeClaim(bytes32,address)\":{\"notice\":\"will fetch the claim from the identity contract (unsafe).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":\"IClaimIssuer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"revokeClaim(bytes32,address)": {
								"notice": "will fetch the claim from the identity contract (unsafe)."
							}
						},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"IERC734": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface of the ERC734 (Key Holder) standard as defined in the EIP.",
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeKey(bytes32,uint256)": "53d413c5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface of the ERC734 (Key Holder) standard as defined in the EIP.\",\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":\"IERC734\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"IERC735": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface of the ERC735 (Claim Holder) standard as defined in the EIP.",
						"events": {
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"removeClaim(bytes32)": "4eee424a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface of the ERC735 (Claim Holder) standard as defined in the EIP.\",\"events\":{\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IERC735.sol\":\"IERC735\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"IIdentity": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "sig",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "isClaimValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"isClaimValid(address,uint256,bytes,bytes)": {
								"details": "Checks if a claim is valid.",
								"params": {
									"_identity": "the identity contract related to the claim",
									"claimTopic": "the claim topic of the claim",
									"data": "the data field of the claim",
									"sig": "the signature of the claim"
								},
								"returns": {
									"_0": "claimValid true if the claim is valid, false otherwise"
								}
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"isClaimValid(address,uint256,bytes,bytes)": "c0969a6e",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeClaim(bytes32)": "4eee424a",
							"removeKey(bytes32,uint256)": "53d413c5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isClaimValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"isClaimValid(address,uint256,bytes,bytes)\":{\"details\":\"Checks if a claim is valid.\",\"params\":{\"_identity\":\"the identity contract related to the claim\",\"claimTopic\":\"the claim topic of the claim\",\"data\":\"the data field of the claim\",\"sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"claimValid true if the claim is valid, false otherwise\"}},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":\"IIdentity\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							]
						},
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 355,
								"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)350_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)350_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)350_storage"
							},
							"t_struct(RoleData)350_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 347,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "hasRole",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 349,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							]
						},
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/compliance/BasicCompliance.sol": {
				"BasicCompliance": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "TokenBound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "TokenUnbound",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TOKEN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "country_code",
									"type": "uint16"
								}
							],
							"name": "addAllowedCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "bindToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "countryCode",
									"type": "uint16"
								}
							],
							"name": "canTransfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "created",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "destroyed",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"name": "isCountryAllowed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "isTokenBound",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "country_code",
									"type": "uint16"
								}
							],
							"name": "removeAllowedCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenBound",
							"outputs": [
								{
									"internalType": "contract IToken",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "transferred",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "unbindToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							]
						},
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"bindToken(address)": {
								"details": "See {ICompliance-bindToken}."
							},
							"canTransfer(address,address,uint256,uint16)": {
								"details": "See {ICompliance-canTransfer}."
							},
							"created(address,uint256)": {
								"details": "See {ICompliance-created}."
							},
							"destroyed(address,uint256)": {
								"details": "See {ICompliance-destroyed}."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"isTokenBound(address)": {
								"details": "See {ICompliance-isTokenBound}."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"unbindToken(address)": {
								"details": "See {ICompliance-unbindToken}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/compliance/BasicCompliance.sol\":189:3074  contract BasicCompliance is ICompliance, AccessControl {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/compliance/BasicCompliance.sol\":800:907  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/compliance/BasicCompliance.sol\":824:854  _grantRole(0x00, _msgSender()) */\n  tag_4\n    /* \"contracts/compliance/BasicCompliance.sol\":835:839  0x00 */\n  0x00\n    /* \"contracts/compliance/BasicCompliance.sol\":824:854  _grantRole(0x00, _msgSender()) */\n  dup1\n  shl\n    /* \"contracts/compliance/BasicCompliance.sol\":841:853  _msgSender() */\n  tag_5\n    /* \"contracts/compliance/BasicCompliance.sol\":841:851  _msgSender */\n  shl(0x20, tag_6)\n    /* \"contracts/compliance/BasicCompliance.sol\":841:853  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_5:\n    /* \"contracts/compliance/BasicCompliance.sol\":824:834  _grantRole */\n  shl(0x20, tag_7)\n    /* \"contracts/compliance/BasicCompliance.sol\":824:854  _grantRole(0x00, _msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n  pop\n    /* \"contracts/compliance/BasicCompliance.sol\":864:900  _grantRole(ADMIN_ROLE, _msgSender()) */\n  tag_8\n    /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n    /* \"contracts/compliance/BasicCompliance.sol\":875:885  ADMIN_ROLE */\n  0x00\n  shl\n    /* \"contracts/compliance/BasicCompliance.sol\":887:899  _msgSender() */\n  tag_9\n    /* \"contracts/compliance/BasicCompliance.sol\":887:897  _msgSender */\n  shl(0x20, tag_6)\n    /* \"contracts/compliance/BasicCompliance.sol\":887:899  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"contracts/compliance/BasicCompliance.sol\":864:874  _grantRole */\n  shl(0x20, tag_7)\n    /* \"contracts/compliance/BasicCompliance.sol\":864:900  _grantRole(ADMIN_ROLE, _msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n  pop\n    /* \"contracts/compliance/BasicCompliance.sol\":189:3074  contract BasicCompliance is ICompliance, AccessControl {... */\n  jump(tag_10)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\ntag_6:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6256:6260  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6299  hasRole(role, account) */\n  tag_13\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6285:6289  role */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6291:6298  account */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6284  hasRole */\n  shl(0x20, tag_14)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6299  hasRole(role, account) */\n  0x20\n  shr\n  jump\t// in\ntag_13:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\n  tag_15\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6321  _roles */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6327  _roles[role] */\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6322:6326  role */\n  dup6\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6327  _roles[role] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6335  _roles[role].hasRole */\n  0x00\n  add\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6344  _roles[role].hasRole[account] */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6336:6343  account */\n  dup5\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6344  _roles[role].hasRole[account] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6351  _roles[role].hasRole[account] = true */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6409  _msgSender() */\n  tag_16\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6407  _msgSender */\n  shl(0x20, tag_6)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6409  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_16:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6388:6395  account */\n  dup3\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6382:6386  role */\n  dup5\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6431:6435  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n  swap1\n  pop\n  jump(tag_12)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\ntag_15:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6473:6478  false */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_12:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2854:2990  function hasRole(bytes32 role, address account) public view virtual returns (bool) {... */\ntag_14:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2931:2935  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2966  _roles[role] */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2961:2965  role */\n  dup5\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2966  _roles[role] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2974  _roles[role].hasRole */\n  0x00\n  add\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2983  _roles[role].hasRole[account] */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2975:2982  account */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2983  _roles[role].hasRole[account] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2947:2983  return _roles[role].hasRole[account] */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2854:2990  function hasRole(bytes32 role, address account) public view virtual returns (bool) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/compliance/BasicCompliance.sol\":189:3074  contract BasicCompliance is ICompliance, AccessControl {... */\ntag_10:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/compliance/BasicCompliance.sol\":189:3074  contract BasicCompliance is ICompliance, AccessControl {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8301057b\n      gt\n      tag_23\n      jumpi\n      dup1\n      0x993e8b95\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x993e8b95\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x99f644f6\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe5316e78\n      eq\n      tag_22\n      jumpi\n      jump(tag_2)\n    tag_24:\n      dup1\n      0x8301057b\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8baf29b4\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8d2ea772\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x93e62f07\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_23:\n      dup1\n      0x40db3b50\n      gt\n      tag_25\n      jumpi\n      dup1\n      0x40db3b50\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x4f44425e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x5f8dead3\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x75b238fc\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x817544c3\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3ff5aa02\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2565:2767  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_3:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n    tag_4:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      tag_35\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4226:4362  function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n    tag_5:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      stop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5328:5573  function renounceRole(bytes32 role, address callerConfirmation) public virtual {... */\n    tag_6:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_43:\n      tag_44\n      jump\t// in\n    tag_42:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":971:1266  function bindToken(address _token) external {... */\n    tag_7:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":1332:1698  function unbindToken(address _token) external {... */\n    tag_8:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n    tag_49:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":2741:2902  function addAllowedCountry (uint16 country_code) public {... */\n    tag_9:\n      tag_52\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      tag_55\n      jump\t// in\n    tag_52:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":1902:1959  function created(address _to, uint256 _value) external {} */\n    tag_10:\n      tag_56\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_57\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n    tag_56:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":475:586  bytes32 public constant ADMIN_ROLE =... */\n    tag_11:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/compliance/BasicCompliance.sol\":2907:3072  function removeAllowedCountry (uint16 country_code) public {... */\n    tag_12:\n      tag_63\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_64\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_64:\n      tag_65\n      jump\t// in\n    tag_63:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":622:733  bytes32 public constant TOKEN_ROLE =... */\n    tag_13:\n      tag_66\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_68\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/compliance/BasicCompliance.sol\":1763:1839  function transferred(address _from, address _to, uint256 _value) external {} */\n    tag_14:\n      tag_69\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_70\n      swap2\n      swap1\n      tag_71\n      jump\t// in\n    tag_70:\n      tag_72\n      jump\t// in\n    tag_69:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":2023:2084  function destroyed(address _from, uint256 _value) external {} */\n    tag_15:\n      tag_73\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_74\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_74:\n      tag_75\n      jump\t// in\n    tag_73:\n      stop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2854:2990  function hasRole(bytes32 role, address account) public view virtual returns (bool) {... */\n    tag_16:\n      tag_76\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_77\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/compliance/BasicCompliance.sol\":415:439  IToken public tokenBound */\n    tag_17:\n      tag_80\n      tag_81\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_82\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/compliance/BasicCompliance.sol\":2493:2616  function isTokenBound(address _token) external view returns (bool) {... */\n    tag_18:\n      tag_84\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_85\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_85:\n      tag_86\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_87\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/compliance/BasicCompliance.sol\":744:792  mapping (uint16=>bool)  public  isCountryAllowed */\n    tag_19:\n      tag_88\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_89\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_89:\n      tag_90\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      tag_91\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2187:2236  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_20:\n      tag_92\n      tag_93\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      tag_94\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_94:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4642:4780  function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n    tag_21:\n      tag_95\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_96\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n    tag_95:\n      stop\n        /* \"contracts/compliance/BasicCompliance.sol\":2150:2426  function canTransfer (... */\n    tag_22:\n      tag_98\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_99\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      tag_101\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      tag_102\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2565:2767  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2650:2654  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2688:2720  type(IAccessControl).interfaceId */\n      0x7965db0b00000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2720  interfaceId == type(IAccessControl).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2684  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2720  interfaceId == type(IAccessControl).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2760  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      dup1\n      tag_104\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2724:2760  super.supportsInterface(interfaceId) */\n      tag_105\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2748:2759  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2724:2747  super.supportsInterface */\n      tag_106\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2724:2760  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2760  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n    tag_104:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2666:2760  return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2565:2767  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3875:3882  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3907  _roles */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3913  _roles[role] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3908:3912  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3913  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3894:3923  return _roles[role].adminRole */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4226:4362  function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n    tag_41:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4300:4318  getRoleAdmin(role) */\n      tag_108\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4313:4317  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4300:4312  getRoleAdmin */\n      tag_35\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4300:4318  getRoleAdmin(role) */\n      jump\t// in\n    tag_108:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2480  _checkRole(role) */\n      tag_110\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2474  _checkRole */\n      tag_111\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2480  _checkRole(role) */\n      jump\t// in\n    tag_110:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4330:4355  _grantRole(role, account) */\n      tag_113\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4341:4345  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4347:4354  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4330:4340  _grantRole */\n      tag_114\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4330:4355  _grantRole(role, account) */\n      jump\t// in\n    tag_113:\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4226:4362  function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5328:5573  function renounceRole(bytes32 role, address callerConfirmation) public virtual {... */\n    tag_44:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5443:5455  _msgSender() */\n      tag_116\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5443:5453  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5443:5455  _msgSender() */\n      jump\t// in\n    tag_116:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5421:5455  callerConfirmation != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5421:5439  callerConfirmation */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5421:5455  callerConfirmation != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5417:5519  if (callerConfirmation != _msgSender()) {... */\n      tag_118\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5478:5508  AccessControlBadConfirmation() */\n      mload(0x40)\n      0x6697b23200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5417:5519  if (callerConfirmation != _msgSender()) {... */\n    tag_118:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5529:5566  _revokeRole(role, callerConfirmation) */\n      tag_119\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5541:5545  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5547:5565  callerConfirmation */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5529:5540  _revokeRole */\n      tag_120\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5529:5566  _revokeRole(role, callerConfirmation) */\n      jump\t// in\n    tag_119:\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5328:5573  function renounceRole(bytes32 role, address callerConfirmation) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":971:1266  function bindToken(address _token) external {... */\n    tag_48:\n        /* \"contracts/compliance/BasicCompliance.sol\":1046:1079  hasRole(ADMIN_ROLE, _msgSender()) */\n      tag_122\n        /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n      0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n        /* \"contracts/compliance/BasicCompliance.sol\":1054:1064  ADMIN_ROLE */\n      0x00\n      shl\n        /* \"contracts/compliance/BasicCompliance.sol\":1066:1078  _msgSender() */\n      tag_123\n        /* \"contracts/compliance/BasicCompliance.sol\":1066:1076  _msgSender */\n      tag_117\n        /* \"contracts/compliance/BasicCompliance.sol\":1066:1078  _msgSender() */\n      jump\t// in\n    tag_123:\n        /* \"contracts/compliance/BasicCompliance.sol\":1046:1053  hasRole */\n      tag_78\n        /* \"contracts/compliance/BasicCompliance.sol\":1046:1079  hasRole(ADMIN_ROLE, _msgSender()) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/compliance/BasicCompliance.sol\":1046:1132  hasRole(ADMIN_ROLE, _msgSender()) ||... */\n      dup1\n      tag_124\n      jumpi\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":1130:1131  0 */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":1099:1132  address(tokenBound) == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":1107:1117  tokenBound */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":1099:1132  address(tokenBound) == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/compliance/BasicCompliance.sol\":1046:1132  hasRole(ADMIN_ROLE, _msgSender()) ||... */\n    tag_124:\n        /* \"contracts/compliance/BasicCompliance.sol\":1025:1189  require(... */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_126\n      swap1\n      tag_127\n      jump\t// in\n    tag_126:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \"contracts/compliance/BasicCompliance.sol\":1219:1225  _token */\n      dup1\n        /* \"contracts/compliance/BasicCompliance.sol\":1199:1209  tokenBound */\n      0x02\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":1199:1226  tokenBound = IToken(_token) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":1241:1259  TokenBound(_token) */\n      0x2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b\n        /* \"contracts/compliance/BasicCompliance.sol\":1252:1258  _token */\n      dup2\n        /* \"contracts/compliance/BasicCompliance.sol\":1241:1259  TokenBound(_token) */\n      mload(0x40)\n      tag_128\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/compliance/BasicCompliance.sol\":971:1266  function bindToken(address _token) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":1332:1698  function unbindToken(address _token) external {... */\n    tag_51:\n        /* \"contracts/compliance/BasicCompliance.sol\":1409:1442  hasRole(ADMIN_ROLE, _msgSender()) */\n      tag_131\n        /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n      0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n        /* \"contracts/compliance/BasicCompliance.sol\":1417:1427  ADMIN_ROLE */\n      0x00\n      shl\n        /* \"contracts/compliance/BasicCompliance.sol\":1429:1441  _msgSender() */\n      tag_132\n        /* \"contracts/compliance/BasicCompliance.sol\":1429:1439  _msgSender */\n      tag_117\n        /* \"contracts/compliance/BasicCompliance.sol\":1429:1441  _msgSender() */\n      jump\t// in\n    tag_132:\n        /* \"contracts/compliance/BasicCompliance.sol\":1409:1416  hasRole */\n      tag_78\n        /* \"contracts/compliance/BasicCompliance.sol\":1409:1442  hasRole(ADMIN_ROLE, _msgSender()) */\n      jump\t// in\n    tag_131:\n        /* \"contracts/compliance/BasicCompliance.sol\":1409:1495  hasRole(ADMIN_ROLE, _msgSender()) ||... */\n      dup1\n      tag_133\n      jumpi\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":1462:1495  hasRole(TOKEN_ROLE, _msgSender()) */\n      tag_134\n        /* \"contracts/compliance/BasicCompliance.sol\":667:733  0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4 */\n      0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4\n        /* \"contracts/compliance/BasicCompliance.sol\":1470:1480  TOKEN_ROLE */\n      0x00\n      shl\n        /* \"contracts/compliance/BasicCompliance.sol\":1482:1494  _msgSender() */\n      tag_135\n        /* \"contracts/compliance/BasicCompliance.sol\":1482:1492  _msgSender */\n      tag_117\n        /* \"contracts/compliance/BasicCompliance.sol\":1482:1494  _msgSender() */\n      jump\t// in\n    tag_135:\n        /* \"contracts/compliance/BasicCompliance.sol\":1462:1469  hasRole */\n      tag_78\n        /* \"contracts/compliance/BasicCompliance.sol\":1462:1495  hasRole(TOKEN_ROLE, _msgSender()) */\n      jump\t// in\n    tag_134:\n        /* \"contracts/compliance/BasicCompliance.sol\":1409:1495  hasRole(ADMIN_ROLE, _msgSender()) ||... */\n    tag_133:\n        /* \"contracts/compliance/BasicCompliance.sol\":1388:1552  require(... */\n      tag_136\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap1\n      tag_127\n      jump\t// in\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_136:\n        /* \"contracts/compliance/BasicCompliance.sol\":1588:1598  tokenBound */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":1570:1599  _token == address(tokenBound) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":1570:1576  _token */\n      dup2\n        /* \"contracts/compliance/BasicCompliance.sol\":1570:1599  _token == address(tokenBound) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/compliance/BasicCompliance.sol\":1562:1629  require(_token == address(tokenBound), \"ERC-3643: Token not bound\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_139\n      swap1\n      tag_140\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_138:\n        /* \"contracts/compliance/BasicCompliance.sol\":1646:1656  tokenBound */\n      0x02\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":1639:1656  delete tokenBound */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \"contracts/compliance/BasicCompliance.sol\":1671:1691  TokenUnbound(_token) */\n      0x28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a\n        /* \"contracts/compliance/BasicCompliance.sol\":1684:1690  _token */\n      dup2\n        /* \"contracts/compliance/BasicCompliance.sol\":1671:1691  TokenUnbound(_token) */\n      mload(0x40)\n      tag_141\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_141:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/compliance/BasicCompliance.sol\":1332:1698  function unbindToken(address _token) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":2741:2902  function addAllowedCountry (uint16 country_code) public {... */\n    tag_55:\n        /* \"contracts/compliance/BasicCompliance.sol\":2815:2848  hasRole(ADMIN_ROLE, _msgSender()) */\n      tag_143\n        /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n      0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n        /* \"contracts/compliance/BasicCompliance.sol\":2823:2833  ADMIN_ROLE */\n      0x00\n      shl\n        /* \"contracts/compliance/BasicCompliance.sol\":2835:2847  _msgSender() */\n      tag_144\n        /* \"contracts/compliance/BasicCompliance.sol\":2835:2845  _msgSender */\n      tag_117\n        /* \"contracts/compliance/BasicCompliance.sol\":2835:2847  _msgSender() */\n      jump\t// in\n    tag_144:\n        /* \"contracts/compliance/BasicCompliance.sol\":2815:2822  hasRole */\n      tag_78\n        /* \"contracts/compliance/BasicCompliance.sol\":2815:2848  hasRole(ADMIN_ROLE, _msgSender()) */\n      jump\t// in\n    tag_143:\n        /* \"contracts/compliance/BasicCompliance.sol\":2807:2849  require(hasRole(ADMIN_ROLE, _msgSender())) */\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n        /* \"contracts/compliance/BasicCompliance.sol\":2890:2894  true */\n      0x01\n        /* \"contracts/compliance/BasicCompliance.sol\":2859:2875  isCountryAllowed */\n      0x03\n        /* \"contracts/compliance/BasicCompliance.sol\":2859:2889  isCountryAllowed[country_code] */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":2876:2888  country_code */\n      dup4\n        /* \"contracts/compliance/BasicCompliance.sol\":2859:2889  isCountryAllowed[country_code] */\n      0xffff\n      and\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":2859:2894  isCountryAllowed[country_code]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":2741:2902  function addAllowedCountry (uint16 country_code) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":1902:1959  function created(address _to, uint256 _value) external {} */\n    tag_59:\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":475:586  bytes32 public constant ADMIN_ROLE =... */\n    tag_61:\n        /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n      0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n        /* \"contracts/compliance/BasicCompliance.sol\":475:586  bytes32 public constant ADMIN_ROLE =... */\n      0x00\n      shl\n      dup2\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":2907:3072  function removeAllowedCountry (uint16 country_code) public {... */\n    tag_65:\n        /* \"contracts/compliance/BasicCompliance.sol\":2984:3017  hasRole(ADMIN_ROLE, _msgSender()) */\n      tag_148\n        /* \"contracts/compliance/BasicCompliance.sol\":520:586  0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775 */\n      0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\n        /* \"contracts/compliance/BasicCompliance.sol\":2992:3002  ADMIN_ROLE */\n      0x00\n      shl\n        /* \"contracts/compliance/BasicCompliance.sol\":3004:3016  _msgSender() */\n      tag_149\n        /* \"contracts/compliance/BasicCompliance.sol\":3004:3014  _msgSender */\n      tag_117\n        /* \"contracts/compliance/BasicCompliance.sol\":3004:3016  _msgSender() */\n      jump\t// in\n    tag_149:\n        /* \"contracts/compliance/BasicCompliance.sol\":2984:2991  hasRole */\n      tag_78\n        /* \"contracts/compliance/BasicCompliance.sol\":2984:3017  hasRole(ADMIN_ROLE, _msgSender()) */\n      jump\t// in\n    tag_148:\n        /* \"contracts/compliance/BasicCompliance.sol\":2976:3018  require(hasRole(ADMIN_ROLE, _msgSender())) */\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n        /* \"contracts/compliance/BasicCompliance.sol\":3059:3064  false */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":3028:3044  isCountryAllowed */\n      0x03\n        /* \"contracts/compliance/BasicCompliance.sol\":3028:3058  isCountryAllowed[country_code] */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":3045:3057  country_code */\n      dup4\n        /* \"contracts/compliance/BasicCompliance.sol\":3028:3058  isCountryAllowed[country_code] */\n      0xffff\n      and\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":3028:3064  isCountryAllowed[country_code]=false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":2907:3072  function removeAllowedCountry (uint16 country_code) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":622:733  bytes32 public constant TOKEN_ROLE =... */\n    tag_67:\n        /* \"contracts/compliance/BasicCompliance.sol\":667:733  0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4 */\n      0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4\n        /* \"contracts/compliance/BasicCompliance.sol\":622:733  bytes32 public constant TOKEN_ROLE =... */\n      0x00\n      shl\n      dup2\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":1763:1839  function transferred(address _from, address _to, uint256 _value) external {} */\n    tag_72:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":2023:2084  function destroyed(address _from, uint256 _value) external {} */\n    tag_75:\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2854:2990  function hasRole(bytes32 role, address account) public view virtual returns (bool) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2931:2935  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2966  _roles[role] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2961:2965  role */\n      dup5\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2966  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2974  _roles[role].hasRole */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2983  _roles[role].hasRole[account] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2975:2982  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2983  _roles[role].hasRole[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2947:2983  return _roles[role].hasRole[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2854:2990  function hasRole(bytes32 role, address account) public view virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":415:439  IToken public tokenBound */\n    tag_81:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":2493:2616  function isTokenBound(address _token) external view returns (bool) {... */\n    tag_86:\n        /* \"contracts/compliance/BasicCompliance.sol\":2554:2558  bool */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":2596:2606  tokenBound */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":2578:2607  _token == address(tokenBound) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":2578:2584  _token */\n      dup3\n        /* \"contracts/compliance/BasicCompliance.sol\":2578:2607  _token == address(tokenBound) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/compliance/BasicCompliance.sol\":2570:2608  return (_token == address(tokenBound)) */\n      swap1\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":2493:2616  function isTokenBound(address _token) external view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":744:792  mapping (uint16=>bool)  public  isCountryAllowed */\n    tag_90:\n      mstore(0x20, 0x03)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2187:2236  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_93:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2232:2236  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2187:2236  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup1\n      shl\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4642:4780  function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n    tag_97:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4735  getRoleAdmin(role) */\n      tag_155\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4730:4734  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4729  getRoleAdmin */\n      tag_35\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4735  getRoleAdmin(role) */\n      jump\t// in\n    tag_155:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2480  _checkRole(role) */\n      tag_157\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2474  _checkRole */\n      tag_111\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2464:2480  _checkRole(role) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4747:4773  _revokeRole(role, account) */\n      tag_159\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4759:4763  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4765:4772  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4747:4758  _revokeRole */\n      tag_120\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4747:4773  _revokeRole(role, account) */\n      jump\t// in\n    tag_159:\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4642:4780  function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/compliance/BasicCompliance.sol\":2150:2426  function canTransfer (... */\n    tag_101:\n        /* \"contracts/compliance/BasicCompliance.sol\":2309:2313  bool */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":2333:2349  isCountryAllowed */\n      0x03\n        /* \"contracts/compliance/BasicCompliance.sol\":2333:2362  isCountryAllowed[countryCode] */\n      0x00\n        /* \"contracts/compliance/BasicCompliance.sol\":2350:2361  countryCode */\n      dup4\n        /* \"contracts/compliance/BasicCompliance.sol\":2333:2362  isCountryAllowed[countryCode] */\n      0xffff\n      and\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/compliance/BasicCompliance.sol\":2325:2398  require(isCountryAllowed[countryCode],\" country complinance is rejected\") */\n      tag_161\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_162\n      swap1\n      tag_163\n      jump\t// in\n    tag_162:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_161:\n        /* \"contracts/compliance/BasicCompliance.sol\":2415:2419  true */\n      0x01\n        /* \"contracts/compliance/BasicCompliance.sol\":2408:2419  return true */\n      swap1\n      pop\n        /* \"contracts/compliance/BasicCompliance.sol\":2150:2426  function canTransfer (... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":762:908  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {... */\n    tag_106:\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":838:842  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":876:901  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":861:901  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":861:872  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":861:901  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":854:901  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":762:908  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_111:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3265:3295  _checkRole(role, _msgSender()) */\n      tag_166\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3276:3280  role */\n      dup2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3282:3294  _msgSender() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3282:3292  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3282:3294  _msgSender() */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3265:3275  _checkRole */\n      tag_168\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3265:3295  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_166:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_114:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6256:6260  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6299  hasRole(role, account) */\n      tag_170\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6285:6289  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6291:6298  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6284  hasRole */\n      tag_78\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6277:6299  hasRole(role, account) */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\n      tag_171\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6321  _roles */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6327  _roles[role] */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6322:6326  role */\n      dup6\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6327  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6335  _roles[role].hasRole */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6344  _roles[role].hasRole[account] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6336:6343  account */\n      dup5\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6344  _roles[role].hasRole[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6315:6351  _roles[role].hasRole[account] = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6409  _msgSender() */\n      tag_172\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6407  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6397:6409  _msgSender() */\n      jump\t// in\n    tag_172:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6388:6395  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6382:6386  role */\n      dup5\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6431:6435  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n      swap1\n      pop\n      jump(tag_169)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\n    tag_171:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6473:6478  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_169:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_117:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6730:7047  function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_120:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6808:6812  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6828:6850  hasRole(role, account) */\n      tag_176\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6836:6840  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6842:6849  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6828:6835  hasRole */\n      tag_78\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6828:6850  hasRole(role, account) */\n      jump\t// in\n    tag_176:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6824:7041  if (hasRole(role, account)) {... */\n      iszero\n      tag_177\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6898:6903  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6872  _roles */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6878  _roles[role] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6873:6877  role */\n      dup6\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6878  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6886  _roles[role].hasRole */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6895  _roles[role].hasRole[account] */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6887:6894  account */\n      dup5\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6895  _roles[role].hasRole[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6866:6903  _roles[role].hasRole[account] = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6949:6961  _msgSender() */\n      tag_178\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6949:6959  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6949:6961  _msgSender() */\n      jump\t// in\n    tag_178:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6922:6962  RoleRevoked(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6940:6947  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6922:6962  RoleRevoked(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6934:6938  role */\n      dup5\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6922:6962  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6983:6987  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6976:6987  return true */\n      swap1\n      pop\n      jump(tag_175)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6824:7041  if (hasRole(role, account)) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7025:7030  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7018:7030  return false */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6730:7047  function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_175:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3432:3629  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_168:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3520:3542  hasRole(role, account) */\n      tag_181\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3528:3532  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3534:3541  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3520:3527  hasRole */\n      tag_78\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3520:3542  hasRole(role, account) */\n      jump\t// in\n    tag_181:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n      tag_182\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3598:3605  account */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3607:3611  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      mload(0x40)\n      0xe2517d3f00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_183\n      swap3\n      swap2\n      swap1\n      tag_184\n      jump\t// in\n    tag_183:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3432:3629  function _checkRole(bytes32 role, address account) internal view virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_186:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:483   */\n    tag_188:\n        /* \"#utility.yul\":370:377   */\n      0x00\n        /* \"#utility.yul\":410:476   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":403:408   */\n      dup3\n        /* \"#utility.yul\":399:477   */\n      and\n        /* \"#utility.yul\":388:477   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:483   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":489:609   */\n    tag_189:\n        /* \"#utility.yul\":561:584   */\n      tag_226\n        /* \"#utility.yul\":578:583   */\n      dup2\n        /* \"#utility.yul\":561:584   */\n      tag_188\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":554:559   */\n      dup2\n        /* \"#utility.yul\":551:585   */\n      eq\n        /* \"#utility.yul\":541:603   */\n      tag_227\n      jumpi\n        /* \"#utility.yul\":599:600   */\n      0x00\n        /* \"#utility.yul\":596:597   */\n      dup1\n        /* \"#utility.yul\":589:601   */\n      revert\n        /* \"#utility.yul\":541:603   */\n    tag_227:\n        /* \"#utility.yul\":489:609   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:752   */\n    tag_190:\n        /* \"#utility.yul\":660:665   */\n      0x00\n        /* \"#utility.yul\":698:704   */\n      dup2\n        /* \"#utility.yul\":685:705   */\n      calldataload\n        /* \"#utility.yul\":676:705   */\n      swap1\n      pop\n        /* \"#utility.yul\":714:746   */\n      tag_229\n        /* \"#utility.yul\":740:745   */\n      dup2\n        /* \"#utility.yul\":714:746   */\n      tag_189\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":615:752   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1085   */\n    tag_28:\n        /* \"#utility.yul\":816:822   */\n      0x00\n        /* \"#utility.yul\":865:867   */\n      0x20\n        /* \"#utility.yul\":853:862   */\n      dup3\n        /* \"#utility.yul\":844:851   */\n      dup5\n        /* \"#utility.yul\":840:863   */\n      sub\n        /* \"#utility.yul\":836:868   */\n      slt\n        /* \"#utility.yul\":833:952   */\n      iszero\n      tag_231\n      jumpi\n        /* \"#utility.yul\":871:950   */\n      tag_232\n      tag_186\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":833:952   */\n    tag_231:\n        /* \"#utility.yul\":991:992   */\n      0x00\n        /* \"#utility.yul\":1016:1068   */\n      tag_233\n        /* \"#utility.yul\":1060:1067   */\n      dup5\n        /* \"#utility.yul\":1051:1057   */\n      dup3\n        /* \"#utility.yul\":1040:1049   */\n      dup6\n        /* \"#utility.yul\":1036:1058   */\n      add\n        /* \"#utility.yul\":1016:1068   */\n      tag_190\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":1006:1068   */\n      swap2\n      pop\n        /* \"#utility.yul\":962:1078   */\n      pop\n        /* \"#utility.yul\":758:1085   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1091:1181   */\n    tag_191:\n        /* \"#utility.yul\":1125:1132   */\n      0x00\n        /* \"#utility.yul\":1168:1173   */\n      dup2\n        /* \"#utility.yul\":1161:1174   */\n      iszero\n        /* \"#utility.yul\":1154:1175   */\n      iszero\n        /* \"#utility.yul\":1143:1175   */\n      swap1\n      pop\n        /* \"#utility.yul\":1091:1181   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1187:1296   */\n    tag_192:\n        /* \"#utility.yul\":1268:1289   */\n      tag_236\n        /* \"#utility.yul\":1283:1288   */\n      dup2\n        /* \"#utility.yul\":1268:1289   */\n      tag_191\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":1263:1266   */\n      dup3\n        /* \"#utility.yul\":1256:1290   */\n      mstore\n        /* \"#utility.yul\":1187:1296   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1302:1512   */\n    tag_31:\n        /* \"#utility.yul\":1389:1393   */\n      0x00\n        /* \"#utility.yul\":1427:1429   */\n      0x20\n        /* \"#utility.yul\":1416:1425   */\n      dup3\n        /* \"#utility.yul\":1412:1430   */\n      add\n        /* \"#utility.yul\":1404:1430   */\n      swap1\n      pop\n        /* \"#utility.yul\":1440:1505   */\n      tag_238\n        /* \"#utility.yul\":1502:1503   */\n      0x00\n        /* \"#utility.yul\":1491:1500   */\n      dup4\n        /* \"#utility.yul\":1487:1504   */\n      add\n        /* \"#utility.yul\":1478:1484   */\n      dup5\n        /* \"#utility.yul\":1440:1505   */\n      tag_192\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":1302:1512   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1595   */\n    tag_193:\n        /* \"#utility.yul\":1555:1562   */\n      0x00\n        /* \"#utility.yul\":1584:1589   */\n      dup2\n        /* \"#utility.yul\":1573:1589   */\n      swap1\n      pop\n        /* \"#utility.yul\":1518:1595   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1601:1723   */\n    tag_194:\n        /* \"#utility.yul\":1674:1698   */\n      tag_241\n        /* \"#utility.yul\":1692:1697   */\n      dup2\n        /* \"#utility.yul\":1674:1698   */\n      tag_193\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":1667:1672   */\n      dup2\n        /* \"#utility.yul\":1664:1699   */\n      eq\n        /* \"#utility.yul\":1654:1717   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":1713:1714   */\n      0x00\n        /* \"#utility.yul\":1710:1711   */\n      dup1\n        /* \"#utility.yul\":1703:1715   */\n      revert\n        /* \"#utility.yul\":1654:1717   */\n    tag_242:\n        /* \"#utility.yul\":1601:1723   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1729:1868   */\n    tag_195:\n        /* \"#utility.yul\":1775:1780   */\n      0x00\n        /* \"#utility.yul\":1813:1819   */\n      dup2\n        /* \"#utility.yul\":1800:1820   */\n      calldataload\n        /* \"#utility.yul\":1791:1820   */\n      swap1\n      pop\n        /* \"#utility.yul\":1829:1862   */\n      tag_244\n        /* \"#utility.yul\":1856:1861   */\n      dup2\n        /* \"#utility.yul\":1829:1862   */\n      tag_194\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":1729:1868   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1874:2203   */\n    tag_34:\n        /* \"#utility.yul\":1933:1939   */\n      0x00\n        /* \"#utility.yul\":1982:1984   */\n      0x20\n        /* \"#utility.yul\":1970:1979   */\n      dup3\n        /* \"#utility.yul\":1961:1968   */\n      dup5\n        /* \"#utility.yul\":1957:1980   */\n      sub\n        /* \"#utility.yul\":1953:1985   */\n      slt\n        /* \"#utility.yul\":1950:2069   */\n      iszero\n      tag_246\n      jumpi\n        /* \"#utility.yul\":1988:2067   */\n      tag_247\n      tag_186\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":1950:2069   */\n    tag_246:\n        /* \"#utility.yul\":2108:2109   */\n      0x00\n        /* \"#utility.yul\":2133:2186   */\n      tag_248\n        /* \"#utility.yul\":2178:2185   */\n      dup5\n        /* \"#utility.yul\":2169:2175   */\n      dup3\n        /* \"#utility.yul\":2158:2167   */\n      dup6\n        /* \"#utility.yul\":2154:2176   */\n      add\n        /* \"#utility.yul\":2133:2186   */\n      tag_195\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":2123:2186   */\n      swap2\n      pop\n        /* \"#utility.yul\":2079:2196   */\n      pop\n        /* \"#utility.yul\":1874:2203   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2209:2327   */\n    tag_196:\n        /* \"#utility.yul\":2296:2320   */\n      tag_250\n        /* \"#utility.yul\":2314:2319   */\n      dup2\n        /* \"#utility.yul\":2296:2320   */\n      tag_193\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":2291:2294   */\n      dup3\n        /* \"#utility.yul\":2284:2321   */\n      mstore\n        /* \"#utility.yul\":2209:2327   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2333:2555   */\n    tag_37:\n        /* \"#utility.yul\":2426:2430   */\n      0x00\n        /* \"#utility.yul\":2464:2466   */\n      0x20\n        /* \"#utility.yul\":2453:2462   */\n      dup3\n        /* \"#utility.yul\":2449:2467   */\n      add\n        /* \"#utility.yul\":2441:2467   */\n      swap1\n      pop\n        /* \"#utility.yul\":2477:2548   */\n      tag_252\n        /* \"#utility.yul\":2545:2546   */\n      0x00\n        /* \"#utility.yul\":2534:2543   */\n      dup4\n        /* \"#utility.yul\":2530:2547   */\n      add\n        /* \"#utility.yul\":2521:2527   */\n      dup5\n        /* \"#utility.yul\":2477:2548   */\n      tag_196\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":2333:2555   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2561:2687   */\n    tag_197:\n        /* \"#utility.yul\":2598:2605   */\n      0x00\n        /* \"#utility.yul\":2638:2680   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2631:2636   */\n      dup3\n        /* \"#utility.yul\":2627:2681   */\n      and\n        /* \"#utility.yul\":2616:2681   */\n      swap1\n      pop\n        /* \"#utility.yul\":2561:2687   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2693:2789   */\n    tag_198:\n        /* \"#utility.yul\":2730:2737   */\n      0x00\n        /* \"#utility.yul\":2759:2783   */\n      tag_255\n        /* \"#utility.yul\":2777:2782   */\n      dup3\n        /* \"#utility.yul\":2759:2783   */\n      tag_197\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":2748:2783   */\n      swap1\n      pop\n        /* \"#utility.yul\":2693:2789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2795:2917   */\n    tag_199:\n        /* \"#utility.yul\":2868:2892   */\n      tag_257\n        /* \"#utility.yul\":2886:2891   */\n      dup2\n        /* \"#utility.yul\":2868:2892   */\n      tag_198\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":2861:2866   */\n      dup2\n        /* \"#utility.yul\":2858:2893   */\n      eq\n        /* \"#utility.yul\":2848:2911   */\n      tag_258\n      jumpi\n        /* \"#utility.yul\":2907:2908   */\n      0x00\n        /* \"#utility.yul\":2904:2905   */\n      dup1\n        /* \"#utility.yul\":2897:2909   */\n      revert\n        /* \"#utility.yul\":2848:2911   */\n    tag_258:\n        /* \"#utility.yul\":2795:2917   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2923:3062   */\n    tag_200:\n        /* \"#utility.yul\":2969:2974   */\n      0x00\n        /* \"#utility.yul\":3007:3013   */\n      dup2\n        /* \"#utility.yul\":2994:3014   */\n      calldataload\n        /* \"#utility.yul\":2985:3014   */\n      swap1\n      pop\n        /* \"#utility.yul\":3023:3056   */\n      tag_260\n        /* \"#utility.yul\":3050:3055   */\n      dup2\n        /* \"#utility.yul\":3023:3056   */\n      tag_199\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":2923:3062   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3068:3542   */\n    tag_40:\n        /* \"#utility.yul\":3136:3142   */\n      0x00\n        /* \"#utility.yul\":3144:3150   */\n      dup1\n        /* \"#utility.yul\":3193:3195   */\n      0x40\n        /* \"#utility.yul\":3181:3190   */\n      dup4\n        /* \"#utility.yul\":3172:3179   */\n      dup6\n        /* \"#utility.yul\":3168:3191   */\n      sub\n        /* \"#utility.yul\":3164:3196   */\n      slt\n        /* \"#utility.yul\":3161:3280   */\n      iszero\n      tag_262\n      jumpi\n        /* \"#utility.yul\":3199:3278   */\n      tag_263\n      tag_186\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":3161:3280   */\n    tag_262:\n        /* \"#utility.yul\":3319:3320   */\n      0x00\n        /* \"#utility.yul\":3344:3397   */\n      tag_264\n        /* \"#utility.yul\":3389:3396   */\n      dup6\n        /* \"#utility.yul\":3380:3386   */\n      dup3\n        /* \"#utility.yul\":3369:3378   */\n      dup7\n        /* \"#utility.yul\":3365:3387   */\n      add\n        /* \"#utility.yul\":3344:3397   */\n      tag_195\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":3334:3397   */\n      swap3\n      pop\n        /* \"#utility.yul\":3290:3407   */\n      pop\n        /* \"#utility.yul\":3446:3448   */\n      0x20\n        /* \"#utility.yul\":3472:3525   */\n      tag_265\n        /* \"#utility.yul\":3517:3524   */\n      dup6\n        /* \"#utility.yul\":3508:3514   */\n      dup3\n        /* \"#utility.yul\":3497:3506   */\n      dup7\n        /* \"#utility.yul\":3493:3515   */\n      add\n        /* \"#utility.yul\":3472:3525   */\n      tag_200\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":3462:3525   */\n      swap2\n      pop\n        /* \"#utility.yul\":3417:3535   */\n      pop\n        /* \"#utility.yul\":3068:3542   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3548:3877   */\n    tag_47:\n        /* \"#utility.yul\":3607:3613   */\n      0x00\n        /* \"#utility.yul\":3656:3658   */\n      0x20\n        /* \"#utility.yul\":3644:3653   */\n      dup3\n        /* \"#utility.yul\":3635:3642   */\n      dup5\n        /* \"#utility.yul\":3631:3654   */\n      sub\n        /* \"#utility.yul\":3627:3659   */\n      slt\n        /* \"#utility.yul\":3624:3743   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":3662:3741   */\n      tag_268\n      tag_186\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":3624:3743   */\n    tag_267:\n        /* \"#utility.yul\":3782:3783   */\n      0x00\n        /* \"#utility.yul\":3807:3860   */\n      tag_269\n        /* \"#utility.yul\":3852:3859   */\n      dup5\n        /* \"#utility.yul\":3843:3849   */\n      dup3\n        /* \"#utility.yul\":3832:3841   */\n      dup6\n        /* \"#utility.yul\":3828:3850   */\n      add\n        /* \"#utility.yul\":3807:3860   */\n      tag_200\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":3797:3860   */\n      swap2\n      pop\n        /* \"#utility.yul\":3753:3870   */\n      pop\n        /* \"#utility.yul\":3548:3877   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3883:3972   */\n    tag_201:\n        /* \"#utility.yul\":3919:3926   */\n      0x00\n        /* \"#utility.yul\":3959:3965   */\n      0xffff\n        /* \"#utility.yul\":3952:3957   */\n      dup3\n        /* \"#utility.yul\":3948:3966   */\n      and\n        /* \"#utility.yul\":3937:3966   */\n      swap1\n      pop\n        /* \"#utility.yul\":3883:3972   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3978:4098   */\n    tag_202:\n        /* \"#utility.yul\":4050:4073   */\n      tag_272\n        /* \"#utility.yul\":4067:4072   */\n      dup2\n        /* \"#utility.yul\":4050:4073   */\n      tag_201\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":4043:4048   */\n      dup2\n        /* \"#utility.yul\":4040:4074   */\n      eq\n        /* \"#utility.yul\":4030:4092   */\n      tag_273\n      jumpi\n        /* \"#utility.yul\":4088:4089   */\n      0x00\n        /* \"#utility.yul\":4085:4086   */\n      dup1\n        /* \"#utility.yul\":4078:4090   */\n      revert\n        /* \"#utility.yul\":4030:4092   */\n    tag_273:\n        /* \"#utility.yul\":3978:4098   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4104:4241   */\n    tag_203:\n        /* \"#utility.yul\":4149:4154   */\n      0x00\n        /* \"#utility.yul\":4187:4193   */\n      dup2\n        /* \"#utility.yul\":4174:4194   */\n      calldataload\n        /* \"#utility.yul\":4165:4194   */\n      swap1\n      pop\n        /* \"#utility.yul\":4203:4235   */\n      tag_275\n        /* \"#utility.yul\":4229:4234   */\n      dup2\n        /* \"#utility.yul\":4203:4235   */\n      tag_202\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":4104:4241   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4247:4574   */\n    tag_54:\n        /* \"#utility.yul\":4305:4311   */\n      0x00\n        /* \"#utility.yul\":4354:4356   */\n      0x20\n        /* \"#utility.yul\":4342:4351   */\n      dup3\n        /* \"#utility.yul\":4333:4340   */\n      dup5\n        /* \"#utility.yul\":4329:4352   */\n      sub\n        /* \"#utility.yul\":4325:4357   */\n      slt\n        /* \"#utility.yul\":4322:4441   */\n      iszero\n      tag_277\n      jumpi\n        /* \"#utility.yul\":4360:4439   */\n      tag_278\n      tag_186\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":4322:4441   */\n    tag_277:\n        /* \"#utility.yul\":4480:4481   */\n      0x00\n        /* \"#utility.yul\":4505:4557   */\n      tag_279\n        /* \"#utility.yul\":4549:4556   */\n      dup5\n        /* \"#utility.yul\":4540:4546   */\n      dup3\n        /* \"#utility.yul\":4529:4538   */\n      dup6\n        /* \"#utility.yul\":4525:4547   */\n      add\n        /* \"#utility.yul\":4505:4557   */\n      tag_203\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":4495:4557   */\n      swap2\n      pop\n        /* \"#utility.yul\":4451:4567   */\n      pop\n        /* \"#utility.yul\":4247:4574   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4580:4657   */\n    tag_204:\n        /* \"#utility.yul\":4617:4624   */\n      0x00\n        /* \"#utility.yul\":4646:4651   */\n      dup2\n        /* \"#utility.yul\":4635:4651   */\n      swap1\n      pop\n        /* \"#utility.yul\":4580:4657   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4663:4785   */\n    tag_205:\n        /* \"#utility.yul\":4736:4760   */\n      tag_282\n        /* \"#utility.yul\":4754:4759   */\n      dup2\n        /* \"#utility.yul\":4736:4760   */\n      tag_204\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":4729:4734   */\n      dup2\n        /* \"#utility.yul\":4726:4761   */\n      eq\n        /* \"#utility.yul\":4716:4779   */\n      tag_283\n      jumpi\n        /* \"#utility.yul\":4775:4776   */\n      0x00\n        /* \"#utility.yul\":4772:4773   */\n      dup1\n        /* \"#utility.yul\":4765:4777   */\n      revert\n        /* \"#utility.yul\":4716:4779   */\n    tag_283:\n        /* \"#utility.yul\":4663:4785   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4791:4930   */\n    tag_206:\n        /* \"#utility.yul\":4837:4842   */\n      0x00\n        /* \"#utility.yul\":4875:4881   */\n      dup2\n        /* \"#utility.yul\":4862:4882   */\n      calldataload\n        /* \"#utility.yul\":4853:4882   */\n      swap1\n      pop\n        /* \"#utility.yul\":4891:4924   */\n      tag_285\n        /* \"#utility.yul\":4918:4923   */\n      dup2\n        /* \"#utility.yul\":4891:4924   */\n      tag_205\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":4791:4930   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4936:5410   */\n    tag_58:\n        /* \"#utility.yul\":5004:5010   */\n      0x00\n        /* \"#utility.yul\":5012:5018   */\n      dup1\n        /* \"#utility.yul\":5061:5063   */\n      0x40\n        /* \"#utility.yul\":5049:5058   */\n      dup4\n        /* \"#utility.yul\":5040:5047   */\n      dup6\n        /* \"#utility.yul\":5036:5059   */\n      sub\n        /* \"#utility.yul\":5032:5064   */\n      slt\n        /* \"#utility.yul\":5029:5148   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":5067:5146   */\n      tag_288\n      tag_186\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":5029:5148   */\n    tag_287:\n        /* \"#utility.yul\":5187:5188   */\n      0x00\n        /* \"#utility.yul\":5212:5265   */\n      tag_289\n        /* \"#utility.yul\":5257:5264   */\n      dup6\n        /* \"#utility.yul\":5248:5254   */\n      dup3\n        /* \"#utility.yul\":5237:5246   */\n      dup7\n        /* \"#utility.yul\":5233:5255   */\n      add\n        /* \"#utility.yul\":5212:5265   */\n      tag_200\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":5202:5265   */\n      swap3\n      pop\n        /* \"#utility.yul\":5158:5275   */\n      pop\n        /* \"#utility.yul\":5314:5316   */\n      0x20\n        /* \"#utility.yul\":5340:5393   */\n      tag_290\n        /* \"#utility.yul\":5385:5392   */\n      dup6\n        /* \"#utility.yul\":5376:5382   */\n      dup3\n        /* \"#utility.yul\":5365:5374   */\n      dup7\n        /* \"#utility.yul\":5361:5383   */\n      add\n        /* \"#utility.yul\":5340:5393   */\n      tag_206\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":5330:5393   */\n      swap2\n      pop\n        /* \"#utility.yul\":5285:5403   */\n      pop\n        /* \"#utility.yul\":4936:5410   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5416:6035   */\n    tag_71:\n        /* \"#utility.yul\":5493:5499   */\n      0x00\n        /* \"#utility.yul\":5501:5507   */\n      dup1\n        /* \"#utility.yul\":5509:5515   */\n      0x00\n        /* \"#utility.yul\":5558:5560   */\n      0x60\n        /* \"#utility.yul\":5546:5555   */\n      dup5\n        /* \"#utility.yul\":5537:5544   */\n      dup7\n        /* \"#utility.yul\":5533:5556   */\n      sub\n        /* \"#utility.yul\":5529:5561   */\n      slt\n        /* \"#utility.yul\":5526:5645   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":5564:5643   */\n      tag_293\n      tag_186\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":5526:5645   */\n    tag_292:\n        /* \"#utility.yul\":5684:5685   */\n      0x00\n        /* \"#utility.yul\":5709:5762   */\n      tag_294\n        /* \"#utility.yul\":5754:5761   */\n      dup7\n        /* \"#utility.yul\":5745:5751   */\n      dup3\n        /* \"#utility.yul\":5734:5743   */\n      dup8\n        /* \"#utility.yul\":5730:5752   */\n      add\n        /* \"#utility.yul\":5709:5762   */\n      tag_200\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":5699:5762   */\n      swap4\n      pop\n        /* \"#utility.yul\":5655:5772   */\n      pop\n        /* \"#utility.yul\":5811:5813   */\n      0x20\n        /* \"#utility.yul\":5837:5890   */\n      tag_295\n        /* \"#utility.yul\":5882:5889   */\n      dup7\n        /* \"#utility.yul\":5873:5879   */\n      dup3\n        /* \"#utility.yul\":5862:5871   */\n      dup8\n        /* \"#utility.yul\":5858:5880   */\n      add\n        /* \"#utility.yul\":5837:5890   */\n      tag_200\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":5827:5890   */\n      swap3\n      pop\n        /* \"#utility.yul\":5782:5900   */\n      pop\n        /* \"#utility.yul\":5939:5941   */\n      0x40\n        /* \"#utility.yul\":5965:6018   */\n      tag_296\n        /* \"#utility.yul\":6010:6017   */\n      dup7\n        /* \"#utility.yul\":6001:6007   */\n      dup3\n        /* \"#utility.yul\":5990:5999   */\n      dup8\n        /* \"#utility.yul\":5986:6008   */\n      add\n        /* \"#utility.yul\":5965:6018   */\n      tag_206\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":5955:6018   */\n      swap2\n      pop\n        /* \"#utility.yul\":5910:6028   */\n      pop\n        /* \"#utility.yul\":5416:6035   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":6041:6101   */\n    tag_207:\n        /* \"#utility.yul\":6069:6072   */\n      0x00\n        /* \"#utility.yul\":6090:6095   */\n      dup2\n        /* \"#utility.yul\":6083:6095   */\n      swap1\n      pop\n        /* \"#utility.yul\":6041:6101   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6107:6249   */\n    tag_208:\n        /* \"#utility.yul\":6157:6166   */\n      0x00\n        /* \"#utility.yul\":6190:6243   */\n      tag_299\n        /* \"#utility.yul\":6208:6242   */\n      tag_300\n        /* \"#utility.yul\":6217:6241   */\n      tag_301\n        /* \"#utility.yul\":6235:6240   */\n      dup5\n        /* \"#utility.yul\":6217:6241   */\n      tag_197\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":6208:6242   */\n      tag_207\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":6190:6243   */\n      tag_197\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":6177:6243   */\n      swap1\n      pop\n        /* \"#utility.yul\":6107:6249   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6255:6381   */\n    tag_209:\n        /* \"#utility.yul\":6305:6314   */\n      0x00\n        /* \"#utility.yul\":6338:6375   */\n      tag_303\n        /* \"#utility.yul\":6369:6374   */\n      dup3\n        /* \"#utility.yul\":6338:6375   */\n      tag_208\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":6325:6375   */\n      swap1\n      pop\n        /* \"#utility.yul\":6255:6381   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6387:6528   */\n    tag_210:\n        /* \"#utility.yul\":6452:6461   */\n      0x00\n        /* \"#utility.yul\":6485:6522   */\n      tag_305\n        /* \"#utility.yul\":6516:6521   */\n      dup3\n        /* \"#utility.yul\":6485:6522   */\n      tag_209\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":6472:6522   */\n      swap1\n      pop\n        /* \"#utility.yul\":6387:6528   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6534:6695   */\n    tag_211:\n        /* \"#utility.yul\":6636:6688   */\n      tag_307\n        /* \"#utility.yul\":6682:6687   */\n      dup2\n        /* \"#utility.yul\":6636:6688   */\n      tag_210\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":6631:6634   */\n      dup3\n        /* \"#utility.yul\":6624:6689   */\n      mstore\n        /* \"#utility.yul\":6534:6695   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6701:6953   */\n    tag_83:\n        /* \"#utility.yul\":6809:6813   */\n      0x00\n        /* \"#utility.yul\":6847:6849   */\n      0x20\n        /* \"#utility.yul\":6836:6845   */\n      dup3\n        /* \"#utility.yul\":6832:6850   */\n      add\n        /* \"#utility.yul\":6824:6850   */\n      swap1\n      pop\n        /* \"#utility.yul\":6860:6946   */\n      tag_309\n        /* \"#utility.yul\":6943:6944   */\n      0x00\n        /* \"#utility.yul\":6932:6941   */\n      dup4\n        /* \"#utility.yul\":6928:6945   */\n      add\n        /* \"#utility.yul\":6919:6925   */\n      dup5\n        /* \"#utility.yul\":6860:6946   */\n      tag_211\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":6701:6953   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6959:7722   */\n    tag_100:\n        /* \"#utility.yul\":7044:7050   */\n      0x00\n        /* \"#utility.yul\":7052:7058   */\n      dup1\n        /* \"#utility.yul\":7060:7066   */\n      0x00\n        /* \"#utility.yul\":7068:7074   */\n      dup1\n        /* \"#utility.yul\":7117:7120   */\n      0x80\n        /* \"#utility.yul\":7105:7114   */\n      dup6\n        /* \"#utility.yul\":7096:7103   */\n      dup8\n        /* \"#utility.yul\":7092:7115   */\n      sub\n        /* \"#utility.yul\":7088:7121   */\n      slt\n        /* \"#utility.yul\":7085:7205   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":7124:7203   */\n      tag_312\n      tag_186\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":7085:7205   */\n    tag_311:\n        /* \"#utility.yul\":7244:7245   */\n      0x00\n        /* \"#utility.yul\":7269:7322   */\n      tag_313\n        /* \"#utility.yul\":7314:7321   */\n      dup8\n        /* \"#utility.yul\":7305:7311   */\n      dup3\n        /* \"#utility.yul\":7294:7303   */\n      dup9\n        /* \"#utility.yul\":7290:7312   */\n      add\n        /* \"#utility.yul\":7269:7322   */\n      tag_200\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":7259:7322   */\n      swap5\n      pop\n        /* \"#utility.yul\":7215:7332   */\n      pop\n        /* \"#utility.yul\":7371:7373   */\n      0x20\n        /* \"#utility.yul\":7397:7450   */\n      tag_314\n        /* \"#utility.yul\":7442:7449   */\n      dup8\n        /* \"#utility.yul\":7433:7439   */\n      dup3\n        /* \"#utility.yul\":7422:7431   */\n      dup9\n        /* \"#utility.yul\":7418:7440   */\n      add\n        /* \"#utility.yul\":7397:7450   */\n      tag_200\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":7387:7450   */\n      swap4\n      pop\n        /* \"#utility.yul\":7342:7460   */\n      pop\n        /* \"#utility.yul\":7499:7501   */\n      0x40\n        /* \"#utility.yul\":7525:7578   */\n      tag_315\n        /* \"#utility.yul\":7570:7577   */\n      dup8\n        /* \"#utility.yul\":7561:7567   */\n      dup3\n        /* \"#utility.yul\":7550:7559   */\n      dup9\n        /* \"#utility.yul\":7546:7568   */\n      add\n        /* \"#utility.yul\":7525:7578   */\n      tag_206\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":7515:7578   */\n      swap3\n      pop\n        /* \"#utility.yul\":7470:7588   */\n      pop\n        /* \"#utility.yul\":7627:7629   */\n      0x60\n        /* \"#utility.yul\":7653:7705   */\n      tag_316\n        /* \"#utility.yul\":7697:7704   */\n      dup8\n        /* \"#utility.yul\":7688:7694   */\n      dup3\n        /* \"#utility.yul\":7677:7686   */\n      dup9\n        /* \"#utility.yul\":7673:7695   */\n      add\n        /* \"#utility.yul\":7653:7705   */\n      tag_203\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":7643:7705   */\n      swap2\n      pop\n        /* \"#utility.yul\":7598:7715   */\n      pop\n        /* \"#utility.yul\":6959:7722   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7728:7897   */\n    tag_212:\n        /* \"#utility.yul\":7812:7823   */\n      0x00\n        /* \"#utility.yul\":7846:7852   */\n      dup3\n        /* \"#utility.yul\":7841:7844   */\n      dup3\n        /* \"#utility.yul\":7834:7853   */\n      mstore\n        /* \"#utility.yul\":7886:7890   */\n      0x20\n        /* \"#utility.yul\":7881:7884   */\n      dup3\n        /* \"#utility.yul\":7877:7891   */\n      add\n        /* \"#utility.yul\":7862:7891   */\n      swap1\n      pop\n        /* \"#utility.yul\":7728:7897   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7903:8084   */\n    tag_213:\n        /* \"#utility.yul\":8043:8076   */\n      0x4552432d333634333a2043616c6c6572206e6f7420617574686f72697a656400\n        /* \"#utility.yul\":8039:8040   */\n      0x00\n        /* \"#utility.yul\":8031:8037   */\n      dup3\n        /* \"#utility.yul\":8027:8041   */\n      add\n        /* \"#utility.yul\":8020:8077   */\n      mstore\n        /* \"#utility.yul\":7903:8084   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8090:8456   */\n    tag_214:\n        /* \"#utility.yul\":8232:8235   */\n      0x00\n        /* \"#utility.yul\":8253:8320   */\n      tag_320\n        /* \"#utility.yul\":8317:8319   */\n      0x1f\n        /* \"#utility.yul\":8312:8315   */\n      dup4\n        /* \"#utility.yul\":8253:8320   */\n      tag_212\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":8246:8320   */\n      swap2\n      pop\n        /* \"#utility.yul\":8329:8422   */\n      tag_321\n        /* \"#utility.yul\":8418:8421   */\n      dup3\n        /* \"#utility.yul\":8329:8422   */\n      tag_213\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":8447:8449   */\n      0x20\n        /* \"#utility.yul\":8442:8445   */\n      dup3\n        /* \"#utility.yul\":8438:8450   */\n      add\n        /* \"#utility.yul\":8431:8450   */\n      swap1\n      pop\n        /* \"#utility.yul\":8090:8456   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8462:8881   */\n    tag_127:\n        /* \"#utility.yul\":8628:8632   */\n      0x00\n        /* \"#utility.yul\":8666:8668   */\n      0x20\n        /* \"#utility.yul\":8655:8664   */\n      dup3\n        /* \"#utility.yul\":8651:8669   */\n      add\n        /* \"#utility.yul\":8643:8669   */\n      swap1\n      pop\n        /* \"#utility.yul\":8715:8724   */\n      dup2\n        /* \"#utility.yul\":8709:8713   */\n      dup2\n        /* \"#utility.yul\":8705:8725   */\n      sub\n        /* \"#utility.yul\":8701:8702   */\n      0x00\n        /* \"#utility.yul\":8690:8699   */\n      dup4\n        /* \"#utility.yul\":8686:8703   */\n      add\n        /* \"#utility.yul\":8679:8726   */\n      mstore\n        /* \"#utility.yul\":8743:8874   */\n      tag_323\n        /* \"#utility.yul\":8869:8873   */\n      dup2\n        /* \"#utility.yul\":8743:8874   */\n      tag_214\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":8735:8874   */\n      swap1\n      pop\n        /* \"#utility.yul\":8462:8881   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8887:9005   */\n    tag_215:\n        /* \"#utility.yul\":8974:8998   */\n      tag_325\n        /* \"#utility.yul\":8992:8997   */\n      dup2\n        /* \"#utility.yul\":8974:8998   */\n      tag_198\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":8969:8972   */\n      dup3\n        /* \"#utility.yul\":8962:8999   */\n      mstore\n        /* \"#utility.yul\":8887:9005   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9011:9233   */\n    tag_129:\n        /* \"#utility.yul\":9104:9108   */\n      0x00\n        /* \"#utility.yul\":9142:9144   */\n      0x20\n        /* \"#utility.yul\":9131:9140   */\n      dup3\n        /* \"#utility.yul\":9127:9145   */\n      add\n        /* \"#utility.yul\":9119:9145   */\n      swap1\n      pop\n        /* \"#utility.yul\":9155:9226   */\n      tag_327\n        /* \"#utility.yul\":9223:9224   */\n      0x00\n        /* \"#utility.yul\":9212:9221   */\n      dup4\n        /* \"#utility.yul\":9208:9225   */\n      add\n        /* \"#utility.yul\":9199:9205   */\n      dup5\n        /* \"#utility.yul\":9155:9226   */\n      tag_215\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":9011:9233   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9239:9414   */\n    tag_216:\n        /* \"#utility.yul\":9379:9406   */\n      0x4552432d333634333a20546f6b656e206e6f7420626f756e6400000000000000\n        /* \"#utility.yul\":9375:9376   */\n      0x00\n        /* \"#utility.yul\":9367:9373   */\n      dup3\n        /* \"#utility.yul\":9363:9377   */\n      add\n        /* \"#utility.yul\":9356:9407   */\n      mstore\n        /* \"#utility.yul\":9239:9414   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9420:9786   */\n    tag_217:\n        /* \"#utility.yul\":9562:9565   */\n      0x00\n        /* \"#utility.yul\":9583:9650   */\n      tag_330\n        /* \"#utility.yul\":9647:9649   */\n      0x19\n        /* \"#utility.yul\":9642:9645   */\n      dup4\n        /* \"#utility.yul\":9583:9650   */\n      tag_212\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":9576:9650   */\n      swap2\n      pop\n        /* \"#utility.yul\":9659:9752   */\n      tag_331\n        /* \"#utility.yul\":9748:9751   */\n      dup3\n        /* \"#utility.yul\":9659:9752   */\n      tag_216\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":9777:9779   */\n      0x20\n        /* \"#utility.yul\":9772:9775   */\n      dup3\n        /* \"#utility.yul\":9768:9780   */\n      add\n        /* \"#utility.yul\":9761:9780   */\n      swap1\n      pop\n        /* \"#utility.yul\":9420:9786   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9792:10211   */\n    tag_140:\n        /* \"#utility.yul\":9958:9962   */\n      0x00\n        /* \"#utility.yul\":9996:9998   */\n      0x20\n        /* \"#utility.yul\":9985:9994   */\n      dup3\n        /* \"#utility.yul\":9981:9999   */\n      add\n        /* \"#utility.yul\":9973:9999   */\n      swap1\n      pop\n        /* \"#utility.yul\":10045:10054   */\n      dup2\n        /* \"#utility.yul\":10039:10043   */\n      dup2\n        /* \"#utility.yul\":10035:10055   */\n      sub\n        /* \"#utility.yul\":10031:10032   */\n      0x00\n        /* \"#utility.yul\":10020:10029   */\n      dup4\n        /* \"#utility.yul\":10016:10033   */\n      add\n        /* \"#utility.yul\":10009:10056   */\n      mstore\n        /* \"#utility.yul\":10073:10204   */\n      tag_333\n        /* \"#utility.yul\":10199:10203   */\n      dup2\n        /* \"#utility.yul\":10073:10204   */\n      tag_217\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":10065:10204   */\n      swap1\n      pop\n        /* \"#utility.yul\":9792:10211   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10217:10399   */\n    tag_218:\n        /* \"#utility.yul\":10357:10391   */\n      0x20636f756e74727920636f6d706c696e616e63652069732072656a6563746564\n        /* \"#utility.yul\":10353:10354   */\n      0x00\n        /* \"#utility.yul\":10345:10351   */\n      dup3\n        /* \"#utility.yul\":10341:10355   */\n      add\n        /* \"#utility.yul\":10334:10392   */\n      mstore\n        /* \"#utility.yul\":10217:10399   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10405:10771   */\n    tag_219:\n        /* \"#utility.yul\":10547:10550   */\n      0x00\n        /* \"#utility.yul\":10568:10635   */\n      tag_336\n        /* \"#utility.yul\":10632:10634   */\n      0x20\n        /* \"#utility.yul\":10627:10630   */\n      dup4\n        /* \"#utility.yul\":10568:10635   */\n      tag_212\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":10561:10635   */\n      swap2\n      pop\n        /* \"#utility.yul\":10644:10737   */\n      tag_337\n        /* \"#utility.yul\":10733:10736   */\n      dup3\n        /* \"#utility.yul\":10644:10737   */\n      tag_218\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":10762:10764   */\n      0x20\n        /* \"#utility.yul\":10757:10760   */\n      dup3\n        /* \"#utility.yul\":10753:10765   */\n      add\n        /* \"#utility.yul\":10746:10765   */\n      swap1\n      pop\n        /* \"#utility.yul\":10405:10771   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10777:11196   */\n    tag_163:\n        /* \"#utility.yul\":10943:10947   */\n      0x00\n        /* \"#utility.yul\":10981:10983   */\n      0x20\n        /* \"#utility.yul\":10970:10979   */\n      dup3\n        /* \"#utility.yul\":10966:10984   */\n      add\n        /* \"#utility.yul\":10958:10984   */\n      swap1\n      pop\n        /* \"#utility.yul\":11030:11039   */\n      dup2\n        /* \"#utility.yul\":11024:11028   */\n      dup2\n        /* \"#utility.yul\":11020:11040   */\n      sub\n        /* \"#utility.yul\":11016:11017   */\n      0x00\n        /* \"#utility.yul\":11005:11014   */\n      dup4\n        /* \"#utility.yul\":11001:11018   */\n      add\n        /* \"#utility.yul\":10994:11041   */\n      mstore\n        /* \"#utility.yul\":11058:11189   */\n      tag_339\n        /* \"#utility.yul\":11184:11188   */\n      dup2\n        /* \"#utility.yul\":11058:11189   */\n      tag_219\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":11050:11189   */\n      swap1\n      pop\n        /* \"#utility.yul\":10777:11196   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11202:11534   */\n    tag_184:\n        /* \"#utility.yul\":11323:11327   */\n      0x00\n        /* \"#utility.yul\":11361:11363   */\n      0x40\n        /* \"#utility.yul\":11350:11359   */\n      dup3\n        /* \"#utility.yul\":11346:11364   */\n      add\n        /* \"#utility.yul\":11338:11364   */\n      swap1\n      pop\n        /* \"#utility.yul\":11374:11445   */\n      tag_341\n        /* \"#utility.yul\":11442:11443   */\n      0x00\n        /* \"#utility.yul\":11431:11440   */\n      dup4\n        /* \"#utility.yul\":11427:11444   */\n      add\n        /* \"#utility.yul\":11418:11424   */\n      dup6\n        /* \"#utility.yul\":11374:11445   */\n      tag_215\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":11455:11527   */\n      tag_342\n        /* \"#utility.yul\":11523:11525   */\n      0x20\n        /* \"#utility.yul\":11512:11521   */\n      dup4\n        /* \"#utility.yul\":11508:11526   */\n      add\n        /* \"#utility.yul\":11499:11505   */\n      dup5\n        /* \"#utility.yul\":11455:11527   */\n      tag_196\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":11202:11534   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d25f4d41b9e32c6e076c46ed7a308ff9048d4c35fb2e84f26f45520fcc1ca47864736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_895": {
									"entryPoint": null,
									"id": 895,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_grantRole_585": {
									"entryPoint": 134,
									"id": 585,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_msgSender_797": {
									"entryPoint": 127,
									"id": 797,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@hasRole_409": {
									"entryPoint": 385,
									"id": 409,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801562000010575f80fd5b50620000345f801b620000286200007f60201b60201c565b6200008660201b60201c565b50620000787fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b6200006c6200007f60201b60201c565b6200008660201b60201c565b50620001e4565b5f33905090565b5f6200009983836200018160201b60201c565b620001775760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620001136200007f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200017b565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b61132880620001f25f395ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c80638301057b116100ab578063993e8b951161006f578063993e8b951461031457806399f644f614610344578063a217fddf14610374578063d547741f14610392578063e5316e78146103ae5761012a565b80638301057b146102705780638baf29b41461028e5780638d2ea772146102aa57806391d14854146102c657806393e62f07146102f65761012a565b806340db3b50116100f257806340db3b50146101e25780634f44425e146101fe5780635f8dead31461021a57806375b238fc14610236578063817544c3146102545761012a565b806301ffc9a71461012e578063248a9ca31461015e5780632f2ff15d1461018e57806336568abe146101aa5780633ff5aa02146101c6575b5f80fd5b61014860048036038101906101439190610db9565b6103de565b6040516101559190610dfe565b60405180910390f35b61017860048036038101906101739190610e4a565b610457565b6040516101859190610e84565b60405180910390f35b6101a860048036038101906101a39190610ef7565b610473565b005b6101c460048036038101906101bf9190610ef7565b610495565b005b6101e060048036038101906101db9190610f35565b610510565b005b6101fc60048036038101906101f79190610f35565b610653565b005b61021860048036038101906102139190610f97565b6107ec565b005b610234600480360381019061022f9190610ff5565b61085b565b005b61023e61085f565b60405161024b9190610e84565b60405180910390f35b61026e60048036038101906102699190610f97565b610885565b005b6102786108f3565b6040516102859190610e84565b60405180910390f35b6102a860048036038101906102a39190611033565b610919565b005b6102c460048036038101906102bf9190610ff5565b61091e565b005b6102e060048036038101906102db9190610ef7565b610922565b6040516102ed9190610dfe565b60405180910390f35b6102fe610985565b60405161030b91906110de565b60405180910390f35b61032e60048036038101906103299190610f35565b6109aa565b60405161033b9190610dfe565b60405180910390f35b61035e60048036038101906103599190610f97565b610a02565b60405161036b9190610dfe565b60405180910390f35b61037c610a1f565b6040516103899190610e84565b60405180910390f35b6103ac60048036038101906103a79190610ef7565b610a25565b005b6103c860048036038101906103c391906110f7565b610a47565b6040516103d59190610dfe565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610450575061044f82610ab9565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61047c82610457565b61048581610b22565b61048f8383610b36565b50505050565b61049d610c1f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610501576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61050b8282610c26565b505050565b6105437fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b61053e610c1f565b610922565b8061059a57505f73ffffffffffffffffffffffffffffffffffffffff1660025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d0906111b5565b60405180910390fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b8160405161064891906111e2565b60405180910390a150565b6106867fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b610681610c1f565b610922565b806106c057506106bf7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae45f1b6106ba610c1f565b610922565b5b6106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906111b5565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611245565b60405180910390fd5b60025f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a816040516107e191906111e2565b60405180910390a150565b61081f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b61081a610c1f565b610922565b610827575f80fd5b600160035f8361ffff1661ffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b81565b6108b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b6108b3610c1f565b610922565b6108c0575f80fd5b5f60035f8361ffff1661ffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae45f1b81565b505050565b5050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6003602052805f5260405f205f915054906101000a900460ff1681565b5f801b81565b610a2e82610457565b610a3781610b22565b610a418383610c26565b50505050565b5f60035f8361ffff1661ffff1681526020019081526020015f205f9054906101000a900460ff16610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa4906112ad565b60405180910390fd5b60019050949350505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b3381610b2e610c1f565b610d0f565b50565b5f610b418383610922565b610c155760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610bb2610c1f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610c19565b5f90505b92915050565b5f33905090565b5f610c318383610922565b15610d05575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610ca2610c1f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610d09565b5f90505b92915050565b610d198282610922565b610d5c5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610d539291906112cb565b60405180910390fd5b5050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d9881610d64565b8114610da2575f80fd5b50565b5f81359050610db381610d8f565b92915050565b5f60208284031215610dce57610dcd610d60565b5b5f610ddb84828501610da5565b91505092915050565b5f8115159050919050565b610df881610de4565b82525050565b5f602082019050610e115f830184610def565b92915050565b5f819050919050565b610e2981610e17565b8114610e33575f80fd5b50565b5f81359050610e4481610e20565b92915050565b5f60208284031215610e5f57610e5e610d60565b5b5f610e6c84828501610e36565b91505092915050565b610e7e81610e17565b82525050565b5f602082019050610e975f830184610e75565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ec682610e9d565b9050919050565b610ed681610ebc565b8114610ee0575f80fd5b50565b5f81359050610ef181610ecd565b92915050565b5f8060408385031215610f0d57610f0c610d60565b5b5f610f1a85828601610e36565b9250506020610f2b85828601610ee3565b9150509250929050565b5f60208284031215610f4a57610f49610d60565b5b5f610f5784828501610ee3565b91505092915050565b5f61ffff82169050919050565b610f7681610f60565b8114610f80575f80fd5b50565b5f81359050610f9181610f6d565b92915050565b5f60208284031215610fac57610fab610d60565b5b5f610fb984828501610f83565b91505092915050565b5f819050919050565b610fd481610fc2565b8114610fde575f80fd5b50565b5f81359050610fef81610fcb565b92915050565b5f806040838503121561100b5761100a610d60565b5b5f61101885828601610ee3565b925050602061102985828601610fe1565b9150509250929050565b5f805f6060848603121561104a57611049610d60565b5b5f61105786828701610ee3565b935050602061106886828701610ee3565b925050604061107986828701610fe1565b9150509250925092565b5f819050919050565b5f6110a66110a161109c84610e9d565b611083565b610e9d565b9050919050565b5f6110b78261108c565b9050919050565b5f6110c8826110ad565b9050919050565b6110d8816110be565b82525050565b5f6020820190506110f15f8301846110cf565b92915050565b5f805f806080858703121561110f5761110e610d60565b5b5f61111c87828801610ee3565b945050602061112d87828801610ee3565b935050604061113e87828801610fe1565b925050606061114f87828801610f83565b91505092959194509250565b5f82825260208201905092915050565b7f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564005f82015250565b5f61119f601f8361115b565b91506111aa8261116b565b602082019050919050565b5f6020820190508181035f8301526111cc81611193565b9050919050565b6111dc81610ebc565b82525050565b5f6020820190506111f55f8301846111d3565b92915050565b7f4552432d333634333a20546f6b656e206e6f7420626f756e64000000000000005f82015250565b5f61122f60198361115b565b915061123a826111fb565b602082019050919050565b5f6020820190508181035f83015261125c81611223565b9050919050565b7f20636f756e74727920636f6d706c696e616e63652069732072656a65637465645f82015250565b5f61129760208361115b565b91506112a282611263565b602082019050919050565b5f6020820190508181035f8301526112c48161128b565b9050919050565b5f6040820190506112de5f8301856111d3565b6112eb6020830184610e75565b939250505056fea2646970667358221220d25f4d41b9e32c6e076c46ed7a308ff9048d4c35fb2e84f26f45520fcc1ca47864736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH3 0x34 PUSH0 DUP1 SHL PUSH3 0x28 PUSH3 0x7F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x86 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x78 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH3 0x6C PUSH3 0x7F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x86 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1E4 JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0x99 DUP4 DUP4 PUSH3 0x181 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x177 JUMPI PUSH1 0x1 PUSH0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x113 PUSH3 0x7F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH3 0x17B JUMP JUMPDEST PUSH0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1328 DUP1 PUSH3 0x1F2 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8301057B GT PUSH2 0xAB JUMPI DUP1 PUSH4 0x993E8B95 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x993E8B95 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x99F644F6 EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xE5316E78 EQ PUSH2 0x3AE JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x8301057B EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x8BAF29B4 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x8D2EA772 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x93E62F07 EQ PUSH2 0x2F6 JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x40DB3B50 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x40DB3B50 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x4F44425E EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x5F8DEAD3 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x817544C3 EQ PUSH2 0x254 JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x3FF5AA02 EQ PUSH2 0x1C6 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x495 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x653 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST PUSH2 0x85B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23E PUSH2 0x85F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x269 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x278 PUSH2 0x8F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x285 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DB SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x32E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33B SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36B SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x389 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0xA25 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C3 SWAP2 SWAP1 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D5 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x450 JUMPI POP PUSH2 0x44F DUP3 PUSH2 0xAB9 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x47C DUP3 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x485 DUP2 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x48F DUP4 DUP4 PUSH2 0xB36 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x49D PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x501 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x50B DUP3 DUP3 PUSH2 0xC26 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x543 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x53E PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST DUP1 PUSH2 0x59A JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x5D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D0 SWAP1 PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x2DE35142B19ED5A07796CF30791959C592018F70B1D2D7C460EEF8FFE713692B DUP2 PUSH1 0x40 MLOAD PUSH2 0x648 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x686 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x681 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST DUP1 PUSH2 0x6C0 JUMPI POP PUSH2 0x6BF PUSH32 0xA7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4 PUSH0 SHL PUSH2 0x6BA PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST JUMPDEST PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F6 SWAP1 PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP1 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH32 0x28A4CA7134A3B3F9AFF286E79AD3DAADB4A06D1B43D037A3A98BDC074EDD9B7A DUP2 PUSH1 0x40 MLOAD PUSH2 0x7E1 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x81F PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x81A PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x827 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL DUP2 JUMP JUMPDEST PUSH2 0x8B8 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x8B3 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x8C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH32 0xA7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4 PUSH0 SHL DUP2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0xA2E DUP3 PUSH2 0x457 JUMP JUMPDEST PUSH2 0xA37 DUP2 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xC26 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xAAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAA4 SWAP1 PUSH2 0x12AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB33 DUP2 PUSH2 0xB2E PUSH2 0xC1F JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0xB41 DUP4 DUP4 PUSH2 0x922 JUMP JUMPDEST PUSH2 0xC15 JUMPI PUSH1 0x1 PUSH0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xBB2 PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xC19 JUMP JUMPDEST PUSH0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xC31 DUP4 DUP4 PUSH2 0x922 JUMP JUMPDEST ISZERO PUSH2 0xD05 JUMPI PUSH0 DUP1 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xCA2 PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xD09 JUMP JUMPDEST PUSH0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD19 DUP3 DUP3 PUSH2 0x922 JUMP JUMPDEST PUSH2 0xD5C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD53 SWAP3 SWAP2 SWAP1 PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD98 DUP2 PUSH2 0xD64 JUMP JUMPDEST DUP2 EQ PUSH2 0xDA2 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDB3 DUP2 PUSH2 0xD8F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCD PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xDDB DUP5 DUP3 DUP6 ADD PUSH2 0xDA5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDF8 DUP2 PUSH2 0xDE4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE11 PUSH0 DUP4 ADD DUP5 PUSH2 0xDEF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xE17 JUMP JUMPDEST DUP2 EQ PUSH2 0xE33 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE44 DUP2 PUSH2 0xE20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE5F JUMPI PUSH2 0xE5E PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xE6C DUP5 DUP3 DUP6 ADD PUSH2 0xE36 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE7E DUP2 PUSH2 0xE17 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE97 PUSH0 DUP4 ADD DUP5 PUSH2 0xE75 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEC6 DUP3 PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xED6 DUP2 PUSH2 0xEBC JUMP JUMPDEST DUP2 EQ PUSH2 0xEE0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEF1 DUP2 PUSH2 0xECD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF0D JUMPI PUSH2 0xF0C PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF1A DUP6 DUP3 DUP7 ADD PUSH2 0xE36 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF2B DUP6 DUP3 DUP7 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF4A JUMPI PUSH2 0xF49 PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF57 DUP5 DUP3 DUP6 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF76 DUP2 PUSH2 0xF60 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF91 DUP2 PUSH2 0xF6D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAC JUMPI PUSH2 0xFAB PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xFB9 DUP5 DUP3 DUP6 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFD4 DUP2 PUSH2 0xFC2 JUMP JUMPDEST DUP2 EQ PUSH2 0xFDE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFEF DUP2 PUSH2 0xFCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x100B JUMPI PUSH2 0x100A PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1018 DUP6 DUP3 DUP7 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1029 DUP6 DUP3 DUP7 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x104A JUMPI PUSH2 0x1049 PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1057 DUP7 DUP3 DUP8 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1068 DUP7 DUP3 DUP8 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1079 DUP7 DUP3 DUP8 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10A6 PUSH2 0x10A1 PUSH2 0x109C DUP5 PUSH2 0xE9D JUMP JUMPDEST PUSH2 0x1083 JUMP JUMPDEST PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10B7 DUP3 PUSH2 0x108C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10C8 DUP3 PUSH2 0x10AD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10D8 DUP2 PUSH2 0x10BE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10F1 PUSH0 DUP4 ADD DUP5 PUSH2 0x10CF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x110F JUMPI PUSH2 0x110E PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x111C DUP8 DUP3 DUP9 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x112D DUP8 DUP3 DUP9 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x113E DUP8 DUP3 DUP9 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x114F DUP8 DUP3 DUP9 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552432D333634333A2043616C6C6572206E6F7420617574686F72697A656400 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x119F PUSH1 0x1F DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x11AA DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x11CC DUP2 PUSH2 0x1193 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11DC DUP2 PUSH2 0xEBC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11F5 PUSH0 DUP4 ADD DUP5 PUSH2 0x11D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552432D333634333A20546F6B656E206E6F7420626F756E6400000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x122F PUSH1 0x19 DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x123A DUP3 PUSH2 0x11FB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x125C DUP2 PUSH2 0x1223 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20636F756E74727920636F6D706C696E616E63652069732072656A6563746564 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1297 PUSH1 0x20 DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x12A2 DUP3 PUSH2 0x1263 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x12C4 DUP2 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12DE PUSH0 DUP4 ADD DUP6 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x12EB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE75 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 PUSH0 0x4D COINBASE 0xB9 0xE3 0x2C PUSH15 0x76C46ED7A308FF9048D4C35FB2E84 CALLCODE PUSH16 0x45520FCC1CA47864736F6C6343000814 STOP CALLER ",
							"sourceMap": "189:2885:10:-:0;;;800:107;;;;;;;;;;824:30;835:4;824:30;;841:12;:10;;;:12;;:::i;:::-;824:10;;;:30;;:::i;:::-;;864:36;520:66;875:10;;887:12;:10;;;:12;;:::i;:::-;864:10;;;:36;;:::i;:::-;;189:2885;;656:96:7;709:7;735:10;728:17;;656:96;:::o;6179:316:4:-;6256:4;6277:22;6285:4;6291:7;6277;;;:22;;:::i;:::-;6272:217;;6347:4;6315:6;:12;6322:4;6315:12;;;;;;;;;;;:20;;:29;6336:7;6315:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;6397:12;:10;;;:12;;:::i;:::-;6370:40;;6388:7;6370:40;;6382:4;6370:40;;;;;;;;;;6431:4;6424:11;;;;6272:217;6473:5;6466:12;;6179:316;;;;;:::o;2854:136::-;2931:4;2954:6;:12;2961:4;2954:12;;;;;;;;;;;:20;;:29;2975:7;2954:29;;;;;;;;;;;;;;;;;;;;;;;;;2947:36;;2854:136;;;;:::o;189:2885:10:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@ADMIN_ROLE_872": {
									"entryPoint": 2143,
									"id": 872,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@DEFAULT_ADMIN_ROLE_358": {
									"entryPoint": 2591,
									"id": 358,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@TOKEN_ROLE_875": {
									"entryPoint": 2291,
									"id": 875,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkRole_422": {
									"entryPoint": 2850,
									"id": 422,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkRole_443": {
									"entryPoint": 3343,
									"id": 443,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_grantRole_585": {
									"entryPoint": 2870,
									"id": 585,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_msgSender_797": {
									"entryPoint": 3103,
									"id": 797,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revokeRole_623": {
									"entryPoint": 3110,
									"id": 623,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@addAllowedCountry_1059": {
									"entryPoint": 2028,
									"id": 1059,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@bindToken_931": {
									"entryPoint": 1296,
									"id": 931,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@canTransfer_1022": {
									"entryPoint": 2631,
									"id": 1022,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@created_989": {
									"entryPoint": 2139,
									"id": 989,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@destroyed_998": {
									"entryPoint": 2334,
									"id": 998,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@getRoleAdmin_457": {
									"entryPoint": 1111,
									"id": 457,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@grantRole_476": {
									"entryPoint": 1139,
									"id": 476,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_409": {
									"entryPoint": 2338,
									"id": 409,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isCountryAllowed_879": {
									"entryPoint": 2562,
									"id": 879,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isTokenBound_1039": {
									"entryPoint": 2474,
									"id": 1039,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@removeAllowedCountry_1079": {
									"entryPoint": 2181,
									"id": 1079,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@renounceRole_518": {
									"entryPoint": 1173,
									"id": 518,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_495": {
									"entryPoint": 2597,
									"id": 495,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_391": {
									"entryPoint": 990,
									"id": 391,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_838": {
									"entryPoint": 2745,
									"id": 838,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenBound_869": {
									"entryPoint": 2437,
									"id": 869,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferred_980": {
									"entryPoint": 2329,
									"id": 980,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@unbindToken_970": {
									"entryPoint": 1619,
									"id": 970,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 3811,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 3638,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 3493,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint16": {
									"entryPoint": 3971,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 4065,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3893,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4147,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint16": {
									"entryPoint": 4343,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4085,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 3658,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 3831,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3513,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint16": {
									"entryPoint": 3991,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 4563,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3567,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 3701,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_IToken_$1862_to_t_address_fromStack": {
									"entryPoint": 4303,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4499,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4747,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4643,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 4578,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed": {
									"entryPoint": 4811,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3582,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 3716,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IToken_$1862__to_t_address__fromStack_reversed": {
									"entryPoint": 4318,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4533,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4781,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4677,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 4443,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 3772,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3556,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 3607,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 3428,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint16": {
									"entryPoint": 3936,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 3741,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 4034,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IToken_$1862_to_t_address": {
									"entryPoint": 4286,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 4269,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 4236,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 4227,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 3424,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"store_literal_in_memory_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c": {
									"entryPoint": 4459,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd": {
									"entryPoint": 4707,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68": {
									"entryPoint": 4603,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 3789,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 3616,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 3471,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint16": {
									"entryPoint": 3949,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 4043,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11537:17",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:17"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:17"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:17",
														"type": ""
													}
												],
												"src": "7:75:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:17"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:17"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "378:105:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "388:89:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "403:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "410:66:17",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:78:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "388:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "360:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "370:7:17",
														"type": ""
													}
												],
												"src": "334:149:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "531:78:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "587:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "596:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "589:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "589:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "589:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "554:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "561:16:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "561:23:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "551:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "551:34:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "544:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "544:42:17"
															},
															"nodeType": "YulIf",
															"src": "541:62:17"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "524:5:17",
														"type": ""
													}
												],
												"src": "489:120:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "666:86:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "676:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "698:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "685:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "685:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "676:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "740:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "714:25:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "714:32:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "714:32:17"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "652:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "660:5:17",
														"type": ""
													}
												],
												"src": "615:137:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "823:262:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "869:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "871:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "871:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "871:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "844:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "853:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "840:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "840:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "865:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "836:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:32:17"
															},
															"nodeType": "YulIf",
															"src": "833:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "962:116:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "977:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "991:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "981:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1006:62:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1040:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1051:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1036:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1036:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1060:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "1016:19:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1016:52:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1006:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "793:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "804:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "816:6:17",
														"type": ""
													}
												],
												"src": "758:327:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1133:48:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1143:32:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1168:5:17"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1161:6:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1161:13:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1154:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1154:21:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1143:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1115:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1125:7:17",
														"type": ""
													}
												],
												"src": "1091:90:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1246:50:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1263:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1283:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "1268:14:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1268:21:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1256:34:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1256:34:17"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1234:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1241:3:17",
														"type": ""
													}
												],
												"src": "1187:109:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:118:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1404:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1416:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1427:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1412:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1412:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1404:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1478:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1491:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1502:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1487:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1487:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1440:37:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1440:65:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1366:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1378:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1389:4:17",
														"type": ""
													}
												],
												"src": "1302:210:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1563:32:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1573:16:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1584:5:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1573:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1545:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1555:7:17",
														"type": ""
													}
												],
												"src": "1518:77:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1644:79:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1701:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1710:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1713:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1703:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1703:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1703:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1667:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1692:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "1674:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1674:24:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1664:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1664:35:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1657:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1657:43:17"
															},
															"nodeType": "YulIf",
															"src": "1654:63:17"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1637:5:17",
														"type": ""
													}
												],
												"src": "1601:122:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1781:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1791:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1813:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1800:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1800:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1791:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1856:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "1829:26:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1829:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1829:33:17"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1759:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1767:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1775:5:17",
														"type": ""
													}
												],
												"src": "1729:139:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1940:263:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1986:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1988:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1988:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1988:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1961:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1970:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1957:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1957:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1982:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1953:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1953:32:17"
															},
															"nodeType": "YulIf",
															"src": "1950:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "2079:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2094:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2108:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2098:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2123:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2158:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2169:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2154:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2154:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2178:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "2133:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2133:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2123:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1910:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1921:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1933:6:17",
														"type": ""
													}
												],
												"src": "1874:329:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2274:53:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2291:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2314:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "2296:17:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2296:24:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2284:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2284:37:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2284:37:17"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2262:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2269:3:17",
														"type": ""
													}
												],
												"src": "2209:118:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2431:124:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2441:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2453:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2464:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2449:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2449:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2441:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2521:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2534:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2545:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2530:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2530:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2477:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2477:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2477:71:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2403:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2415:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2426:4:17",
														"type": ""
													}
												],
												"src": "2333:222:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2606:81:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2616:65:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2631:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2638:42:17",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2627:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2627:54:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2616:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2588:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2598:7:17",
														"type": ""
													}
												],
												"src": "2561:126:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2738:51:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2748:35:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2777:5:17"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2759:17:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2759:24:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2748:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2720:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2730:7:17",
														"type": ""
													}
												],
												"src": "2693:96:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:79:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2895:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2904:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2907:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2897:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2897:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2897:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2861:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2886:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "2868:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2868:24:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2858:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2858:35:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2851:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:43:17"
															},
															"nodeType": "YulIf",
															"src": "2848:63:17"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2831:5:17",
														"type": ""
													}
												],
												"src": "2795:122:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2975:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2985:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3007:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2994:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2994:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2985:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3050:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3023:26:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3023:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3023:33:17"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2953:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2961:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2969:5:17",
														"type": ""
													}
												],
												"src": "2923:139:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3151:391:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3197:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3199:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3199:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3199:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3172:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3181:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3168:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3168:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3193:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3164:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3164:32:17"
															},
															"nodeType": "YulIf",
															"src": "3161:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "3290:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3305:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3319:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3309:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3334:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3369:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3380:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3365:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3365:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3389:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "3344:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3344:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3334:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3417:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3432:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3446:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3436:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3462:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3497:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3508:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3493:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3493:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3517:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3472:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3472:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3462:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3113:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3124:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3136:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3144:6:17",
														"type": ""
													}
												],
												"src": "3068:474:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3614:263:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3660:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3662:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3662:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3662:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3635:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3644:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3631:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3631:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3656:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3627:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:32:17"
															},
															"nodeType": "YulIf",
															"src": "3624:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "3753:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3768:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3782:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3772:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3797:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3832:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3843:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3828:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3828:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3852:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3807:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3807:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3797:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3584:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3595:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3607:6:17",
														"type": ""
													}
												],
												"src": "3548:329:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3927:45:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3937:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3952:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3959:6:17",
																		"type": "",
																		"value": "0xffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3948:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3948:18:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3937:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3909:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3919:7:17",
														"type": ""
													}
												],
												"src": "3883:89:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4020:78:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4076:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4085:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4088:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4078:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4078:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4078:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4043:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4067:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nodeType": "YulIdentifier",
																					"src": "4050:16:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4050:23:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4040:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4040:34:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4033:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4033:42:17"
															},
															"nodeType": "YulIf",
															"src": "4030:62:17"
														}
													]
												},
												"name": "validator_revert_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4013:5:17",
														"type": ""
													}
												],
												"src": "3978:120:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4155:86:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4165:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4187:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4174:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4174:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4165:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4229:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint16",
																	"nodeType": "YulIdentifier",
																	"src": "4203:25:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4203:32:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4203:32:17"
														}
													]
												},
												"name": "abi_decode_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4133:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4141:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4149:5:17",
														"type": ""
													}
												],
												"src": "4104:137:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4312:262:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4358:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4360:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4360:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4360:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4333:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4342:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4329:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4329:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4354:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4325:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4325:32:17"
															},
															"nodeType": "YulIf",
															"src": "4322:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "4451:116:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4466:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4480:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4470:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4495:62:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4529:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4540:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4525:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4525:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4549:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16",
																			"nodeType": "YulIdentifier",
																			"src": "4505:19:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4505:52:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4495:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4282:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4293:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4305:6:17",
														"type": ""
													}
												],
												"src": "4247:327:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4625:32:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4635:16:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4646:5:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4635:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4607:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4617:7:17",
														"type": ""
													}
												],
												"src": "4580:77:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4706:79:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4763:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4772:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4775:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4765:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4765:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4765:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4729:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4754:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "4736:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4736:24:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4726:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4726:35:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4719:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4719:43:17"
															},
															"nodeType": "YulIf",
															"src": "4716:63:17"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4699:5:17",
														"type": ""
													}
												],
												"src": "4663:122:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4843:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4853:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4875:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4862:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4862:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4853:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4918:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4891:26:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4891:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4891:33:17"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4821:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4829:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4837:5:17",
														"type": ""
													}
												],
												"src": "4791:139:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5019:391:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5065:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5067:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5067:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5067:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5040:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5049:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5036:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5036:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5061:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5032:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5032:32:17"
															},
															"nodeType": "YulIf",
															"src": "5029:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "5158:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5173:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5187:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5177:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5202:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5237:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5248:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5233:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5233:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5257:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5212:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5212:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5202:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5285:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5300:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5314:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5304:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5330:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5365:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5376:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5361:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5361:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5385:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5340:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5340:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5330:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4981:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4992:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5004:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5012:6:17",
														"type": ""
													}
												],
												"src": "4936:474:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5516:519:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5562:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5564:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5564:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5564:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5537:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5546:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5533:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5533:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5558:2:17",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5529:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5529:32:17"
															},
															"nodeType": "YulIf",
															"src": "5526:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "5655:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5670:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5684:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5674:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5699:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5734:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5745:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5730:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5730:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5754:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5709:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5709:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5699:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5782:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5797:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5811:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5801:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5827:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5862:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5873:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5858:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5858:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5882:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5837:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5837:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5827:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5910:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5925:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5939:2:17",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5929:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5955:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5990:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6001:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5986:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5986:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6010:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5965:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5965:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5955:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5470:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5481:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5493:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5501:6:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5509:6:17",
														"type": ""
													}
												],
												"src": "5416:619:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6073:28:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6083:12:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6090:5:17"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "6083:3:17"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6059:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6069:3:17",
														"type": ""
													}
												],
												"src": "6041:60:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6167:82:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6177:66:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6235:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "6217:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6217:24:17"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "6208:8:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6208:34:17"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "6190:17:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6190:53:17"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "6177:9:17"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6147:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "6157:9:17",
														"type": ""
													}
												],
												"src": "6107:142:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6315:66:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6325:50:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6369:5:17"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "6338:30:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6338:37:17"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "6325:9:17"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6295:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "6305:9:17",
														"type": ""
													}
												],
												"src": "6255:126:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6462:66:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6472:50:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6516:5:17"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "6485:30:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6485:37:17"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "6472:9:17"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IToken_$1862_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6442:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "6452:9:17",
														"type": ""
													}
												],
												"src": "6387:141:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6614:81:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6631:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6682:5:17"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IToken_$1862_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6636:45:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6636:52:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6624:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6624:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6624:65:17"
														}
													]
												},
												"name": "abi_encode_t_contract$_IToken_$1862_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6602:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6609:3:17",
														"type": ""
													}
												],
												"src": "6534:161:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6814:139:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6824:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6836:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6847:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6832:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6832:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6824:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6919:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6932:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6943:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6928:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6928:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IToken_$1862_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6860:58:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6860:86:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6860:86:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IToken_$1862__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6786:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6798:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6809:4:17",
														"type": ""
													}
												],
												"src": "6701:252:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7075:647:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7122:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "7124:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7124:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7124:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7096:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7105:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7092:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7092:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7117:3:17",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7088:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7088:33:17"
															},
															"nodeType": "YulIf",
															"src": "7085:120:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "7215:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7230:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7244:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7234:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7259:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7294:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7305:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7290:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7290:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7314:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7269:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7269:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7259:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7342:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7357:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7371:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7361:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7387:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7422:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7433:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7418:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7418:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7442:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7397:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7397:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "7387:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7470:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7485:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7499:2:17",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7489:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7515:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7550:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7561:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7546:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7546:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7570:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7525:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7525:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "7515:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7598:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7613:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7627:2:17",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7617:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7643:62:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7677:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7688:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7673:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7673:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7697:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16",
																			"nodeType": "YulIdentifier",
																			"src": "7653:19:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7653:52:17"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "7643:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7021:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7032:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7044:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7052:6:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7060:6:17",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7068:6:17",
														"type": ""
													}
												],
												"src": "6959:763:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7824:73:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7841:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7846:6:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7834:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7834:19:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7834:19:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7862:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7881:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7886:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7877:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7877:14:17"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7862:11:17"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7796:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7801:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7812:11:17",
														"type": ""
													}
												],
												"src": "7728:169:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8009:75:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8031:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8039:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8027:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8027:14:17"
																	},
																	{
																		"hexValue": "4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8043:33:17",
																		"type": "",
																		"value": "ERC-3643: Caller not authorized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8020:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8020:57:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8020:57:17"
														}
													]
												},
												"name": "store_literal_in_memory_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8001:6:17",
														"type": ""
													}
												],
												"src": "7903:181:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8236:220:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8246:74:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8312:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8317:2:17",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8253:58:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8253:67:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8246:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8418:3:17"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
																	"nodeType": "YulIdentifier",
																	"src": "8329:88:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8329:93:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8329:93:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8431:19:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8442:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8447:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8438:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8438:12:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8431:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8224:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8232:3:17",
														"type": ""
													}
												],
												"src": "8090:366:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8633:248:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8643:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8655:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8666:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8651:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8651:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8643:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8690:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8701:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8686:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8686:17:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8709:4:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8715:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8705:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8705:20:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8679:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8679:47:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8679:47:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8735:139:17",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8869:4:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8743:124:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8743:131:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8735:4:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8613:9:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8628:4:17",
														"type": ""
													}
												],
												"src": "8462:419:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8952:53:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8969:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8992:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8974:17:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8974:24:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8962:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8962:37:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8962:37:17"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8940:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8947:3:17",
														"type": ""
													}
												],
												"src": "8887:118:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9109:124:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9119:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9131:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9142:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9127:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9127:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9119:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9199:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9212:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9223:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9208:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9208:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9155:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9155:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9155:71:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9081:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9093:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9104:4:17",
														"type": ""
													}
												],
												"src": "9011:222:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9345:69:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9367:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9375:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9363:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9363:14:17"
																	},
																	{
																		"hexValue": "4552432d333634333a20546f6b656e206e6f7420626f756e64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9379:27:17",
																		"type": "",
																		"value": "ERC-3643: Token not bound"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9356:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9356:51:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9356:51:17"
														}
													]
												},
												"name": "store_literal_in_memory_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9337:6:17",
														"type": ""
													}
												],
												"src": "9239:175:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9566:220:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9576:74:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9642:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9647:2:17",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9583:58:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9583:67:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9576:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9748:3:17"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68",
																	"nodeType": "YulIdentifier",
																	"src": "9659:88:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9659:93:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9659:93:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9761:19:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9772:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9777:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9768:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9768:12:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9761:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9554:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9562:3:17",
														"type": ""
													}
												],
												"src": "9420:366:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9963:248:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9973:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9985:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9996:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9981:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9981:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9973:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10020:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10031:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10016:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10016:17:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10039:4:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10045:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10035:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10035:20:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10009:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10009:47:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10009:47:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10065:139:17",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10199:4:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10073:124:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10073:131:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10065:4:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9943:9:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9958:4:17",
														"type": ""
													}
												],
												"src": "9792:419:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10323:76:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10345:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10353:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10341:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10341:14:17"
																	},
																	{
																		"hexValue": "20636f756e74727920636f6d706c696e616e63652069732072656a6563746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10357:34:17",
																		"type": "",
																		"value": " country complinance is rejected"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10334:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10334:58:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10334:58:17"
														}
													]
												},
												"name": "store_literal_in_memory_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10315:6:17",
														"type": ""
													}
												],
												"src": "10217:182:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10551:220:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10561:74:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10627:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10632:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10568:58:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10568:67:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10561:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10733:3:17"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd",
																	"nodeType": "YulIdentifier",
																	"src": "10644:88:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10644:93:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10644:93:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10746:19:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10757:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10762:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10753:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10753:12:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10746:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10539:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10547:3:17",
														"type": ""
													}
												],
												"src": "10405:366:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10948:248:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10958:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10970:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10981:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10966:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10966:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10958:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11005:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11016:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11001:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11001:17:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11024:4:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11030:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11020:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11020:20:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10994:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10994:47:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10994:47:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11050:139:17",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11184:4:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11058:124:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11058:131:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11050:4:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10928:9:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10943:4:17",
														"type": ""
													}
												],
												"src": "10777:419:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11328:206:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11338:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11350:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11361:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11346:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11346:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11338:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11418:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11431:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11442:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11427:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11427:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11374:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11374:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11374:71:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11499:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11512:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11523:2:17",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11508:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11508:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11455:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11455:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11455:72:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11292:9:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11304:6:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11312:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11323:4:17",
														"type": ""
													}
												],
												"src": "11202:332:17"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_uint16(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IToken_$1862_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IToken_$1862_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IToken_$1862_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IToken_$1862__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IToken_$1862_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint16(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC-3643: Caller not authorized\")\n\n    }\n\n    function abi_encode_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC-3643: Token not bound\")\n\n    }\n\n    function abi_encode_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd(memPtr) {\n\n        mstore(add(memPtr, 0), \" country complinance is rejected\")\n\n    }\n\n    function abi_encode_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n",
									"id": 17,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061012a575f3560e01c80638301057b116100ab578063993e8b951161006f578063993e8b951461031457806399f644f614610344578063a217fddf14610374578063d547741f14610392578063e5316e78146103ae5761012a565b80638301057b146102705780638baf29b41461028e5780638d2ea772146102aa57806391d14854146102c657806393e62f07146102f65761012a565b806340db3b50116100f257806340db3b50146101e25780634f44425e146101fe5780635f8dead31461021a57806375b238fc14610236578063817544c3146102545761012a565b806301ffc9a71461012e578063248a9ca31461015e5780632f2ff15d1461018e57806336568abe146101aa5780633ff5aa02146101c6575b5f80fd5b61014860048036038101906101439190610db9565b6103de565b6040516101559190610dfe565b60405180910390f35b61017860048036038101906101739190610e4a565b610457565b6040516101859190610e84565b60405180910390f35b6101a860048036038101906101a39190610ef7565b610473565b005b6101c460048036038101906101bf9190610ef7565b610495565b005b6101e060048036038101906101db9190610f35565b610510565b005b6101fc60048036038101906101f79190610f35565b610653565b005b61021860048036038101906102139190610f97565b6107ec565b005b610234600480360381019061022f9190610ff5565b61085b565b005b61023e61085f565b60405161024b9190610e84565b60405180910390f35b61026e60048036038101906102699190610f97565b610885565b005b6102786108f3565b6040516102859190610e84565b60405180910390f35b6102a860048036038101906102a39190611033565b610919565b005b6102c460048036038101906102bf9190610ff5565b61091e565b005b6102e060048036038101906102db9190610ef7565b610922565b6040516102ed9190610dfe565b60405180910390f35b6102fe610985565b60405161030b91906110de565b60405180910390f35b61032e60048036038101906103299190610f35565b6109aa565b60405161033b9190610dfe565b60405180910390f35b61035e60048036038101906103599190610f97565b610a02565b60405161036b9190610dfe565b60405180910390f35b61037c610a1f565b6040516103899190610e84565b60405180910390f35b6103ac60048036038101906103a79190610ef7565b610a25565b005b6103c860048036038101906103c391906110f7565b610a47565b6040516103d59190610dfe565b60405180910390f35b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610450575061044f82610ab9565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61047c82610457565b61048581610b22565b61048f8383610b36565b50505050565b61049d610c1f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610501576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61050b8282610c26565b505050565b6105437fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b61053e610c1f565b610922565b8061059a57505f73ffffffffffffffffffffffffffffffffffffffff1660025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d0906111b5565b60405180910390fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b8160405161064891906111e2565b60405180910390a150565b6106867fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b610681610c1f565b610922565b806106c057506106bf7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae45f1b6106ba610c1f565b610922565b5b6106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906111b5565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611245565b60405180910390fd5b60025f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a816040516107e191906111e2565b60405180910390a150565b61081f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b61081a610c1f565b610922565b610827575f80fd5b600160035f8361ffff1661ffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b81565b6108b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755f1b6108b3610c1f565b610922565b6108c0575f80fd5b5f60035f8361ffff1661ffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae45f1b81565b505050565b5050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6003602052805f5260405f205f915054906101000a900460ff1681565b5f801b81565b610a2e82610457565b610a3781610b22565b610a418383610c26565b50505050565b5f60035f8361ffff1661ffff1681526020019081526020015f205f9054906101000a900460ff16610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa4906112ad565b60405180910390fd5b60019050949350505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b3381610b2e610c1f565b610d0f565b50565b5f610b418383610922565b610c155760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610bb2610c1f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610c19565b5f90505b92915050565b5f33905090565b5f610c318383610922565b15610d05575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610ca2610c1f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610d09565b5f90505b92915050565b610d198282610922565b610d5c5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610d539291906112cb565b60405180910390fd5b5050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d9881610d64565b8114610da2575f80fd5b50565b5f81359050610db381610d8f565b92915050565b5f60208284031215610dce57610dcd610d60565b5b5f610ddb84828501610da5565b91505092915050565b5f8115159050919050565b610df881610de4565b82525050565b5f602082019050610e115f830184610def565b92915050565b5f819050919050565b610e2981610e17565b8114610e33575f80fd5b50565b5f81359050610e4481610e20565b92915050565b5f60208284031215610e5f57610e5e610d60565b5b5f610e6c84828501610e36565b91505092915050565b610e7e81610e17565b82525050565b5f602082019050610e975f830184610e75565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ec682610e9d565b9050919050565b610ed681610ebc565b8114610ee0575f80fd5b50565b5f81359050610ef181610ecd565b92915050565b5f8060408385031215610f0d57610f0c610d60565b5b5f610f1a85828601610e36565b9250506020610f2b85828601610ee3565b9150509250929050565b5f60208284031215610f4a57610f49610d60565b5b5f610f5784828501610ee3565b91505092915050565b5f61ffff82169050919050565b610f7681610f60565b8114610f80575f80fd5b50565b5f81359050610f9181610f6d565b92915050565b5f60208284031215610fac57610fab610d60565b5b5f610fb984828501610f83565b91505092915050565b5f819050919050565b610fd481610fc2565b8114610fde575f80fd5b50565b5f81359050610fef81610fcb565b92915050565b5f806040838503121561100b5761100a610d60565b5b5f61101885828601610ee3565b925050602061102985828601610fe1565b9150509250929050565b5f805f6060848603121561104a57611049610d60565b5b5f61105786828701610ee3565b935050602061106886828701610ee3565b925050604061107986828701610fe1565b9150509250925092565b5f819050919050565b5f6110a66110a161109c84610e9d565b611083565b610e9d565b9050919050565b5f6110b78261108c565b9050919050565b5f6110c8826110ad565b9050919050565b6110d8816110be565b82525050565b5f6020820190506110f15f8301846110cf565b92915050565b5f805f806080858703121561110f5761110e610d60565b5b5f61111c87828801610ee3565b945050602061112d87828801610ee3565b935050604061113e87828801610fe1565b925050606061114f87828801610f83565b91505092959194509250565b5f82825260208201905092915050565b7f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564005f82015250565b5f61119f601f8361115b565b91506111aa8261116b565b602082019050919050565b5f6020820190508181035f8301526111cc81611193565b9050919050565b6111dc81610ebc565b82525050565b5f6020820190506111f55f8301846111d3565b92915050565b7f4552432d333634333a20546f6b656e206e6f7420626f756e64000000000000005f82015250565b5f61122f60198361115b565b915061123a826111fb565b602082019050919050565b5f6020820190508181035f83015261125c81611223565b9050919050565b7f20636f756e74727920636f6d706c696e616e63652069732072656a65637465645f82015250565b5f61129760208361115b565b91506112a282611263565b602082019050919050565b5f6020820190508181035f8301526112c48161128b565b9050919050565b5f6040820190506112de5f8301856111d3565b6112eb6020830184610e75565b939250505056fea2646970667358221220d25f4d41b9e32c6e076c46ed7a308ff9048d4c35fb2e84f26f45520fcc1ca47864736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8301057B GT PUSH2 0xAB JUMPI DUP1 PUSH4 0x993E8B95 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x993E8B95 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x99F644F6 EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xE5316E78 EQ PUSH2 0x3AE JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x8301057B EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x8BAF29B4 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x8D2EA772 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x93E62F07 EQ PUSH2 0x2F6 JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x40DB3B50 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x40DB3B50 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x4F44425E EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x5F8DEAD3 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x817544C3 EQ PUSH2 0x254 JUMPI PUSH2 0x12A JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x3FF5AA02 EQ PUSH2 0x1C6 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x495 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x653 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST PUSH2 0x85B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23E PUSH2 0x85F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x269 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x278 PUSH2 0x8F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x285 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DB SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x32E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33B SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36B SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37C PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x389 SWAP2 SWAP1 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0xA25 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C3 SWAP2 SWAP1 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D5 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x450 JUMPI POP PUSH2 0x44F DUP3 PUSH2 0xAB9 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x47C DUP3 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x485 DUP2 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x48F DUP4 DUP4 PUSH2 0xB36 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x49D PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x501 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x50B DUP3 DUP3 PUSH2 0xC26 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x543 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x53E PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST DUP1 PUSH2 0x59A JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x5D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D0 SWAP1 PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x2DE35142B19ED5A07796CF30791959C592018F70B1D2D7C460EEF8FFE713692B DUP2 PUSH1 0x40 MLOAD PUSH2 0x648 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x686 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x681 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST DUP1 PUSH2 0x6C0 JUMPI POP PUSH2 0x6BF PUSH32 0xA7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4 PUSH0 SHL PUSH2 0x6BA PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST JUMPDEST PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F6 SWAP1 PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP1 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH32 0x28A4CA7134A3B3F9AFF286E79AD3DAADB4A06D1B43D037A3A98BDC074EDD9B7A DUP2 PUSH1 0x40 MLOAD PUSH2 0x7E1 SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x81F PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x81A PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x827 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL DUP2 JUMP JUMPDEST PUSH2 0x8B8 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH0 SHL PUSH2 0x8B3 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x8C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH32 0xA7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4 PUSH0 SHL DUP2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0xA2E DUP3 PUSH2 0x457 JUMP JUMPDEST PUSH2 0xA37 DUP2 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xC26 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 PUSH0 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xAAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAA4 SWAP1 PUSH2 0x12AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB33 DUP2 PUSH2 0xB2E PUSH2 0xC1F JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0xB41 DUP4 DUP4 PUSH2 0x922 JUMP JUMPDEST PUSH2 0xC15 JUMPI PUSH1 0x1 PUSH0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xBB2 PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xC19 JUMP JUMPDEST PUSH0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xC31 DUP4 DUP4 PUSH2 0x922 JUMP JUMPDEST ISZERO PUSH2 0xD05 JUMPI PUSH0 DUP1 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xCA2 PUSH2 0xC1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xD09 JUMP JUMPDEST PUSH0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD19 DUP3 DUP3 PUSH2 0x922 JUMP JUMPDEST PUSH2 0xD5C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD53 SWAP3 SWAP2 SWAP1 PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD98 DUP2 PUSH2 0xD64 JUMP JUMPDEST DUP2 EQ PUSH2 0xDA2 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDB3 DUP2 PUSH2 0xD8F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCD PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xDDB DUP5 DUP3 DUP6 ADD PUSH2 0xDA5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDF8 DUP2 PUSH2 0xDE4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE11 PUSH0 DUP4 ADD DUP5 PUSH2 0xDEF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xE17 JUMP JUMPDEST DUP2 EQ PUSH2 0xE33 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE44 DUP2 PUSH2 0xE20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE5F JUMPI PUSH2 0xE5E PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xE6C DUP5 DUP3 DUP6 ADD PUSH2 0xE36 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE7E DUP2 PUSH2 0xE17 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE97 PUSH0 DUP4 ADD DUP5 PUSH2 0xE75 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEC6 DUP3 PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xED6 DUP2 PUSH2 0xEBC JUMP JUMPDEST DUP2 EQ PUSH2 0xEE0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEF1 DUP2 PUSH2 0xECD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF0D JUMPI PUSH2 0xF0C PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF1A DUP6 DUP3 DUP7 ADD PUSH2 0xE36 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF2B DUP6 DUP3 DUP7 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF4A JUMPI PUSH2 0xF49 PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF57 DUP5 DUP3 DUP6 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF76 DUP2 PUSH2 0xF60 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF91 DUP2 PUSH2 0xF6D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAC JUMPI PUSH2 0xFAB PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xFB9 DUP5 DUP3 DUP6 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFD4 DUP2 PUSH2 0xFC2 JUMP JUMPDEST DUP2 EQ PUSH2 0xFDE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFEF DUP2 PUSH2 0xFCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x100B JUMPI PUSH2 0x100A PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1018 DUP6 DUP3 DUP7 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1029 DUP6 DUP3 DUP7 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x104A JUMPI PUSH2 0x1049 PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1057 DUP7 DUP3 DUP8 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1068 DUP7 DUP3 DUP8 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1079 DUP7 DUP3 DUP8 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10A6 PUSH2 0x10A1 PUSH2 0x109C DUP5 PUSH2 0xE9D JUMP JUMPDEST PUSH2 0x1083 JUMP JUMPDEST PUSH2 0xE9D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10B7 DUP3 PUSH2 0x108C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x10C8 DUP3 PUSH2 0x10AD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10D8 DUP2 PUSH2 0x10BE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10F1 PUSH0 DUP4 ADD DUP5 PUSH2 0x10CF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x110F JUMPI PUSH2 0x110E PUSH2 0xD60 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x111C DUP8 DUP3 DUP9 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x112D DUP8 DUP3 DUP9 ADD PUSH2 0xEE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x113E DUP8 DUP3 DUP9 ADD PUSH2 0xFE1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x114F DUP8 DUP3 DUP9 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552432D333634333A2043616C6C6572206E6F7420617574686F72697A656400 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x119F PUSH1 0x1F DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x11AA DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x11CC DUP2 PUSH2 0x1193 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11DC DUP2 PUSH2 0xEBC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11F5 PUSH0 DUP4 ADD DUP5 PUSH2 0x11D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552432D333634333A20546F6B656E206E6F7420626F756E6400000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x122F PUSH1 0x19 DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x123A DUP3 PUSH2 0x11FB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x125C DUP2 PUSH2 0x1223 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20636F756E74727920636F6D706C696E616E63652069732072656A6563746564 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1297 PUSH1 0x20 DUP4 PUSH2 0x115B JUMP JUMPDEST SWAP2 POP PUSH2 0x12A2 DUP3 PUSH2 0x1263 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x12C4 DUP2 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12DE PUSH0 DUP4 ADD DUP6 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x12EB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE75 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 PUSH0 0x4D COINBASE 0xB9 0xE3 0x2C PUSH15 0x76C46ED7A308FF9048D4C35FB2E84 CALLCODE PUSH16 0x45520FCC1CA47864736F6C6343000814 STOP CALLER ",
							"sourceMap": "189:2885:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:202:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3810:120;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4226:136;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5328:245;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;971:295:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1332:366;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2741:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1902:57;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;475:111;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:165;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;622:111;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1763:76;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2023:61;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2854:136:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;415:24:10;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2493:123;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;744:48;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2187:49:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4642:138;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2150:276:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2565:202:4;2650:4;2688:32;2673:47;;;:11;:47;;;;:87;;;;2724:36;2748:11;2724:23;:36::i;:::-;2673:87;2666:94;;2565:202;;;:::o;3810:120::-;3875:7;3901:6;:12;3908:4;3901:12;;;;;;;;;;;:22;;;3894:29;;3810:120;;;:::o;4226:136::-;4300:18;4313:4;4300:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;5328:245::-;5443:12;:10;:12::i;:::-;5421:34;;:18;:34;;;5417:102;;5478:30;;;;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;971:295:10:-;1046:33;520:66;1054:10;;1066:12;:10;:12::i;:::-;1046:7;:33::i;:::-;:86;;;;1130:1;1099:33;;1107:10;;;;;;;;;;;1099:33;;;1046:86;1025:164;;;;;;;;;;;;:::i;:::-;;;;;;;;;1219:6;1199:10;;:27;;;;;;;;;;;;;;;;;;1241:18;1252:6;1241:18;;;;;;:::i;:::-;;;;;;;;971:295;:::o;1332:366::-;1409:33;520:66;1417:10;;1429:12;:10;:12::i;:::-;1409:7;:33::i;:::-;:86;;;;1462:33;667:66;1470:10;;1482:12;:10;:12::i;:::-;1462:7;:33::i;:::-;1409:86;1388:164;;;;;;;;;;;;:::i;:::-;;;;;;;;;1588:10;;;;;;;;;;;1570:29;;:6;:29;;;1562:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;1646:10;;1639:17;;;;;;;;;;;1671:20;1684:6;1671:20;;;;;;:::i;:::-;;;;;;;;1332:366;:::o;2741:161::-;2815:33;520:66;2823:10;;2835:12;:10;:12::i;:::-;2815:7;:33::i;:::-;2807:42;;;;;;2890:4;2859:16;:30;2876:12;2859:30;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;2741:161;:::o;1902:57::-;;;:::o;475:111::-;520:66;475:111;;;:::o;2907:165::-;2984:33;520:66;2992:10;;3004:12;:10;:12::i;:::-;2984:7;:33::i;:::-;2976:42;;;;;;3059:5;3028:16;:30;3045:12;3028:30;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;2907:165;:::o;622:111::-;667:66;622:111;;;:::o;1763:76::-;;;;:::o;2023:61::-;;;:::o;2854:136:4:-;2931:4;2954:6;:12;2961:4;2954:12;;;;;;;;;;;:20;;:29;2975:7;2954:29;;;;;;;;;;;;;;;;;;;;;;;;;2947:36;;2854:136;;;;:::o;415:24:10:-;;;;;;;;;;;;;:::o;2493:123::-;2554:4;2596:10;;;;;;;;;;;2578:29;;:6;:29;;;2570:38;;2493:123;;;:::o;744:48::-;;;;;;;;;;;;;;;;;;;;;;:::o;2187:49:4:-;2232:4;2187:49;;;:::o;4642:138::-;4717:18;4730:4;4717:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;:::-;;4642:138:::0;;;:::o;2150:276:10:-;2309:4;2333:16;:29;2350:11;2333:29;;;;;;;;;;;;;;;;;;;;;;;;;2325:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2415:4;2408:11;;2150:276;;;;;;:::o;762:146:8:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;3199:103:4:-;3265:30;3276:4;3282:12;:10;:12::i;:::-;3265:10;:30::i;:::-;3199:103;:::o;6179:316::-;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6347:4;6315:6;:12;6322:4;6315:12;;;;;;;;;;;:20;;:29;6336:7;6315:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;6397:12;:10;:12::i;:::-;6370:40;;6388:7;6370:40;;6382:4;6370:40;;;;;;;;;;6431:4;6424:11;;;;6272:217;6473:5;6466:12;;6179:316;;;;;:::o;656:96:7:-;709:7;735:10;728:17;;656:96;:::o;6730:317:4:-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:6;:12;6873:4;6866:12;;;;;;;;;;;:20;;:29;6887:7;6866:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;6949:12;:10;:12::i;:::-;6922:40;;6940:7;6922:40;;6934:4;6922:40;;;;;;;;;;6983:4;6976:11;;;;6824:217;7025:5;7018:12;;6730:317;;;;;:::o;3432:197::-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3598:7;3607:4;3565:47;;;;;;;;;;;;:::i;:::-;;;;;;;;3515:108;3432:197;;:::o;88:117:17:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:222::-;2426:4;2464:2;2453:9;2449:18;2441:26;;2477:71;2545:1;2534:9;2530:17;2521:6;2477:71;:::i;:::-;2333:222;;;;:::o;2561:126::-;2598:7;2638:42;2631:5;2627:54;2616:65;;2561:126;;;:::o;2693:96::-;2730:7;2759:24;2777:5;2759:24;:::i;:::-;2748:35;;2693:96;;;:::o;2795:122::-;2868:24;2886:5;2868:24;:::i;:::-;2861:5;2858:35;2848:63;;2907:1;2904;2897:12;2848:63;2795:122;:::o;2923:139::-;2969:5;3007:6;2994:20;2985:29;;3023:33;3050:5;3023:33;:::i;:::-;2923:139;;;;:::o;3068:474::-;3136:6;3144;3193:2;3181:9;3172:7;3168:23;3164:32;3161:119;;;3199:79;;:::i;:::-;3161:119;3319:1;3344:53;3389:7;3380:6;3369:9;3365:22;3344:53;:::i;:::-;3334:63;;3290:117;3446:2;3472:53;3517:7;3508:6;3497:9;3493:22;3472:53;:::i;:::-;3462:63;;3417:118;3068:474;;;;;:::o;3548:329::-;3607:6;3656:2;3644:9;3635:7;3631:23;3627:32;3624:119;;;3662:79;;:::i;:::-;3624:119;3782:1;3807:53;3852:7;3843:6;3832:9;3828:22;3807:53;:::i;:::-;3797:63;;3753:117;3548:329;;;;:::o;3883:89::-;3919:7;3959:6;3952:5;3948:18;3937:29;;3883:89;;;:::o;3978:120::-;4050:23;4067:5;4050:23;:::i;:::-;4043:5;4040:34;4030:62;;4088:1;4085;4078:12;4030:62;3978:120;:::o;4104:137::-;4149:5;4187:6;4174:20;4165:29;;4203:32;4229:5;4203:32;:::i;:::-;4104:137;;;;:::o;4247:327::-;4305:6;4354:2;4342:9;4333:7;4329:23;4325:32;4322:119;;;4360:79;;:::i;:::-;4322:119;4480:1;4505:52;4549:7;4540:6;4529:9;4525:22;4505:52;:::i;:::-;4495:62;;4451:116;4247:327;;;;:::o;4580:77::-;4617:7;4646:5;4635:16;;4580:77;;;:::o;4663:122::-;4736:24;4754:5;4736:24;:::i;:::-;4729:5;4726:35;4716:63;;4775:1;4772;4765:12;4716:63;4663:122;:::o;4791:139::-;4837:5;4875:6;4862:20;4853:29;;4891:33;4918:5;4891:33;:::i;:::-;4791:139;;;;:::o;4936:474::-;5004:6;5012;5061:2;5049:9;5040:7;5036:23;5032:32;5029:119;;;5067:79;;:::i;:::-;5029:119;5187:1;5212:53;5257:7;5248:6;5237:9;5233:22;5212:53;:::i;:::-;5202:63;;5158:117;5314:2;5340:53;5385:7;5376:6;5365:9;5361:22;5340:53;:::i;:::-;5330:63;;5285:118;4936:474;;;;;:::o;5416:619::-;5493:6;5501;5509;5558:2;5546:9;5537:7;5533:23;5529:32;5526:119;;;5564:79;;:::i;:::-;5526:119;5684:1;5709:53;5754:7;5745:6;5734:9;5730:22;5709:53;:::i;:::-;5699:63;;5655:117;5811:2;5837:53;5882:7;5873:6;5862:9;5858:22;5837:53;:::i;:::-;5827:63;;5782:118;5939:2;5965:53;6010:7;6001:6;5990:9;5986:22;5965:53;:::i;:::-;5955:63;;5910:118;5416:619;;;;;:::o;6041:60::-;6069:3;6090:5;6083:12;;6041:60;;;:::o;6107:142::-;6157:9;6190:53;6208:34;6217:24;6235:5;6217:24;:::i;:::-;6208:34;:::i;:::-;6190:53;:::i;:::-;6177:66;;6107:142;;;:::o;6255:126::-;6305:9;6338:37;6369:5;6338:37;:::i;:::-;6325:50;;6255:126;;;:::o;6387:141::-;6452:9;6485:37;6516:5;6485:37;:::i;:::-;6472:50;;6387:141;;;:::o;6534:161::-;6636:52;6682:5;6636:52;:::i;:::-;6631:3;6624:65;6534:161;;:::o;6701:252::-;6809:4;6847:2;6836:9;6832:18;6824:26;;6860:86;6943:1;6932:9;6928:17;6919:6;6860:86;:::i;:::-;6701:252;;;;:::o;6959:763::-;7044:6;7052;7060;7068;7117:3;7105:9;7096:7;7092:23;7088:33;7085:120;;;7124:79;;:::i;:::-;7085:120;7244:1;7269:53;7314:7;7305:6;7294:9;7290:22;7269:53;:::i;:::-;7259:63;;7215:117;7371:2;7397:53;7442:7;7433:6;7422:9;7418:22;7397:53;:::i;:::-;7387:63;;7342:118;7499:2;7525:53;7570:7;7561:6;7550:9;7546:22;7525:53;:::i;:::-;7515:63;;7470:118;7627:2;7653:52;7697:7;7688:6;7677:9;7673:22;7653:52;:::i;:::-;7643:62;;7598:117;6959:763;;;;;;;:::o;7728:169::-;7812:11;7846:6;7841:3;7834:19;7886:4;7881:3;7877:14;7862:29;;7728:169;;;;:::o;7903:181::-;8043:33;8039:1;8031:6;8027:14;8020:57;7903:181;:::o;8090:366::-;8232:3;8253:67;8317:2;8312:3;8253:67;:::i;:::-;8246:74;;8329:93;8418:3;8329:93;:::i;:::-;8447:2;8442:3;8438:12;8431:19;;8090:366;;;:::o;8462:419::-;8628:4;8666:2;8655:9;8651:18;8643:26;;8715:9;8709:4;8705:20;8701:1;8690:9;8686:17;8679:47;8743:131;8869:4;8743:131;:::i;:::-;8735:139;;8462:419;;;:::o;8887:118::-;8974:24;8992:5;8974:24;:::i;:::-;8969:3;8962:37;8887:118;;:::o;9011:222::-;9104:4;9142:2;9131:9;9127:18;9119:26;;9155:71;9223:1;9212:9;9208:17;9199:6;9155:71;:::i;:::-;9011:222;;;;:::o;9239:175::-;9379:27;9375:1;9367:6;9363:14;9356:51;9239:175;:::o;9420:366::-;9562:3;9583:67;9647:2;9642:3;9583:67;:::i;:::-;9576:74;;9659:93;9748:3;9659:93;:::i;:::-;9777:2;9772:3;9768:12;9761:19;;9420:366;;;:::o;9792:419::-;9958:4;9996:2;9985:9;9981:18;9973:26;;10045:9;10039:4;10035:20;10031:1;10020:9;10016:17;10009:47;10073:131;10199:4;10073:131;:::i;:::-;10065:139;;9792:419;;;:::o;10217:182::-;10357:34;10353:1;10345:6;10341:14;10334:58;10217:182;:::o;10405:366::-;10547:3;10568:67;10632:2;10627:3;10568:67;:::i;:::-;10561:74;;10644:93;10733:3;10644:93;:::i;:::-;10762:2;10757:3;10753:12;10746:19;;10405:366;;;:::o;10777:419::-;10943:4;10981:2;10970:9;10966:18;10958:26;;11030:9;11024:4;11020:20;11016:1;11005:9;11001:17;10994:47;11058:131;11184:4;11058:131;:::i;:::-;11050:139;;10777:419;;;:::o;11202:332::-;11323:4;11361:2;11350:9;11346:18;11338:26;;11374:71;11442:1;11431:9;11427:17;11418:6;11374:71;:::i;:::-;11455:72;11523:2;11512:9;11508:18;11499:6;11455:72;:::i;:::-;11202:332;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "980800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"ADMIN_ROLE()": "419",
								"DEFAULT_ADMIN_ROLE()": "396",
								"TOKEN_ROLE()": "353",
								"addAllowedCountry(uint16)": "27212",
								"bindToken(address)": "infinite",
								"canTransfer(address,address,uint256,uint16)": "infinite",
								"created(address,uint256)": "687",
								"destroyed(address,uint256)": "687",
								"getRoleAdmin(bytes32)": "infinite",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "3211",
								"isCountryAllowed(uint16)": "2835",
								"isTokenBound(address)": "2822",
								"removeAllowedCountry(uint16)": "27277",
								"renounceRole(bytes32,address)": "infinite",
								"revokeRole(bytes32,address)": "infinite",
								"supportsInterface(bytes4)": "741",
								"tokenBound()": "infinite",
								"transferred(address,address,uint256)": "infinite",
								"unbindToken(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 907,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 907,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 907,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 800,
									"end": 907,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 835,
									"end": 839,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 824,
									"end": 854,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 841,
									"end": 853,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 841,
									"end": 851,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 841,
									"end": 851,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 841,
									"end": 851,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 841,
									"end": 853,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 841,
									"end": 853,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 841,
									"end": 853,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 841,
									"end": 853,
									"name": "tag",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 841,
									"end": 853,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 824,
									"end": 834,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 824,
									"end": 834,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 824,
									"end": 834,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 824,
									"end": 854,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"name": "tag",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 824,
									"end": 854,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 824,
									"end": 854,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 864,
									"end": 900,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 520,
									"end": 586,
									"name": "PUSH",
									"source": 10,
									"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
								},
								{
									"begin": 875,
									"end": 885,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 875,
									"end": 885,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 887,
									"end": 899,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 887,
									"end": 897,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 887,
									"end": 897,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 887,
									"end": 897,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 887,
									"end": 899,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 887,
									"end": 899,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 887,
									"end": 899,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 887,
									"end": 899,
									"name": "tag",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 887,
									"end": 899,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 864,
									"end": 874,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 864,
									"end": 874,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 864,
									"end": 874,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 864,
									"end": 900,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 864,
									"end": 900,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 864,
									"end": 900,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 864,
									"end": 900,
									"name": "tag",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 864,
									"end": 900,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 864,
									"end": 900,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 656,
									"end": 752,
									"name": "tag",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 656,
									"end": 752,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 709,
									"end": 716,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": 728,
									"end": 745,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 728,
									"end": 745,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 656,
									"end": 752,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 656,
									"end": 752,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6256,
									"end": 6260,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6277,
									"end": 6299,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "13"
								},
								{
									"begin": 6285,
									"end": 6289,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 6291,
									"end": 6298,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 6277,
									"end": 6284,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 6277,
									"end": 6284,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6277,
									"end": 6284,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 6277,
									"end": 6299,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6277,
									"end": 6299,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 6277,
									"end": 6299,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6277,
									"end": 6299,
									"name": "tag",
									"source": 4,
									"value": "13"
								},
								{
									"begin": 6277,
									"end": 6299,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "15"
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 6347,
									"end": 6351,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 6315,
									"end": 6321,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6322,
									"end": 6326,
									"name": "DUP6",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6315,
									"end": 6327,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6335,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6315,
									"end": 6335,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6336,
									"end": 6343,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6344,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "EXP",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "NOT",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 6315,
									"end": 6351,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6397,
									"end": 6409,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "16"
								},
								{
									"begin": 6397,
									"end": 6407,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 6397,
									"end": 6407,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6397,
									"end": 6407,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 6397,
									"end": 6409,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6397,
									"end": 6409,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 6397,
									"end": 6409,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6397,
									"end": 6409,
									"name": "tag",
									"source": 4,
									"value": "16"
								},
								{
									"begin": 6397,
									"end": 6409,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6388,
									"end": 6395,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6382,
									"end": 6386,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "PUSH",
									"source": 4,
									"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "LOG4",
									"source": 4
								},
								{
									"begin": 6431,
									"end": 6435,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "tag",
									"source": 4,
									"value": "15"
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6473,
									"end": 6478,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6466,
									"end": 6478,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6466,
									"end": 6478,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6179,
									"end": 6495,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "tag",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 2931,
									"end": 2935,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2954,
									"end": 2960,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2961,
									"end": 2965,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2954,
									"end": 2966,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2974,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2954,
									"end": 2974,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2975,
									"end": 2982,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "EXP",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 2954,
									"end": 2983,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2947,
									"end": 2983,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2947,
									"end": 2983,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2854,
									"end": 2990,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "tag",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 189,
									"end": 3074,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d25f4d41b9e32c6e076c46ed7a308ff9048d4c35fb2e84f26f45520fcc1ca47864736f6c63430008140033",
									".code": [
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "8301057B"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "993E8B95"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "993E8B95"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "99F644F6"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "A217FDDF"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "D547741F"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "E5316E78"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "8301057B"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "8BAF29B4"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "8D2EA772"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "91D14854"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "93E62F07"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "40DB3B50"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "40DB3B50"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "4F44425E"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "5F8DEAD3"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "75B238FC"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "817544C3"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "1FFC9A7"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "248A9CA3"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "2F2FF15D"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "36568ABE"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "3FF5AA02"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 189,
											"end": 3074,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 2565,
											"end": 2767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2565,
											"end": 2767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2565,
											"end": 2767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 3810,
											"end": 3930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3810,
											"end": 3930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 3810,
											"end": 3930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "tag",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4226,
											"end": 4362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 4226,
											"end": 4362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5328,
											"end": 5573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 5328,
											"end": 5573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 971,
											"end": 1266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 971,
											"end": 1266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 1332,
											"end": 1698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 1332,
											"end": 1698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2741,
											"end": 2902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 2741,
											"end": 2902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 1902,
											"end": 1959,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 1902,
											"end": 1959,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 475,
											"end": 586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 475,
											"end": 586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2907,
											"end": 3072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 2907,
											"end": 3072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 622,
											"end": 733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 622,
											"end": 733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 1763,
											"end": 1839,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 1763,
											"end": 1839,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 2023,
											"end": 2084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 2023,
											"end": 2084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2854,
											"end": 2990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "tag",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 2854,
											"end": 2990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "tag",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2854,
											"end": 2990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 415,
											"end": 439,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 415,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 415,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 2493,
											"end": 2616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 2493,
											"end": 2616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 2493,
											"end": 2616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 744,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 744,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 744,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 2187,
											"end": 2236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "tag",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2187,
											"end": 2236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4642,
											"end": 4780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 4642,
											"end": 4780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 2150,
											"end": 2426,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 2150,
											"end": 2426,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 2150,
											"end": 2426,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2650,
											"end": 2654,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2720,
											"name": "PUSH",
											"source": 4,
											"value": "7965DB0B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2684,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2724,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2748,
											"end": 2759,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2724,
											"end": 2747,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 2724,
											"end": 2760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2724,
											"end": 2760,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2724,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "tag",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2666,
											"end": 2760,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2666,
											"end": 2760,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2565,
											"end": 2767,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "tag",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3875,
											"end": 3882,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3901,
											"end": 3907,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3908,
											"end": 3912,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3901,
											"end": 3913,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3894,
											"end": 3923,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3894,
											"end": 3923,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3810,
											"end": 3930,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 4313,
											"end": 4317,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4300,
											"end": 4312,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 4300,
											"end": 4318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "tag",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 2464,
											"end": 2480,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "tag",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4330,
											"end": 4355,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 4341,
											"end": 4345,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4347,
											"end": 4354,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4330,
											"end": 4340,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 4330,
											"end": 4355,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4330,
											"end": 4355,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 4330,
											"end": 4355,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4330,
											"end": 4355,
											"modifierDepth": 1,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4226,
											"end": 4362,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5443,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 5443,
											"end": 5453,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 5443,
											"end": 5455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5443,
											"end": 5455,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 5443,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5421,
											"end": 5439,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 4,
											"value": "6697B23200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "tag",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 5541,
											"end": 5545,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5547,
											"end": 5565,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5540,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 5529,
											"end": 5566,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "tag",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5328,
											"end": 5573,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 520,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
										},
										{
											"begin": 1054,
											"end": 1064,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1054,
											"end": 1064,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1066,
											"end": 1078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 1066,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 1066,
											"end": 1078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1066,
											"end": 1078,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 1066,
											"end": 1078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 1046,
											"end": 1079,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1079,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 1046,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1130,
											"end": 1131,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1132,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1099,
											"end": 1132,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1107,
											"end": 1117,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1099,
											"end": 1132,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1099,
											"end": 1132,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1099,
											"end": 1132,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "tag",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 1046,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH",
											"source": 10,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 1025,
											"end": 1189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "tag",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 1025,
											"end": 1189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1219,
											"end": 1225,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1209,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1199,
											"end": 1209,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1226,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "PUSH",
											"source": 10,
											"value": "2DE35142B19ED5A07796CF30791959C592018F70B1D2D7C460EEF8FFE713692B"
										},
										{
											"begin": 1252,
											"end": 1258,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 1241,
											"end": 1259,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1259,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 971,
											"end": 1266,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1442,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 520,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
										},
										{
											"begin": 1417,
											"end": 1427,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1417,
											"end": 1427,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 1429,
											"end": 1439,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 1429,
											"end": 1441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "tag",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1416,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 1409,
											"end": 1442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1442,
											"name": "tag",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 1409,
											"end": 1442,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1462,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 667,
											"end": 733,
											"name": "PUSH",
											"source": 10,
											"value": "A7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4"
										},
										{
											"begin": 1470,
											"end": 1480,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1470,
											"end": 1480,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 1482,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 1482,
											"end": 1494,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1482,
											"end": 1494,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 1482,
											"end": 1494,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1462,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 1462,
											"end": 1495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1462,
											"end": 1495,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 1462,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 1409,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH",
											"source": 10,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 1388,
											"end": 1552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "tag",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "tag",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 1388,
											"end": 1552,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1588,
											"end": 1598,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1599,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1570,
											"end": 1599,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1576,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1599,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1570,
											"end": 1599,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1599,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH",
											"source": 10,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 1562,
											"end": 1629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 1562,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1646,
											"end": 1656,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1646,
											"end": 1656,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1639,
											"end": 1656,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "PUSH",
											"source": 10,
											"value": "28A4CA7134A3B3F9AFF286E79AD3DAADB4A06D1B43D037A3A98BDC074EDD9B7A"
										},
										{
											"begin": 1684,
											"end": 1690,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 1671,
											"end": 1691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1671,
											"end": 1691,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1332,
											"end": 1698,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "tag",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2815,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 520,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
										},
										{
											"begin": 2823,
											"end": 2833,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2823,
											"end": 2833,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2835,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 2835,
											"end": 2845,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 2835,
											"end": 2847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2835,
											"end": 2847,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 2835,
											"end": 2847,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2815,
											"end": 2822,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 2815,
											"end": 2848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2815,
											"end": 2848,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 2815,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2890,
											"end": 2894,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2859,
											"end": 2875,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2876,
											"end": 2888,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2889,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2859,
											"end": 2894,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2741,
											"end": 2902,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 1959,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 520,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 475,
											"end": 586,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 475,
											"end": 586,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2984,
											"end": 3017,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 520,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "A49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775"
										},
										{
											"begin": 2992,
											"end": 3002,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2992,
											"end": 3002,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 3004,
											"end": 3014,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 3004,
											"end": 3016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2984,
											"end": 2991,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 2984,
											"end": 3017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2984,
											"end": 3017,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 2984,
											"end": 3017,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 2976,
											"end": 3018,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3059,
											"end": 3064,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3028,
											"end": 3044,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3045,
											"end": 3057,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3058,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3064,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2907,
											"end": 3072,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 667,
											"end": 733,
											"name": "PUSH",
											"source": 10,
											"value": "A7197C38D9C4C7450C7F2CD20D0A17CBE7C344190D6C82A6B49A146E62439AE4"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 733,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 622,
											"end": 733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1763,
											"end": 1839,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2023,
											"end": 2084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2931,
											"end": 2935,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2961,
											"end": 2965,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2954,
											"end": 2966,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2974,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2954,
											"end": 2974,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2975,
											"end": 2982,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2947,
											"end": 2983,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2947,
											"end": 2983,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2854,
											"end": 2990,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 415,
											"end": 439,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 415,
											"end": 439,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 415,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2596,
											"end": 2606,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2578,
											"end": 2607,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2578,
											"end": 2607,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2578,
											"end": 2584,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2578,
											"end": 2607,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2578,
											"end": 2607,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2578,
											"end": 2607,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 2570,
											"end": 2608,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2570,
											"end": 2608,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2493,
											"end": 2616,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 744,
											"end": 792,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 744,
											"end": 792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "tag",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 4730,
											"end": 4734,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4717,
											"end": 4729,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 4717,
											"end": 4735,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "tag",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 2464,
											"end": 2480,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "tag",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 2464,
											"end": 2480,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4747,
											"end": 4773,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 4759,
											"end": 4763,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4765,
											"end": 4772,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4747,
											"end": 4758,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 4747,
											"end": 4773,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4747,
											"end": 4773,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 4747,
											"end": 4773,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4747,
											"end": 4773,
											"modifierDepth": 1,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4642,
											"end": 4780,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2309,
											"end": 2313,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2333,
											"end": 2349,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2350,
											"end": 2361,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH",
											"source": 10,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 2325,
											"end": 2398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 2325,
											"end": 2398,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2415,
											"end": 2419,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2408,
											"end": 2419,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2408,
											"end": 2419,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2150,
											"end": 2426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 762,
											"end": 908,
											"name": "tag",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 762,
											"end": 908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 838,
											"end": 842,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 876,
											"end": 901,
											"name": "PUSH",
											"source": 8,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 861,
											"end": 901,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 861,
											"end": 901,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 861,
											"end": 901,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 861,
											"end": 872,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 861,
											"end": 901,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 861,
											"end": 901,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 861,
											"end": 901,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 861,
											"end": 901,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 854,
											"end": 901,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 854,
											"end": 901,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 908,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 762,
											"end": 908,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 762,
											"end": 908,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 908,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3265,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 3276,
											"end": 3280,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3282,
											"end": 3294,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 3282,
											"end": 3292,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 3282,
											"end": 3294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3282,
											"end": 3294,
											"name": "tag",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 3282,
											"end": 3294,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3265,
											"end": 3275,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 3265,
											"end": 3295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3265,
											"end": 3295,
											"name": "tag",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 3265,
											"end": 3295,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3199,
											"end": 3302,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "tag",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6256,
											"end": 6260,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6277,
											"end": 6299,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "170"
										},
										{
											"begin": 6285,
											"end": 6289,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6291,
											"end": 6298,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6277,
											"end": 6284,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 6277,
											"end": 6299,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6277,
											"end": 6299,
											"name": "tag",
											"source": 4,
											"value": "170"
										},
										{
											"begin": 6277,
											"end": 6299,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6347,
											"end": 6351,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6315,
											"end": 6321,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6322,
											"end": 6326,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6327,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6335,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6335,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6336,
											"end": 6343,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6344,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 6315,
											"end": 6351,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6397,
											"end": 6409,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 6397,
											"end": 6407,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6397,
											"end": 6409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6397,
											"end": 6409,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 6397,
											"end": 6409,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6388,
											"end": 6395,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6382,
											"end": 6386,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 4,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "LOG4",
											"source": 4
										},
										{
											"begin": 6431,
											"end": 6435,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6424,
											"end": 6435,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6424,
											"end": 6435,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6424,
											"end": 6435,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 6424,
											"end": 6435,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "tag",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6473,
											"end": 6478,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6466,
											"end": 6478,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6466,
											"end": 6478,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "tag",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6179,
											"end": 6495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6808,
											"end": 6812,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6828,
											"end": 6850,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 6836,
											"end": 6840,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6842,
											"end": 6849,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6828,
											"end": 6835,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 6828,
											"end": 6850,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6828,
											"end": 6850,
											"name": "tag",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 6828,
											"end": 6850,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6824,
											"end": 7041,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6824,
											"end": 7041,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 6824,
											"end": 7041,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6898,
											"end": 6903,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6866,
											"end": 6872,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6873,
											"end": 6877,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6866,
											"end": 6878,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6886,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6866,
											"end": 6886,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6887,
											"end": 6894,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6895,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 6866,
											"end": 6903,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6949,
											"end": 6961,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 6949,
											"end": 6959,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6949,
											"end": 6961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6949,
											"end": 6961,
											"name": "tag",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 6949,
											"end": 6961,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6940,
											"end": 6947,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6934,
											"end": 6938,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "PUSH",
											"source": 4,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6962,
											"name": "LOG4",
											"source": 4
										},
										{
											"begin": 6983,
											"end": 6987,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6976,
											"end": 6987,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6976,
											"end": 6987,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6976,
											"end": 6987,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 6976,
											"end": 6987,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6824,
											"end": 7041,
											"name": "tag",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 6824,
											"end": 7041,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7025,
											"end": 7030,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7018,
											"end": 7030,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7018,
											"end": 7030,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "tag",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 7047,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3432,
											"end": 3629,
											"name": "tag",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 3432,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3520,
											"end": 3542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 3528,
											"end": 3532,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3534,
											"end": 3541,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3520,
											"end": 3527,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 3520,
											"end": 3542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3520,
											"end": 3542,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 3520,
											"end": 3542,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3598,
											"end": 3605,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3607,
											"end": 3611,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 4,
											"value": "E2517D3F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 3565,
											"end": 3612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "tag",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "tag",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3432,
											"end": 3629,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3432,
											"end": 3629,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3432,
											"end": 3629,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "tag",
											"source": 17,
											"value": "188"
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 370,
											"end": 377,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 476,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 403,
											"end": 408,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 399,
											"end": 477,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 388,
											"end": 477,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 388,
											"end": 477,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"name": "tag",
											"source": 17,
											"value": "189"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 578,
											"end": 583,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "188"
										},
										{
											"begin": 561,
											"end": 584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "tag",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 554,
											"end": 559,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 551,
											"end": 585,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 541,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 599,
											"end": 600,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 597,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 589,
											"end": 601,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 541,
											"end": 603,
											"name": "tag",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "tag",
											"source": 17,
											"value": "190"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 660,
											"end": 665,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 704,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 685,
											"end": 705,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 676,
											"end": 705,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 676,
											"end": 705,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "229"
										},
										{
											"begin": 740,
											"end": 745,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "189"
										},
										{
											"begin": 714,
											"end": 746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "tag",
											"source": 17,
											"value": "229"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "tag",
											"source": 17,
											"value": "28"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 816,
											"end": 822,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 865,
											"end": 867,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 853,
											"end": 862,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 844,
											"end": 851,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 840,
											"end": 863,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 836,
											"end": 868,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "231"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 871,
											"end": 950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 871,
											"end": 950,
											"name": "tag",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "tag",
											"source": 17,
											"value": "231"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 991,
											"end": 992,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "233"
										},
										{
											"begin": 1060,
											"end": 1067,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1051,
											"end": 1057,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1040,
											"end": 1049,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1036,
											"end": 1058,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "190"
										},
										{
											"begin": 1016,
											"end": 1068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "tag",
											"source": 17,
											"value": "233"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 962,
											"end": 1078,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "tag",
											"source": 17,
											"value": "191"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1132,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1161,
											"end": 1174,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1154,
											"end": 1175,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "tag",
											"source": 17,
											"value": "192"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "236"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "191"
										},
										{
											"begin": 1268,
											"end": 1289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "tag",
											"source": 17,
											"value": "236"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1263,
											"end": 1266,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1256,
											"end": 1290,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "tag",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1389,
											"end": 1393,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1429,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1416,
											"end": 1425,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1412,
											"end": 1430,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "238"
										},
										{
											"begin": 1502,
											"end": 1503,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1491,
											"end": 1500,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1487,
											"end": 1504,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1478,
											"end": 1484,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "192"
										},
										{
											"begin": 1440,
											"end": 1505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "tag",
											"source": 17,
											"value": "238"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1595,
											"name": "tag",
											"source": 17,
											"value": "193"
										},
										{
											"begin": 1518,
											"end": 1595,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1555,
											"end": 1562,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1589,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1573,
											"end": 1589,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1573,
											"end": 1589,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1595,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1595,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1595,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1595,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1601,
											"end": 1723,
											"name": "tag",
											"source": 17,
											"value": "194"
										},
										{
											"begin": 1601,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "241"
										},
										{
											"begin": 1692,
											"end": 1697,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "193"
										},
										{
											"begin": 1674,
											"end": 1698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1698,
											"name": "tag",
											"source": 17,
											"value": "241"
										},
										{
											"begin": 1674,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1667,
											"end": 1672,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1664,
											"end": 1699,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 1654,
											"end": 1717,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "242"
										},
										{
											"begin": 1654,
											"end": 1717,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1713,
											"end": 1714,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1711,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1703,
											"end": 1715,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1654,
											"end": 1717,
											"name": "tag",
											"source": 17,
											"value": "242"
										},
										{
											"begin": 1654,
											"end": 1717,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1601,
											"end": 1723,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1601,
											"end": 1723,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "tag",
											"source": 17,
											"value": "195"
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1775,
											"end": 1780,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1813,
											"end": 1819,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1800,
											"end": 1820,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 1791,
											"end": 1820,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1791,
											"end": 1820,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1829,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "244"
										},
										{
											"begin": 1856,
											"end": 1861,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1829,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "194"
										},
										{
											"begin": 1829,
											"end": 1862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1829,
											"end": 1862,
											"name": "tag",
											"source": 17,
											"value": "244"
										},
										{
											"begin": 1829,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1868,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "tag",
											"source": 17,
											"value": "34"
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1933,
											"end": 1939,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1982,
											"end": 1984,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1970,
											"end": 1979,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1961,
											"end": 1968,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1957,
											"end": 1980,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1953,
											"end": 1985,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 1950,
											"end": 2069,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1950,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "246"
										},
										{
											"begin": 1950,
											"end": 2069,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1988,
											"end": 2067,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "247"
										},
										{
											"begin": 1988,
											"end": 2067,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 1988,
											"end": 2067,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1988,
											"end": 2067,
											"name": "tag",
											"source": 17,
											"value": "247"
										},
										{
											"begin": 1988,
											"end": 2067,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1950,
											"end": 2069,
											"name": "tag",
											"source": 17,
											"value": "246"
										},
										{
											"begin": 1950,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2108,
											"end": 2109,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2133,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "248"
										},
										{
											"begin": 2178,
											"end": 2185,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2169,
											"end": 2175,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2167,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2154,
											"end": 2176,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2133,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "195"
										},
										{
											"begin": 2133,
											"end": 2186,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2133,
											"end": 2186,
											"name": "tag",
											"source": 17,
											"value": "248"
										},
										{
											"begin": 2133,
											"end": 2186,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2123,
											"end": 2186,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2123,
											"end": 2186,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2079,
											"end": 2196,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1874,
											"end": 2203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2209,
											"end": 2327,
											"name": "tag",
											"source": 17,
											"value": "196"
										},
										{
											"begin": 2209,
											"end": 2327,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2296,
											"end": 2320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "250"
										},
										{
											"begin": 2314,
											"end": 2319,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2296,
											"end": 2320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "193"
										},
										{
											"begin": 2296,
											"end": 2320,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2296,
											"end": 2320,
											"name": "tag",
											"source": 17,
											"value": "250"
										},
										{
											"begin": 2296,
											"end": 2320,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2291,
											"end": 2294,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2284,
											"end": 2321,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2209,
											"end": 2327,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2209,
											"end": 2327,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2209,
											"end": 2327,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2426,
											"end": 2430,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2464,
											"end": 2466,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2453,
											"end": 2462,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2449,
											"end": 2467,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2441,
											"end": 2467,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2441,
											"end": 2467,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2477,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "252"
										},
										{
											"begin": 2545,
											"end": 2546,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2534,
											"end": 2543,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2530,
											"end": 2547,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2521,
											"end": 2527,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2477,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "196"
										},
										{
											"begin": 2477,
											"end": 2548,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2477,
											"end": 2548,
											"name": "tag",
											"source": 17,
											"value": "252"
										},
										{
											"begin": 2477,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2333,
											"end": 2555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2561,
											"end": 2687,
											"name": "tag",
											"source": 17,
											"value": "197"
										},
										{
											"begin": 2561,
											"end": 2687,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2598,
											"end": 2605,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2638,
											"end": 2680,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2631,
											"end": 2636,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2627,
											"end": 2681,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2616,
											"end": 2681,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2616,
											"end": 2681,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2561,
											"end": 2687,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2561,
											"end": 2687,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2561,
											"end": 2687,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2561,
											"end": 2687,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2693,
											"end": 2789,
											"name": "tag",
											"source": 17,
											"value": "198"
										},
										{
											"begin": 2693,
											"end": 2789,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2730,
											"end": 2737,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "255"
										},
										{
											"begin": 2777,
											"end": 2782,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "197"
										},
										{
											"begin": 2759,
											"end": 2783,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "tag",
											"source": 17,
											"value": "255"
										},
										{
											"begin": 2759,
											"end": 2783,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2748,
											"end": 2783,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2748,
											"end": 2783,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2693,
											"end": 2789,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2693,
											"end": 2789,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2693,
											"end": 2789,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2693,
											"end": 2789,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2795,
											"end": 2917,
											"name": "tag",
											"source": 17,
											"value": "199"
										},
										{
											"begin": 2795,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2868,
											"end": 2892,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "257"
										},
										{
											"begin": 2886,
											"end": 2891,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2868,
											"end": 2892,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "198"
										},
										{
											"begin": 2868,
											"end": 2892,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2868,
											"end": 2892,
											"name": "tag",
											"source": 17,
											"value": "257"
										},
										{
											"begin": 2868,
											"end": 2892,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2861,
											"end": 2866,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2858,
											"end": 2893,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 2848,
											"end": 2911,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "258"
										},
										{
											"begin": 2848,
											"end": 2911,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2907,
											"end": 2908,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2904,
											"end": 2905,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2897,
											"end": 2909,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2848,
											"end": 2911,
											"name": "tag",
											"source": 17,
											"value": "258"
										},
										{
											"begin": 2848,
											"end": 2911,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2795,
											"end": 2917,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2795,
											"end": 2917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "tag",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2969,
											"end": 2974,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3007,
											"end": 3013,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2994,
											"end": 3014,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 2985,
											"end": 3014,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2985,
											"end": 3014,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3023,
											"end": 3056,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "260"
										},
										{
											"begin": 3050,
											"end": 3055,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3023,
											"end": 3056,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "199"
										},
										{
											"begin": 3023,
											"end": 3056,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3023,
											"end": 3056,
											"name": "tag",
											"source": 17,
											"value": "260"
										},
										{
											"begin": 3023,
											"end": 3056,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2923,
											"end": 3062,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "tag",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3136,
											"end": 3142,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3150,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3193,
											"end": 3195,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3181,
											"end": 3190,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3172,
											"end": 3179,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3168,
											"end": 3191,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 3164,
											"end": 3196,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 3161,
											"end": 3280,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3161,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 3161,
											"end": 3280,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3199,
											"end": 3278,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "263"
										},
										{
											"begin": 3199,
											"end": 3278,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 3199,
											"end": 3278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3199,
											"end": 3278,
											"name": "tag",
											"source": 17,
											"value": "263"
										},
										{
											"begin": 3199,
											"end": 3278,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3161,
											"end": 3280,
											"name": "tag",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 3161,
											"end": 3280,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3319,
											"end": 3320,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3344,
											"end": 3397,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "264"
										},
										{
											"begin": 3389,
											"end": 3396,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3380,
											"end": 3386,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3369,
											"end": 3378,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 3365,
											"end": 3387,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3344,
											"end": 3397,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "195"
										},
										{
											"begin": 3344,
											"end": 3397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3344,
											"end": 3397,
											"name": "tag",
											"source": 17,
											"value": "264"
										},
										{
											"begin": 3344,
											"end": 3397,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3334,
											"end": 3397,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3334,
											"end": 3397,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3290,
											"end": 3407,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3472,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "265"
										},
										{
											"begin": 3517,
											"end": 3524,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3508,
											"end": 3514,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3497,
											"end": 3506,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 3493,
											"end": 3515,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3472,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 3472,
											"end": 3525,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3472,
											"end": 3525,
											"name": "tag",
											"source": 17,
											"value": "265"
										},
										{
											"begin": 3472,
											"end": 3525,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3417,
											"end": 3535,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3068,
											"end": 3542,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "tag",
											"source": 17,
											"value": "47"
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3607,
											"end": 3613,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3656,
											"end": 3658,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3644,
											"end": 3653,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3635,
											"end": 3642,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3631,
											"end": 3654,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 3627,
											"end": 3659,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 3624,
											"end": 3743,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3624,
											"end": 3743,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "267"
										},
										{
											"begin": 3624,
											"end": 3743,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3662,
											"end": 3741,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "268"
										},
										{
											"begin": 3662,
											"end": 3741,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 3662,
											"end": 3741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3662,
											"end": 3741,
											"name": "tag",
											"source": 17,
											"value": "268"
										},
										{
											"begin": 3662,
											"end": 3741,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3624,
											"end": 3743,
											"name": "tag",
											"source": 17,
											"value": "267"
										},
										{
											"begin": 3624,
											"end": 3743,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3782,
											"end": 3783,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3807,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "269"
										},
										{
											"begin": 3852,
											"end": 3859,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3843,
											"end": 3849,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3832,
											"end": 3841,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3828,
											"end": 3850,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3807,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 3807,
											"end": 3860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3807,
											"end": 3860,
											"name": "tag",
											"source": 17,
											"value": "269"
										},
										{
											"begin": 3807,
											"end": 3860,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3797,
											"end": 3860,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3797,
											"end": 3860,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3753,
											"end": 3870,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3548,
											"end": 3877,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3883,
											"end": 3972,
											"name": "tag",
											"source": 17,
											"value": "201"
										},
										{
											"begin": 3883,
											"end": 3972,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3919,
											"end": 3926,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3959,
											"end": 3965,
											"name": "PUSH",
											"source": 17,
											"value": "FFFF"
										},
										{
											"begin": 3952,
											"end": 3957,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3948,
											"end": 3966,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3937,
											"end": 3966,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3937,
											"end": 3966,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3883,
											"end": 3972,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3883,
											"end": 3972,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3883,
											"end": 3972,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3883,
											"end": 3972,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3978,
											"end": 4098,
											"name": "tag",
											"source": 17,
											"value": "202"
										},
										{
											"begin": 3978,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4050,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "272"
										},
										{
											"begin": 4067,
											"end": 4072,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4050,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "201"
										},
										{
											"begin": 4050,
											"end": 4073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4050,
											"end": 4073,
											"name": "tag",
											"source": 17,
											"value": "272"
										},
										{
											"begin": 4050,
											"end": 4073,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4043,
											"end": 4048,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4040,
											"end": 4074,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 4030,
											"end": 4092,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "273"
										},
										{
											"begin": 4030,
											"end": 4092,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4088,
											"end": 4089,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4085,
											"end": 4086,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4078,
											"end": 4090,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 4030,
											"end": 4092,
											"name": "tag",
											"source": 17,
											"value": "273"
										},
										{
											"begin": 4030,
											"end": 4092,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3978,
											"end": 4098,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3978,
											"end": 4098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "tag",
											"source": 17,
											"value": "203"
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4149,
											"end": 4154,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4187,
											"end": 4193,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4174,
											"end": 4194,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 4165,
											"end": 4194,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4165,
											"end": 4194,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4203,
											"end": 4235,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "275"
										},
										{
											"begin": 4229,
											"end": 4234,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4203,
											"end": 4235,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "202"
										},
										{
											"begin": 4203,
											"end": 4235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4203,
											"end": 4235,
											"name": "tag",
											"source": 17,
											"value": "275"
										},
										{
											"begin": 4203,
											"end": 4235,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4104,
											"end": 4241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "tag",
											"source": 17,
											"value": "54"
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4305,
											"end": 4311,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4354,
											"end": 4356,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 4333,
											"end": 4340,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 4329,
											"end": 4352,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 4325,
											"end": 4357,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 4322,
											"end": 4441,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 4322,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "277"
										},
										{
											"begin": 4322,
											"end": 4441,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4360,
											"end": 4439,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "278"
										},
										{
											"begin": 4360,
											"end": 4439,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 4360,
											"end": 4439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4360,
											"end": 4439,
											"name": "tag",
											"source": 17,
											"value": "278"
										},
										{
											"begin": 4360,
											"end": 4439,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4322,
											"end": 4441,
											"name": "tag",
											"source": 17,
											"value": "277"
										},
										{
											"begin": 4322,
											"end": 4441,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4480,
											"end": 4481,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4505,
											"end": 4557,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "279"
										},
										{
											"begin": 4549,
											"end": 4556,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 4540,
											"end": 4546,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 4529,
											"end": 4538,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 4525,
											"end": 4547,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4505,
											"end": 4557,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "203"
										},
										{
											"begin": 4505,
											"end": 4557,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4505,
											"end": 4557,
											"name": "tag",
											"source": 17,
											"value": "279"
										},
										{
											"begin": 4505,
											"end": 4557,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4495,
											"end": 4557,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4495,
											"end": 4557,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4451,
											"end": 4567,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4247,
											"end": 4574,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4580,
											"end": 4657,
											"name": "tag",
											"source": 17,
											"value": "204"
										},
										{
											"begin": 4580,
											"end": 4657,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4617,
											"end": 4624,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4646,
											"end": 4651,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4635,
											"end": 4651,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4635,
											"end": 4651,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4580,
											"end": 4657,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4580,
											"end": 4657,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4580,
											"end": 4657,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4580,
											"end": 4657,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4663,
											"end": 4785,
											"name": "tag",
											"source": 17,
											"value": "205"
										},
										{
											"begin": 4663,
											"end": 4785,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4736,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "282"
										},
										{
											"begin": 4754,
											"end": 4759,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4736,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "204"
										},
										{
											"begin": 4736,
											"end": 4760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4736,
											"end": 4760,
											"name": "tag",
											"source": 17,
											"value": "282"
										},
										{
											"begin": 4736,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4729,
											"end": 4734,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4726,
											"end": 4761,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 4716,
											"end": 4779,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "283"
										},
										{
											"begin": 4716,
											"end": 4779,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4775,
											"end": 4776,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4772,
											"end": 4773,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4765,
											"end": 4777,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 4716,
											"end": 4779,
											"name": "tag",
											"source": 17,
											"value": "283"
										},
										{
											"begin": 4716,
											"end": 4779,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4663,
											"end": 4785,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4663,
											"end": 4785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "tag",
											"source": 17,
											"value": "206"
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4837,
											"end": 4842,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4875,
											"end": 4881,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4862,
											"end": 4882,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 4853,
											"end": 4882,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4853,
											"end": 4882,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4891,
											"end": 4924,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "285"
										},
										{
											"begin": 4918,
											"end": 4923,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4891,
											"end": 4924,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "205"
										},
										{
											"begin": 4891,
											"end": 4924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4891,
											"end": 4924,
											"name": "tag",
											"source": 17,
											"value": "285"
										},
										{
											"begin": 4891,
											"end": 4924,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4791,
											"end": 4930,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "tag",
											"source": 17,
											"value": "58"
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5004,
											"end": 5010,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5012,
											"end": 5018,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5061,
											"end": 5063,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5049,
											"end": 5058,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 5040,
											"end": 5047,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 5036,
											"end": 5059,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 5032,
											"end": 5064,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 5029,
											"end": 5148,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5029,
											"end": 5148,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "287"
										},
										{
											"begin": 5029,
											"end": 5148,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5067,
											"end": 5146,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "288"
										},
										{
											"begin": 5067,
											"end": 5146,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 5067,
											"end": 5146,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5067,
											"end": 5146,
											"name": "tag",
											"source": 17,
											"value": "288"
										},
										{
											"begin": 5067,
											"end": 5146,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5029,
											"end": 5148,
											"name": "tag",
											"source": 17,
											"value": "287"
										},
										{
											"begin": 5029,
											"end": 5148,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5187,
											"end": 5188,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5212,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "289"
										},
										{
											"begin": 5257,
											"end": 5264,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 5248,
											"end": 5254,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5237,
											"end": 5246,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5233,
											"end": 5255,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5212,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 5212,
											"end": 5265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5212,
											"end": 5265,
											"name": "tag",
											"source": 17,
											"value": "289"
										},
										{
											"begin": 5212,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5202,
											"end": 5265,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5202,
											"end": 5265,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5158,
											"end": 5275,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5314,
											"end": 5316,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5340,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "290"
										},
										{
											"begin": 5385,
											"end": 5392,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 5376,
											"end": 5382,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5365,
											"end": 5374,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5361,
											"end": 5383,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5340,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "206"
										},
										{
											"begin": 5340,
											"end": 5393,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5340,
											"end": 5393,
											"name": "tag",
											"source": 17,
											"value": "290"
										},
										{
											"begin": 5340,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5330,
											"end": 5393,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5330,
											"end": 5393,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5285,
											"end": 5403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4936,
											"end": 5410,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "tag",
											"source": 17,
											"value": "71"
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5493,
											"end": 5499,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5501,
											"end": 5507,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5509,
											"end": 5515,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5560,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 5546,
											"end": 5555,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 5537,
											"end": 5544,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5533,
											"end": 5556,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 5529,
											"end": 5561,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "292"
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "293"
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 5564,
											"end": 5643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "tag",
											"source": 17,
											"value": "293"
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "tag",
											"source": 17,
											"value": "292"
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5684,
											"end": 5685,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "294"
										},
										{
											"begin": 5754,
											"end": 5761,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5745,
											"end": 5751,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5734,
											"end": 5743,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5730,
											"end": 5752,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 5709,
											"end": 5762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "tag",
											"source": 17,
											"value": "294"
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5699,
											"end": 5762,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 5699,
											"end": 5762,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5655,
											"end": 5772,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5811,
											"end": 5813,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "295"
										},
										{
											"begin": 5882,
											"end": 5889,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5873,
											"end": 5879,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5862,
											"end": 5871,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5858,
											"end": 5880,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 5837,
											"end": 5890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "tag",
											"source": 17,
											"value": "295"
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5827,
											"end": 5890,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5827,
											"end": 5890,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5782,
											"end": 5900,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5965,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "296"
										},
										{
											"begin": 6010,
											"end": 6017,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 6001,
											"end": 6007,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5990,
											"end": 5999,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5986,
											"end": 6008,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5965,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "206"
										},
										{
											"begin": 5965,
											"end": 6018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5965,
											"end": 6018,
											"name": "tag",
											"source": 17,
											"value": "296"
										},
										{
											"begin": 5965,
											"end": 6018,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5955,
											"end": 6018,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5955,
											"end": 6018,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5910,
											"end": 6028,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5416,
											"end": 6035,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6041,
											"end": 6101,
											"name": "tag",
											"source": 17,
											"value": "207"
										},
										{
											"begin": 6041,
											"end": 6101,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6069,
											"end": 6072,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6090,
											"end": 6095,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6083,
											"end": 6095,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6083,
											"end": 6095,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6041,
											"end": 6101,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6041,
											"end": 6101,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6041,
											"end": 6101,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6041,
											"end": 6101,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6107,
											"end": 6249,
											"name": "tag",
											"source": 17,
											"value": "208"
										},
										{
											"begin": 6107,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6157,
											"end": 6166,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6190,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "299"
										},
										{
											"begin": 6208,
											"end": 6242,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "300"
										},
										{
											"begin": 6217,
											"end": 6241,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 6235,
											"end": 6240,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6217,
											"end": 6241,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "197"
										},
										{
											"begin": 6217,
											"end": 6241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6217,
											"end": 6241,
											"name": "tag",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 6217,
											"end": 6241,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6208,
											"end": 6242,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "207"
										},
										{
											"begin": 6208,
											"end": 6242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6208,
											"end": 6242,
											"name": "tag",
											"source": 17,
											"value": "300"
										},
										{
											"begin": 6208,
											"end": 6242,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6190,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "197"
										},
										{
											"begin": 6190,
											"end": 6243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6190,
											"end": 6243,
											"name": "tag",
											"source": 17,
											"value": "299"
										},
										{
											"begin": 6190,
											"end": 6243,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6177,
											"end": 6243,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6177,
											"end": 6243,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6107,
											"end": 6249,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6107,
											"end": 6249,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6107,
											"end": 6249,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6107,
											"end": 6249,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6255,
											"end": 6381,
											"name": "tag",
											"source": 17,
											"value": "209"
										},
										{
											"begin": 6255,
											"end": 6381,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6305,
											"end": 6314,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6338,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "303"
										},
										{
											"begin": 6369,
											"end": 6374,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6338,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "208"
										},
										{
											"begin": 6338,
											"end": 6375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6338,
											"end": 6375,
											"name": "tag",
											"source": 17,
											"value": "303"
										},
										{
											"begin": 6338,
											"end": 6375,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6325,
											"end": 6375,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6325,
											"end": 6375,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6255,
											"end": 6381,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6255,
											"end": 6381,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6255,
											"end": 6381,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6255,
											"end": 6381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6387,
											"end": 6528,
											"name": "tag",
											"source": 17,
											"value": "210"
										},
										{
											"begin": 6387,
											"end": 6528,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6452,
											"end": 6461,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6485,
											"end": 6522,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "305"
										},
										{
											"begin": 6516,
											"end": 6521,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6485,
											"end": 6522,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "209"
										},
										{
											"begin": 6485,
											"end": 6522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6485,
											"end": 6522,
											"name": "tag",
											"source": 17,
											"value": "305"
										},
										{
											"begin": 6485,
											"end": 6522,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6472,
											"end": 6522,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6472,
											"end": 6522,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6387,
											"end": 6528,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6387,
											"end": 6528,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6387,
											"end": 6528,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6387,
											"end": 6528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6534,
											"end": 6695,
											"name": "tag",
											"source": 17,
											"value": "211"
										},
										{
											"begin": 6534,
											"end": 6695,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6636,
											"end": 6688,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "307"
										},
										{
											"begin": 6682,
											"end": 6687,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6636,
											"end": 6688,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "210"
										},
										{
											"begin": 6636,
											"end": 6688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6636,
											"end": 6688,
											"name": "tag",
											"source": 17,
											"value": "307"
										},
										{
											"begin": 6636,
											"end": 6688,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6631,
											"end": 6634,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6624,
											"end": 6689,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 6534,
											"end": 6695,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6534,
											"end": 6695,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6534,
											"end": 6695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "tag",
											"source": 17,
											"value": "83"
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6809,
											"end": 6813,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6836,
											"end": 6845,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6832,
											"end": 6850,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6824,
											"end": 6850,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6824,
											"end": 6850,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6860,
											"end": 6946,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "309"
										},
										{
											"begin": 6943,
											"end": 6944,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6932,
											"end": 6941,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 6928,
											"end": 6945,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6919,
											"end": 6925,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6860,
											"end": 6946,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "211"
										},
										{
											"begin": 6860,
											"end": 6946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6860,
											"end": 6946,
											"name": "tag",
											"source": 17,
											"value": "309"
										},
										{
											"begin": 6860,
											"end": 6946,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6701,
											"end": 6953,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "tag",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7044,
											"end": 7050,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7052,
											"end": 7058,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7060,
											"end": 7066,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7068,
											"end": 7074,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7117,
											"end": 7120,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 7096,
											"end": 7103,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 7092,
											"end": 7115,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7088,
											"end": 7121,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 7085,
											"end": 7205,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7085,
											"end": 7205,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "311"
										},
										{
											"begin": 7085,
											"end": 7205,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7124,
											"end": 7203,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "312"
										},
										{
											"begin": 7124,
											"end": 7203,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 7124,
											"end": 7203,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7124,
											"end": 7203,
											"name": "tag",
											"source": 17,
											"value": "312"
										},
										{
											"begin": 7124,
											"end": 7203,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7085,
											"end": 7205,
											"name": "tag",
											"source": 17,
											"value": "311"
										},
										{
											"begin": 7085,
											"end": 7205,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7244,
											"end": 7245,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7269,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "313"
										},
										{
											"begin": 7314,
											"end": 7321,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 7305,
											"end": 7311,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7294,
											"end": 7303,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 7290,
											"end": 7312,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7269,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 7269,
											"end": 7322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7269,
											"end": 7322,
											"name": "tag",
											"source": 17,
											"value": "313"
										},
										{
											"begin": 7269,
											"end": 7322,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7259,
											"end": 7322,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 7259,
											"end": 7322,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7215,
											"end": 7332,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7371,
											"end": 7373,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 7397,
											"end": 7450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "314"
										},
										{
											"begin": 7442,
											"end": 7449,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 7433,
											"end": 7439,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7422,
											"end": 7431,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 7418,
											"end": 7440,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7397,
											"end": 7450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "200"
										},
										{
											"begin": 7397,
											"end": 7450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7397,
											"end": 7450,
											"name": "tag",
											"source": 17,
											"value": "314"
										},
										{
											"begin": 7397,
											"end": 7450,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7387,
											"end": 7450,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 7387,
											"end": 7450,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7342,
											"end": 7460,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7499,
											"end": 7501,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7525,
											"end": 7578,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "315"
										},
										{
											"begin": 7570,
											"end": 7577,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 7561,
											"end": 7567,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7550,
											"end": 7559,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 7546,
											"end": 7568,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7525,
											"end": 7578,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "206"
										},
										{
											"begin": 7525,
											"end": 7578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7525,
											"end": 7578,
											"name": "tag",
											"source": 17,
											"value": "315"
										},
										{
											"begin": 7525,
											"end": 7578,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7515,
											"end": 7578,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 7515,
											"end": 7578,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7470,
											"end": 7588,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7627,
											"end": 7629,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 7653,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "316"
										},
										{
											"begin": 7697,
											"end": 7704,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 7688,
											"end": 7694,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7677,
											"end": 7686,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 7673,
											"end": 7695,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7653,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "203"
										},
										{
											"begin": 7653,
											"end": 7705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7653,
											"end": 7705,
											"name": "tag",
											"source": 17,
											"value": "316"
										},
										{
											"begin": 7653,
											"end": 7705,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7643,
											"end": 7705,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7643,
											"end": 7705,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7598,
											"end": 7715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6959,
											"end": 7722,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "tag",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7812,
											"end": 7823,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7846,
											"end": 7852,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7841,
											"end": 7844,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7834,
											"end": 7853,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7886,
											"end": 7890,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7884,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7877,
											"end": 7891,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7862,
											"end": 7891,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7862,
											"end": 7891,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7728,
											"end": 7897,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7903,
											"end": 8084,
											"name": "tag",
											"source": 17,
											"value": "213"
										},
										{
											"begin": 7903,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8043,
											"end": 8076,
											"name": "PUSH",
											"source": 17,
											"value": "4552432D333634333A2043616C6C6572206E6F7420617574686F72697A656400"
										},
										{
											"begin": 8039,
											"end": 8040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8031,
											"end": 8037,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8027,
											"end": 8041,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8020,
											"end": 8077,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7903,
											"end": 8084,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7903,
											"end": 8084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8090,
											"end": 8456,
											"name": "tag",
											"source": 17,
											"value": "214"
										},
										{
											"begin": 8090,
											"end": 8456,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8232,
											"end": 8235,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8253,
											"end": 8320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "320"
										},
										{
											"begin": 8317,
											"end": 8319,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 8312,
											"end": 8315,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8253,
											"end": 8320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 8253,
											"end": 8320,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8253,
											"end": 8320,
											"name": "tag",
											"source": 17,
											"value": "320"
										},
										{
											"begin": 8253,
											"end": 8320,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8246,
											"end": 8320,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8246,
											"end": 8320,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8329,
											"end": 8422,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "321"
										},
										{
											"begin": 8418,
											"end": 8421,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8329,
											"end": 8422,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "213"
										},
										{
											"begin": 8329,
											"end": 8422,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8329,
											"end": 8422,
											"name": "tag",
											"source": 17,
											"value": "321"
										},
										{
											"begin": 8329,
											"end": 8422,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8447,
											"end": 8449,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 8442,
											"end": 8445,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8438,
											"end": 8450,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8431,
											"end": 8450,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8431,
											"end": 8450,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8090,
											"end": 8456,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8090,
											"end": 8456,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8090,
											"end": 8456,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8090,
											"end": 8456,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8462,
											"end": 8881,
											"name": "tag",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 8462,
											"end": 8881,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8628,
											"end": 8632,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8666,
											"end": 8668,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 8655,
											"end": 8664,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8651,
											"end": 8669,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8643,
											"end": 8669,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8643,
											"end": 8669,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8715,
											"end": 8724,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8709,
											"end": 8713,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8705,
											"end": 8725,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 8701,
											"end": 8702,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8690,
											"end": 8699,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8686,
											"end": 8703,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8679,
											"end": 8726,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8743,
											"end": 8874,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "323"
										},
										{
											"begin": 8869,
											"end": 8873,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8743,
											"end": 8874,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "214"
										},
										{
											"begin": 8743,
											"end": 8874,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8743,
											"end": 8874,
											"name": "tag",
											"source": 17,
											"value": "323"
										},
										{
											"begin": 8743,
											"end": 8874,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8735,
											"end": 8874,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8735,
											"end": 8874,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8462,
											"end": 8881,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8462,
											"end": 8881,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8462,
											"end": 8881,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8462,
											"end": 8881,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8887,
											"end": 9005,
											"name": "tag",
											"source": 17,
											"value": "215"
										},
										{
											"begin": 8887,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8974,
											"end": 8998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "325"
										},
										{
											"begin": 8992,
											"end": 8997,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8974,
											"end": 8998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "198"
										},
										{
											"begin": 8974,
											"end": 8998,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8974,
											"end": 8998,
											"name": "tag",
											"source": 17,
											"value": "325"
										},
										{
											"begin": 8974,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8969,
											"end": 8972,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8962,
											"end": 8999,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8887,
											"end": 9005,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8887,
											"end": 9005,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8887,
											"end": 9005,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "tag",
											"source": 17,
											"value": "129"
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9104,
											"end": 9108,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9142,
											"end": 9144,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 9131,
											"end": 9140,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9127,
											"end": 9145,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9119,
											"end": 9145,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9119,
											"end": 9145,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9155,
											"end": 9226,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 9223,
											"end": 9224,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9212,
											"end": 9221,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 9208,
											"end": 9225,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9199,
											"end": 9205,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 9155,
											"end": 9226,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "215"
										},
										{
											"begin": 9155,
											"end": 9226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9155,
											"end": 9226,
											"name": "tag",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 9155,
											"end": 9226,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9233,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9239,
											"end": 9414,
											"name": "tag",
											"source": 17,
											"value": "216"
										},
										{
											"begin": 9239,
											"end": 9414,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9379,
											"end": 9406,
											"name": "PUSH",
											"source": 17,
											"value": "4552432D333634333A20546F6B656E206E6F7420626F756E6400000000000000"
										},
										{
											"begin": 9375,
											"end": 9376,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9367,
											"end": 9373,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9363,
											"end": 9377,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9356,
											"end": 9407,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 9239,
											"end": 9414,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9239,
											"end": 9414,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9420,
											"end": 9786,
											"name": "tag",
											"source": 17,
											"value": "217"
										},
										{
											"begin": 9420,
											"end": 9786,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9562,
											"end": 9565,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9583,
											"end": 9650,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "330"
										},
										{
											"begin": 9647,
											"end": 9649,
											"name": "PUSH",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 9642,
											"end": 9645,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 9583,
											"end": 9650,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 9583,
											"end": 9650,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9583,
											"end": 9650,
											"name": "tag",
											"source": 17,
											"value": "330"
										},
										{
											"begin": 9583,
											"end": 9650,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9576,
											"end": 9650,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9576,
											"end": 9650,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9659,
											"end": 9752,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "331"
										},
										{
											"begin": 9748,
											"end": 9751,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9659,
											"end": 9752,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "216"
										},
										{
											"begin": 9659,
											"end": 9752,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9659,
											"end": 9752,
											"name": "tag",
											"source": 17,
											"value": "331"
										},
										{
											"begin": 9659,
											"end": 9752,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9777,
											"end": 9779,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 9772,
											"end": 9775,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9768,
											"end": 9780,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9761,
											"end": 9780,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9761,
											"end": 9780,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9420,
											"end": 9786,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9420,
											"end": 9786,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9420,
											"end": 9786,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9420,
											"end": 9786,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9792,
											"end": 10211,
											"name": "tag",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 9792,
											"end": 10211,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9958,
											"end": 9962,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9996,
											"end": 9998,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 9985,
											"end": 9994,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9981,
											"end": 9999,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9973,
											"end": 9999,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9973,
											"end": 9999,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10045,
											"end": 10054,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 10039,
											"end": 10043,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 10035,
											"end": 10055,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 10031,
											"end": 10032,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10020,
											"end": 10029,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 10016,
											"end": 10033,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10009,
											"end": 10056,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10073,
											"end": 10204,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "333"
										},
										{
											"begin": 10199,
											"end": 10203,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 10073,
											"end": 10204,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "217"
										},
										{
											"begin": 10073,
											"end": 10204,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10073,
											"end": 10204,
											"name": "tag",
											"source": 17,
											"value": "333"
										},
										{
											"begin": 10073,
											"end": 10204,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10065,
											"end": 10204,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10065,
											"end": 10204,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9792,
											"end": 10211,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9792,
											"end": 10211,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9792,
											"end": 10211,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9792,
											"end": 10211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10217,
											"end": 10399,
											"name": "tag",
											"source": 17,
											"value": "218"
										},
										{
											"begin": 10217,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10357,
											"end": 10391,
											"name": "PUSH",
											"source": 17,
											"value": "20636F756E74727920636F6D706C696E616E63652069732072656A6563746564"
										},
										{
											"begin": 10353,
											"end": 10354,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10345,
											"end": 10351,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10341,
											"end": 10355,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10334,
											"end": 10392,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10217,
											"end": 10399,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10217,
											"end": 10399,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10405,
											"end": 10771,
											"name": "tag",
											"source": 17,
											"value": "219"
										},
										{
											"begin": 10405,
											"end": 10771,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10547,
											"end": 10550,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10568,
											"end": 10635,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "336"
										},
										{
											"begin": 10632,
											"end": 10634,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10627,
											"end": 10630,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 10568,
											"end": 10635,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 10568,
											"end": 10635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10568,
											"end": 10635,
											"name": "tag",
											"source": 17,
											"value": "336"
										},
										{
											"begin": 10568,
											"end": 10635,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10561,
											"end": 10635,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10561,
											"end": 10635,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10644,
											"end": 10737,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 10733,
											"end": 10736,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10644,
											"end": 10737,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "218"
										},
										{
											"begin": 10644,
											"end": 10737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10644,
											"end": 10737,
											"name": "tag",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 10644,
											"end": 10737,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10762,
											"end": 10764,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10757,
											"end": 10760,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10753,
											"end": 10765,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10746,
											"end": 10765,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10746,
											"end": 10765,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10405,
											"end": 10771,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10405,
											"end": 10771,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10405,
											"end": 10771,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10405,
											"end": 10771,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10777,
											"end": 11196,
											"name": "tag",
											"source": 17,
											"value": "163"
										},
										{
											"begin": 10777,
											"end": 11196,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10943,
											"end": 10947,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10981,
											"end": 10983,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10970,
											"end": 10979,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10966,
											"end": 10984,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10958,
											"end": 10984,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10958,
											"end": 10984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11030,
											"end": 11039,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11024,
											"end": 11028,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11020,
											"end": 11040,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 11016,
											"end": 11017,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11005,
											"end": 11014,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11001,
											"end": 11018,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10994,
											"end": 11041,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 11058,
											"end": 11189,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "339"
										},
										{
											"begin": 11184,
											"end": 11188,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11058,
											"end": 11189,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "219"
										},
										{
											"begin": 11058,
											"end": 11189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11058,
											"end": 11189,
											"name": "tag",
											"source": 17,
											"value": "339"
										},
										{
											"begin": 11058,
											"end": 11189,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11050,
											"end": 11189,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11050,
											"end": 11189,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10777,
											"end": 11196,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10777,
											"end": 11196,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10777,
											"end": 11196,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10777,
											"end": 11196,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "tag",
											"source": 17,
											"value": "184"
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11323,
											"end": 11327,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11361,
											"end": 11363,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 11350,
											"end": 11359,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 11346,
											"end": 11364,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11338,
											"end": 11364,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11338,
											"end": 11364,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11374,
											"end": 11445,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "341"
										},
										{
											"begin": 11442,
											"end": 11443,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11431,
											"end": 11440,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11427,
											"end": 11444,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11418,
											"end": 11424,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 11374,
											"end": 11445,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "215"
										},
										{
											"begin": 11374,
											"end": 11445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11374,
											"end": 11445,
											"name": "tag",
											"source": 17,
											"value": "341"
										},
										{
											"begin": 11374,
											"end": 11445,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11455,
											"end": 11527,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 11523,
											"end": 11525,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 11512,
											"end": 11521,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11508,
											"end": 11526,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11499,
											"end": 11505,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 11455,
											"end": 11527,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "196"
										},
										{
											"begin": 11455,
											"end": 11527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11455,
											"end": 11527,
											"name": "tag",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 11455,
											"end": 11527,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11202,
											"end": 11534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
								"@onchain-id/solidity/contracts/interface/IERC734.sol",
								"@onchain-id/solidity/contracts/interface/IERC735.sol",
								"@onchain-id/solidity/contracts/interface/IIdentity.sol",
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/compliance/BasicCompliance.sol",
								"contracts/compliance/interface/ICompliance.sol",
								"contracts/registry/interface/IClaimIssuersRegistry.sol",
								"contracts/registry/interface/IClaimTopicsRegistry.sol",
								"contracts/registry/interface/IIdentityRegistry.sol",
								"contracts/registry/interface/IIdentityRegistryStorage.sol",
								"contracts/token/IToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"ADMIN_ROLE()": "75b238fc",
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"TOKEN_ROLE()": "8301057b",
							"addAllowedCountry(uint16)": "4f44425e",
							"bindToken(address)": "3ff5aa02",
							"canTransfer(address,address,uint256,uint16)": "e5316e78",
							"created(address,uint256)": "5f8dead3",
							"destroyed(address,uint256)": "8d2ea772",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"isCountryAllowed(uint16)": "99f644f6",
							"isTokenBound(address)": "993e8b95",
							"removeAllowedCountry(uint16)": "817544c3",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenBound()": "93e62f07",
							"transferred(address,address,uint256)": "8baf29b4",
							"unbindToken(address)": "40db3b50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"country_code\",\"type\":\"uint16\"}],\"name\":\"addAllowedCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"countryCode\",\"type\":\"uint16\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"isCountryAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"country_code\",\"type\":\"uint16\"}],\"name\":\"removeAllowedCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBound\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bindToken(address)\":{\"details\":\"See {ICompliance-bindToken}.\"},\"canTransfer(address,address,uint256,uint16)\":{\"details\":\"See {ICompliance-canTransfer}.\"},\"created(address,uint256)\":{\"details\":\"See {ICompliance-created}.\"},\"destroyed(address,uint256)\":{\"details\":\"See {ICompliance-destroyed}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTokenBound(address)\":{\"details\":\"See {ICompliance-isTokenBound}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unbindToken(address)\":{\"details\":\"See {ICompliance-unbindToken}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"TokenBound(address)\":{\"notice\":\"this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind\"},\"TokenUnbound(address)\":{\"notice\":\"this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind\"}},\"kind\":\"user\",\"methods\":{\"tokenBound()\":{\"notice\":\"Mapping of tokens linked to the compliance contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compliance/BasicCompliance.sol\":\"BasicCompliance\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"contracts/compliance/BasicCompliance.sol\":{\"keccak256\":\"0xbeacdf54a3593bb808a712bd171ca9b4174d7dc27e2b2e215ea6953f2c9a80b5\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://466b6032e4ee3af606143f446404417505ce0d7b6ffc7cbc95b234f70ce9a4ea\",\"dweb:/ipfs/QmetQXJQRZikcR3WzsgchpmBN85Zwytuhw1phnoitCaRGd\"]},\"contracts/compliance/interface/ICompliance.sol\":{\"keccak256\":\"0xedfb6eba8e5ad69cb79ff91ea086a3de41abe3d67e7273323de422d06e884413\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e99f7fb3275fb6e5fd3a5a3bd84c720f24f8745a58c7ce4ed2b249130361fff9\",\"dweb:/ipfs/QmeBcYmhf4boB6NUYX58Q6EJNQirKeq73YEHdK7JEmsmJj\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0xbc47d0a331c5a816e8eee459239de4d312a578fbad75985af02ffb04e0389743\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://39a4cdc9fe0479f17ace597e185ee1f179f540af838a5a331244150163bb10f6\",\"dweb:/ipfs/QmWQqSWAgndgbYT6pyHZ9SexrJHZy3XyQ3GMpLRwT743eL\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]},\"contracts/token/IToken.sol\":{\"keccak256\":\"0x2bd803bf4c94c206a40052ad13cf63fcf6d6c1d13eb0ff6e2513863faa159ae6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fff7c48b75dccd5998e7e68dc219331db7b7a6421d9feb66ea8694cb286bf566\",\"dweb:/ipfs/QmVSvtaXgVjuivmc9sNchy1PRh1uQGjHd1iszi5gXHHCvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 355,
								"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)350_storage)"
							},
							{
								"astId": 865,
								"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
								"label": "_tokenAgentsList",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 869,
								"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
								"label": "tokenBound",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IToken)1862"
							},
							{
								"astId": 879,
								"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
								"label": "isCountryAllowed",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint16,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IToken)1862": {
								"encoding": "inplace",
								"label": "contract IToken",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)350_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)350_storage"
							},
							"t_mapping(t_uint16,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_struct(RoleData)350_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 347,
										"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
										"label": "hasRole",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 349,
										"contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							}
						}
					},
					"userdoc": {
						"events": {
							"TokenBound(address)": {
								"notice": "this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind"
							},
							"TokenUnbound(address)": {
								"notice": "this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind"
							}
						},
						"kind": "user",
						"methods": {
							"tokenBound()": {
								"notice": "Mapping of tokens linked to the compliance contract"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/compliance/interface/ICompliance.sol": {
				"ICompliance": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "TokenBound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "TokenUnbound",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "bindToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "code",
									"type": "uint16"
								}
							],
							"name": "canTransfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "created",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "destroyed",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "isTokenBound",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "transferred",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "unbindToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"bindToken(address)": {
								"details": "binds a token to the compliance contract",
								"params": {
									"_token": "address of the token to bind  Emits a TokenBound event"
								}
							},
							"canTransfer(address,address,uint256,uint16)": {
								"details": "checks that the transfer is compliant.  default compliance always returns true  READ ONLY FUNCTION, this function cannot be used to increment  counters, emit events, ...",
								"params": {
									"_amount": "The amount of tokens involved in the transfer",
									"_from": "The address of the sender",
									"_to": "The address of the receiver"
								}
							},
							"created(address,uint256)": {
								"details": "function called whenever tokens are created  on a wallet  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
								"params": {
									"_amount": "The amount of tokens involved in the transfer",
									"_to": "The address of the receiver"
								}
							},
							"destroyed(address,uint256)": {
								"details": "function called whenever tokens are destroyed  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
								"params": {
									"_amount": "The amount of tokens involved in the transfer",
									"_from": "The address of the receiver"
								}
							},
							"isTokenBound(address)": {
								"details": "Returns true if the address given corresponds to a token that is bound with the Compliance contract",
								"params": {
									"_token": "address of the token"
								}
							},
							"transferred(address,address,uint256)": {
								"details": "function called whenever tokens are transferred  from one wallet to another  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
								"params": {
									"_amount": "The amount of tokens involved in the transfer",
									"_from": "The address of the sender",
									"_to": "The address of the receiver"
								}
							},
							"unbindToken(address)": {
								"details": "unbinds a token from the compliance contract",
								"params": {
									"_token": "address of the token to unbind  Emits a TokenUnbound event"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"bindToken(address)": "3ff5aa02",
							"canTransfer(address,address,uint256,uint16)": "e5316e78",
							"created(address,uint256)": "5f8dead3",
							"destroyed(address,uint256)": "8d2ea772",
							"isTokenBound(address)": "993e8b95",
							"transferred(address,address,uint256)": "8baf29b4",
							"unbindToken(address)": "40db3b50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bindToken(address)\":{\"details\":\"binds a token to the compliance contract\",\"params\":{\"_token\":\"address of the token to bind  Emits a TokenBound event\"}},\"canTransfer(address,address,uint256,uint16)\":{\"details\":\"checks that the transfer is compliant.  default compliance always returns true  READ ONLY FUNCTION, this function cannot be used to increment  counters, emit events, ...\",\"params\":{\"_amount\":\"The amount of tokens involved in the transfer\",\"_from\":\"The address of the sender\",\"_to\":\"The address of the receiver\"}},\"created(address,uint256)\":{\"details\":\"function called whenever tokens are created  on a wallet  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract\",\"params\":{\"_amount\":\"The amount of tokens involved in the transfer\",\"_to\":\"The address of the receiver\"}},\"destroyed(address,uint256)\":{\"details\":\"function called whenever tokens are destroyed  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract\",\"params\":{\"_amount\":\"The amount of tokens involved in the transfer\",\"_from\":\"The address of the receiver\"}},\"isTokenBound(address)\":{\"details\":\"Returns true if the address given corresponds to a token that is bound with the Compliance contract\",\"params\":{\"_token\":\"address of the token\"}},\"transferred(address,address,uint256)\":{\"details\":\"function called whenever tokens are transferred  from one wallet to another  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract\",\"params\":{\"_amount\":\"The amount of tokens involved in the transfer\",\"_from\":\"The address of the sender\",\"_to\":\"The address of the receiver\"}},\"unbindToken(address)\":{\"details\":\"unbinds a token from the compliance contract\",\"params\":{\"_token\":\"address of the token to unbind  Emits a TokenUnbound event\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TokenBound(address)\":{\"notice\":\"this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind\"},\"TokenUnbound(address)\":{\"notice\":\"this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compliance/interface/ICompliance.sol\":\"ICompliance\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/compliance/interface/ICompliance.sol\":{\"keccak256\":\"0xedfb6eba8e5ad69cb79ff91ea086a3de41abe3d67e7273323de422d06e884413\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e99f7fb3275fb6e5fd3a5a3bd84c720f24f8745a58c7ce4ed2b249130361fff9\",\"dweb:/ipfs/QmeBcYmhf4boB6NUYX58Q6EJNQirKeq73YEHdK7JEmsmJj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"TokenBound(address)": {
								"notice": "this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind"
							},
							"TokenUnbound(address)": {
								"notice": "this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"IClaimIssuersRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "ClaimIssuerAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								}
							],
							"name": "ClaimIssuerRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "ClaimTopicsUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "addClaimIssuer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								}
							],
							"name": "getClaimIssuerClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimIssuers",
							"outputs": [
								{
									"internalType": "contract IClaimIssuer[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "getClaimIssuersForClaimTopic",
							"outputs": [
								{
									"internalType": "contract IClaimIssuer[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_issuer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "hasClaimTopic",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_issuer",
									"type": "address"
								}
							],
							"name": "isClaimIssuer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								}
							],
							"name": "removeClaimIssuer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "updateIssuerClaimTopics",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addClaimIssuer(address,uint256[])": {
								"details": "registers a ClaimIssuer contract as claim claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Claim issuers",
								"params": {
									"_claimIssuer": "The ClaimIssuer contract address of the claim claim issuer.",
									"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerAdded` event"
								}
							},
							"getClaimIssuerClaimTopics(address)": {
								"details": "Function for getting all the claim topic of claim claim issuer  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.",
								"params": {
									"_claimIssuer": "the claim issuer concerned."
								},
								"returns": {
									"_0": "The set of claim topics that the claim issuer is allowed to emit"
								}
							},
							"getClaimIssuers()": {
								"details": "Function for getting all the claim claim issuers stored.",
								"returns": {
									"_0": "array of all claim issuers registered."
								}
							},
							"getClaimIssuersForClaimTopic(uint256)": {
								"details": "Function for getting all the claim issuer allowed for a given claim topic.",
								"params": {
									"claimTopic": "the claim topic to get the claim issuers for."
								},
								"returns": {
									"_0": "array of all claim issuer addresses that are allowed for the given claim topic."
								}
							},
							"hasClaimTopic(address,uint256)": {
								"details": "Function for checking if the claim claim issuer is allowed  to emit a certain claim topic",
								"params": {
									"_claimTopic": "the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it",
									"_issuer": "the address of the claim issuer's ClaimIssuer contract"
								},
								"returns": {
									"_0": "true if the issuer is claim for this claim topic."
								}
							},
							"isClaimIssuer(address)": {
								"details": "Checks if the ClaimIssuer contract is claim",
								"params": {
									"_issuer": "the address of the ClaimIssuer contract"
								},
								"returns": {
									"_0": "true if the issuer is claim, false otherwise."
								}
							},
							"removeClaimIssuer(address)": {
								"details": "Removes the ClaimIssuer contract of a claim claim issuer.  Requires that the claim issuer contract to be registered first",
								"params": {
									"_claimIssuer": "the claim issuer to remove.  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerRemoved` event"
								}
							},
							"updateIssuerClaimTopics(address,uint256[])": {
								"details": "Updates the set of claim topics that a claim issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics",
								"params": {
									"_claimIssuer": "the claim issuer to update.",
									"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimTopicsUpdated` event"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaimIssuer(address,uint256[])": "38d742a4",
							"getClaimIssuerClaimTopics(address)": "122dade8",
							"getClaimIssuers()": "d4f4ac4e",
							"getClaimIssuersForClaimTopic(uint256)": "6b2c56bd",
							"hasClaimTopic(address,uint256)": "34a89987",
							"isClaimIssuer(address)": "6de48708",
							"removeClaimIssuer(address)": "0b4b764c",
							"updateIssuerClaimTopics(address,uint256[])": "04bc7e84"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimIssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"}],\"name\":\"ClaimIssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTopicsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"addClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"name\":\"getClaimIssuerClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimIssuers\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"getClaimIssuersForClaimTopic\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"isClaimIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"name\":\"removeClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateIssuerClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimIssuer(address,uint256[])\":{\"details\":\"registers a ClaimIssuer contract as claim claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Claim issuers\",\"params\":{\"_claimIssuer\":\"The ClaimIssuer contract address of the claim claim issuer.\",\"_claimTopics\":\"the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerAdded` event\"}},\"getClaimIssuerClaimTopics(address)\":{\"details\":\"Function for getting all the claim topic of claim claim issuer  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\",\"params\":{\"_claimIssuer\":\"the claim issuer concerned.\"},\"returns\":{\"_0\":\"The set of claim topics that the claim issuer is allowed to emit\"}},\"getClaimIssuers()\":{\"details\":\"Function for getting all the claim claim issuers stored.\",\"returns\":{\"_0\":\"array of all claim issuers registered.\"}},\"getClaimIssuersForClaimTopic(uint256)\":{\"details\":\"Function for getting all the claim issuer allowed for a given claim topic.\",\"params\":{\"claimTopic\":\"the claim topic to get the claim issuers for.\"},\"returns\":{\"_0\":\"array of all claim issuer addresses that are allowed for the given claim topic.\"}},\"hasClaimTopic(address,uint256)\":{\"details\":\"Function for checking if the claim claim issuer is allowed  to emit a certain claim topic\",\"params\":{\"_claimTopic\":\"the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\",\"_issuer\":\"the address of the claim issuer's ClaimIssuer contract\"},\"returns\":{\"_0\":\"true if the issuer is claim for this claim topic.\"}},\"isClaimIssuer(address)\":{\"details\":\"Checks if the ClaimIssuer contract is claim\",\"params\":{\"_issuer\":\"the address of the ClaimIssuer contract\"},\"returns\":{\"_0\":\"true if the issuer is claim, false otherwise.\"}},\"removeClaimIssuer(address)\":{\"details\":\"Removes the ClaimIssuer contract of a claim claim issuer.  Requires that the claim issuer contract to be registered first\",\"params\":{\"_claimIssuer\":\"the claim issuer to remove.  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerRemoved` event\"}},\"updateIssuerClaimTopics(address,uint256[])\":{\"details\":\"Updates the set of claim topics that a claim issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics\",\"params\":{\"_claimIssuer\":\"the claim issuer to update.\",\"_claimTopics\":\"the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimTopicsUpdated` event\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimIssuerAdded(address,uint256[])\":{\"notice\":\"this event is emitted when a claim issuer is added in the registry.  the event is emitted by the addClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit\"},\"ClaimIssuerRemoved(address)\":{\"notice\":\"this event is emitted when a claim issuer is removed from the registry.  the event is emitted by the removeClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\"},\"ClaimTopicsUpdated(address,uint256[])\":{\"notice\":\"this event is emitted when the set of claim topics is changed for a given claim issuer.  the event is emitted by the updateIssuerClaimTopics function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IClaimIssuersRegistry.sol\":\"IClaimIssuersRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimIssuerAdded(address,uint256[])": {
								"notice": "this event is emitted when a claim issuer is added in the registry.  the event is emitted by the addClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
							},
							"ClaimIssuerRemoved(address)": {
								"notice": "this event is emitted when a claim issuer is removed from the registry.  the event is emitted by the removeClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract"
							},
							"ClaimTopicsUpdated(address,uint256[])": {
								"notice": "this event is emitted when the set of claim topics is changed for a given claim issuer.  the event is emitted by the updateIssuerClaimTopics function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"IClaimTopicsRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "addClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "removeClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addClaimTopic(uint256)": {
								"details": "Add a claim claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							},
							"getClaimTopics()": {
								"details": "Get the claim claim topics for the security token",
								"returns": {
									"_0": "Array of claim claim topics"
								}
							},
							"removeClaimTopic(uint256)": {
								"details": "Remove a claim claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaimTopic(uint256)": "c7b22551",
							"getClaimTopics()": "df09d604",
							"removeClaimTopic(uint256)": "08297846"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"Add a claim claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues\",\"params\":{\"_claimTopic\":\"The claim topic index\"}},\"getClaimTopics()\":{\"details\":\"Get the claim claim topics for the security token\",\"returns\":{\"_0\":\"Array of claim claim topics\"}},\"removeClaimTopic(uint256)\":{\"details\":\"Remove a claim claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event\",\"params\":{\"_claimTopic\":\"The claim topic index\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicAdded(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry\"},\"ClaimTopicRemoved(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IClaimTopicsRegistry.sol\":\"IClaimTopicsRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimTopicAdded(uint256)": {
								"notice": "this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry"
							},
							"ClaimTopicRemoved(uint256)": {
								"notice": "this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"IIdentityRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuersRegistry",
									"name": "claimIssuersRegistry",
									"type": "address"
								}
							],
							"name": "ClaimIssuersRegistrySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimTopicsRegistry",
									"name": "claimTopicsRegistry",
									"type": "address"
								}
							],
							"name": "ClaimTopicsRegistrySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "country",
									"type": "uint16"
								}
							],
							"name": "CountryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentityRegistryStorage",
									"name": "identityStorage",
									"type": "address"
								}
							],
							"name": "IdentityStorageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "oldIdentity",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "newIdentity",
									"type": "address"
								}
							],
							"name": "IdentityUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "contract IIdentity[]",
									"name": "_identities",
									"type": "address[]"
								},
								{
									"internalType": "uint16[]",
									"name": "_countries",
									"type": "uint16[]"
								}
							],
							"name": "batchRegisterIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "contains",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "deleteIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "identity",
							"outputs": [
								{
									"internalType": "contract IIdentity",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "identityStorage",
							"outputs": [
								{
									"internalType": "contract IIdentityRegistryStorage",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "investorCountry",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "isVerified",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "issuersRegistry",
							"outputs": [
								{
									"internalType": "contract IClaimIssuersRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "registerIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuersRegistry",
									"name": "_claimIssuersRegistry",
									"type": "address"
								}
							],
							"name": "setClaimIssuersRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimTopicsRegistry",
									"name": "_claimTopicsRegistry",
									"type": "address"
								}
							],
							"name": "setClaimTopicsRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentityRegistryStorage",
									"name": "_identityRegistryStorage",
									"type": "address"
								}
							],
							"name": "setIdentityRegistryStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "topicsRegistry",
							"outputs": [
								{
									"internalType": "contract IClaimTopicsRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "updateCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "updateIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"batchRegisterIdentity(address[],address[],uint16[])": {
								"details": "function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_countries": "The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events",
									"_identities": "The addresses of the corresponding identity contracts",
									"_userAddresses": "The addresses of the users"
								}
							},
							"contains(address)": {
								"details": "This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.",
								"params": {
									"_userAddress": "The address of the user to be checked."
								},
								"returns": {
									"_0": "'True' if the address is contained in the Identity Registry, 'false' if not."
								}
							},
							"deleteIdentity(address)": {
								"details": "Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_userAddress": "The address of the user to be removed  emits `IdentityRemoved` event"
								}
							},
							"identity(address)": {
								"details": "Returns the onchainID of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"identityStorage()": {
								"details": "Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
							},
							"investorCountry(address)": {
								"details": "Returns the country code of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"isVerified(address)": {
								"details": "This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from claim issuers registry and from the claim topics registry",
								"params": {
									"_userAddress": "The address of the user to be verified."
								},
								"returns": {
									"_0": "'True' if the address is verified, 'false' if not."
								}
							},
							"issuersRegistry()": {
								"details": "Returns the ClaimIssuersRegistry linked to the current IdentityRegistry."
							},
							"registerIdentity(address,address,uint16)": {
								"details": "Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_country": "The country of the investor  emits `IdentityRegistered` event",
									"_identity": "The address of the user's identity contract",
									"_userAddress": "The address of the user"
								}
							},
							"setClaimIssuersRegistry(address)": {
								"details": "Replace the actual claimIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_claimIssuersRegistry": "The address of the new Claim Issuers Registry  emits `ClaimIssuersRegistrySet` event"
								}
							},
							"setClaimTopicsRegistry(address)": {
								"details": "Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_claimTopicsRegistry": "The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event"
								}
							},
							"setIdentityRegistryStorage(address)": {
								"details": "Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_identityRegistryStorage": "The address of the new Identity Registry Storage  emits `IdentityStorageSet` event"
								}
							},
							"topicsRegistry()": {
								"details": "Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
							},
							"updateCountry(address,uint16)": {
								"details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_country": "The new country of the user  emits `CountryUpdated` event",
									"_userAddress": "The address of the user"
								}
							},
							"updateIdentity(address,address)": {
								"details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_identity": "The address of the user's new identity contract  emits `IdentityUpdated` event",
									"_userAddress": "The address of the user"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchRegisterIdentity(address[],address[],uint16[])": "653dc9f1",
							"contains(address)": "5dbe47e8",
							"deleteIdentity(address)": "a8d29d1d",
							"identity(address)": "f0eb5e54",
							"identityStorage()": "f11abfd8",
							"investorCountry(address)": "7e42683b",
							"isVerified(address)": "b9209e33",
							"issuersRegistry()": "b4f3fcb7",
							"registerIdentity(address,address,uint16)": "454a03e0",
							"setClaimIssuersRegistry(address)": "6bc72c90",
							"setClaimTopicsRegistry(address)": "670af6a9",
							"setIdentityRegistryStorage(address)": "26d941ae",
							"topicsRegistry()": "3b3e12f4",
							"updateCountry(address,uint16)": "3b239a7f",
							"updateIdentity(address,address)": "8e098ca1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"ClaimIssuersRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"ClaimTopicsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"_claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"setClaimIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"setClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"_identityRegistryStorage\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicsRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_countries\":\"The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events\",\"_identities\":\"The addresses of the corresponding identity contracts\",\"_userAddresses\":\"The addresses of the users\"}},\"contains(address)\":{\"details\":\"This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.\",\"params\":{\"_userAddress\":\"The address of the user to be checked.\"},\"returns\":{\"_0\":\"'True' if the address is contained in the Identity Registry, 'false' if not.\"}},\"deleteIdentity(address)\":{\"details\":\"Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityRemoved` event\"}},\"identity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"identityStorage()\":{\"details\":\"Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\"},\"investorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"isVerified(address)\":{\"details\":\"This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from claim issuers registry and from the claim topics registry\",\"params\":{\"_userAddress\":\"The address of the user to be verified.\"},\"returns\":{\"_0\":\"'True' if the address is verified, 'false' if not.\"}},\"issuersRegistry()\":{\"details\":\"Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\"},\"registerIdentity(address,address,uint16)\":{\"details\":\"Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityRegistered` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"setClaimIssuersRegistry(address)\":{\"details\":\"Replace the actual claimIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimIssuersRegistry\":\"The address of the new Claim Issuers Registry  emits `ClaimIssuersRegistrySet` event\"}},\"setClaimTopicsRegistry(address)\":{\"details\":\"Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimTopicsRegistry\":\"The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event\"}},\"setIdentityRegistryStorage(address)\":{\"details\":\"Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_identityRegistryStorage\":\"The address of the new Identity Registry Storage  emits `IdentityStorageSet` event\"}},\"topicsRegistry()\":{\"details\":\"Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\"},\"updateCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryUpdated` event\",\"_userAddress\":\"The address of the user\"}},\"updateIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityUpdated` event\",\"_userAddress\":\"The address of the user\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimIssuersRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\"},\"ClaimTopicsRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\"},\"CountryUpdated(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityRegistered(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityRemoved(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityStorageSet(address)\":{\"notice\":\"this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract\"},\"IdentityUpdated(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IIdentityRegistry.sol\":\"IIdentityRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0xbc47d0a331c5a816e8eee459239de4d312a578fbad75985af02ffb04e0389743\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://39a4cdc9fe0479f17ace597e185ee1f179f540af838a5a331244150163bb10f6\",\"dweb:/ipfs/QmWQqSWAgndgbYT6pyHZ9SexrJHZy3XyQ3GMpLRwT743eL\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimIssuersRegistrySet(address)": {
								"notice": "this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract"
							},
							"ClaimTopicsRegistrySet(address)": {
								"notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
							},
							"CountryUpdated(address,uint16)": {
								"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
							},
							"IdentityRegistered(address,address)": {
								"notice": "this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityRemoved(address,address)": {
								"notice": "this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityStorageSet(address)": {
								"notice": "this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract"
							},
							"IdentityUpdated(address,address)": {
								"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"IIdentityRegistryStorage": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "country",
									"type": "uint16"
								}
							],
							"name": "CountryModified",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "oldIdentity",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "newIdentity",
									"type": "address"
								}
							],
							"name": "IdentityModified",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryBound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryUnbound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityStored",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityUnstored",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "addIdentityToStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "bindIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "linkedIdentityRegistries",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "modifyStoredIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "modifyStoredInvestorCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "removeIdentityFromStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "storedIdentity",
							"outputs": [
								{
									"internalType": "contract IIdentity",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "storedInvestorCountry",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "unbindIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addIdentityToStorage(address,address,uint16)": {
								"details": "adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_country": "The country of the investor  emits `IdentityStored` event",
									"_identity": "The address of the user's identity contract",
									"_userAddress": "The address of the user"
								}
							},
							"bindIdentityRegistry(address)": {
								"params": {
									"_identityRegistry": "The identity registry address to add."
								}
							},
							"linkedIdentityRegistries()": {
								"details": "Returns the identity registries linked to the storage contract"
							},
							"modifyStoredIdentity(address,address)": {
								"details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_identity": "The address of the user's new identity contract  emits `IdentityModified` event",
									"_userAddress": "The address of the user"
								}
							},
							"modifyStoredInvestorCountry(address,uint16)": {
								"details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_country": "The new country of the user  emits `CountryModified` event",
									"_userAddress": "The address of the user"
								}
							},
							"removeIdentityFromStorage(address)": {
								"details": "Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_userAddress": "The address of the user to be removed  emits `IdentityUnstored` event"
								}
							},
							"storedIdentity(address)": {
								"details": "Returns the onchainID of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"storedInvestorCountry(address)": {
								"details": "Returns the country code of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"unbindIdentityRegistry(address)": {
								"params": {
									"_identityRegistry": "The identity registry address to remove."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addIdentityToStorage(address,address,uint16)": "a53410dd",
							"bindIdentityRegistry(address)": "690a49f9",
							"linkedIdentityRegistries()": "bf9eb959",
							"modifyStoredIdentity(address,address)": "e805cf86",
							"modifyStoredInvestorCountry(address,uint16)": "9f3418d5",
							"removeIdentityFromStorage(address)": "cf191bcd",
							"storedIdentity(address)": "7988d3a5",
							"storedInvestorCountry(address)": "727e13bc",
							"unbindIdentityRegistry(address)": "97a012f7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityUnstored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"addIdentityToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"bindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedIdentityRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"modifyStoredIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"modifyStoredInvestorCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeIdentityFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedIdentity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedInvestorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"unbindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addIdentityToStorage(address,address,uint16)\":{\"details\":\"adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityStored` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"bindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to add.\"}},\"linkedIdentityRegistries()\":{\"details\":\"Returns the identity registries linked to the storage contract\"},\"modifyStoredIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityModified` event\",\"_userAddress\":\"The address of the user\"}},\"modifyStoredInvestorCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryModified` event\",\"_userAddress\":\"The address of the user\"}},\"removeIdentityFromStorage(address)\":{\"details\":\"Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityUnstored` event\"}},\"storedIdentity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"storedInvestorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"unbindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to remove.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CountryModified(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityModified(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"},\"IdentityRegistryBound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added\"},\"IdentityRegistryUnbound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed\"},\"IdentityStored(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityUnstored(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"}},\"kind\":\"user\",\"methods\":{\"bindIdentityRegistry(address)\":{\"notice\":\"Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS\"},\"unbindIdentityRegistry(address)\":{\"notice\":\"Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IIdentityRegistryStorage.sol\":\"IIdentityRegistryStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"CountryModified(address,uint16)": {
								"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
							},
							"IdentityModified(address,address)": {
								"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
							},
							"IdentityRegistryBound(address)": {
								"notice": "this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added"
							},
							"IdentityRegistryUnbound(address)": {
								"notice": "this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed"
							},
							"IdentityStored(address,address)": {
								"notice": "this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityUnstored(address,address)": {
								"notice": "this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							}
						},
						"kind": "user",
						"methods": {
							"bindIdentityRegistry(address)": {
								"notice": "Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS"
							},
							"unbindIdentityRegistry(address)": {
								"notice": "Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/token/IToken.sol": {
				"IToken": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bool",
									"name": "_isFrozen",
									"type": "bool"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "AddressFrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_compliance",
									"type": "address"
								}
							],
							"name": "ComplianceAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_lostWallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_newWallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_investorOnchainID",
									"type": "address"
								}
							],
							"name": "RecoverySuccess",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "TokensFrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "TokensUnfrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_newOnchainID",
									"type": "address"
								}
							],
							"name": "UpdatedOnchainID",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_fromList",
									"type": "address[]"
								},
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchForcedTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchFreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "bool[]",
									"name": "_freeze",
									"type": "bool[]"
								}
							],
							"name": "batchSetAddressFrozen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchUnfreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "compliance",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "forcedTransfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "freezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "getFrozenTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "identityRegistry",
							"outputs": [
								{
									"internalType": "contract IIdentityRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "isFrozen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "onchainID",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_lostWallet",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_newWallet",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_investorOnchainID",
									"type": "address"
								}
							],
							"name": "recoveryAddress",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_freeze",
									"type": "bool"
								}
							],
							"name": "setAddressFrozen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_compliance",
									"type": "address"
								}
							],
							"name": "setCompliance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "setIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_onchainID",
									"type": "address"
								}
							],
							"name": "setOnchainID",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "unfreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "version",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"batchBurn(address[],uint256[])": {
								"details": "function allowing to burn tokens in batch  Require that the `_userAddresses` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to burn from the corresponding wallets  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `Transfer` events",
									"_userAddresses": "The addresses of the wallets concerned by the burn"
								}
							},
							"batchForcedTransfer(address[],address[],uint256[])": {
								"details": "function allowing to issue forced transfers in batch  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to transfer to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`  emits _fromList.length `Transfer` events",
									"_fromList": "The addresses of the senders",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchFreezePartialTokens(address[],uint256[])": {
								"details": "function allowing to freeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "the amount of tokens to freeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensFrozen` events",
									"_userAddresses": "The addresses on which tokens need to be frozen"
								}
							},
							"batchMint(address[],uint256[])": {
								"details": "function allowing to mint tokens in batch  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to mint to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits _toList.length `Transfer` events",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchSetAddressFrozen(address[],bool[])": {
								"details": "function allowing to set frozen addresses in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_freeze": "Frozen status of the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `AddressFrozen` events",
									"_userAddresses": "The addresses for which to update frozen status"
								}
							},
							"batchTransfer(address[],uint256[])": {
								"details": "function allowing to issue transfers in batch  Require that the msg.sender and `to` addresses are not frozen.  Require that the total value should not exceed available balance.  Require that the `to` addresses are all verified addresses,  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to transfer to the corresponding receiver  emits _toList.length `Transfer` events",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchUnfreezePartialTokens(address[],uint256[])": {
								"details": "function allowing to unfreeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "the amount of tokens to unfreeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensUnfrozen` events",
									"_userAddresses": "The addresses on which tokens need to be unfrozen"
								}
							},
							"burn(address,uint256)": {
								"details": "burn tokens on a wallet  In case the `account` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `value` amount  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the burn, in such a case, the remaining balance on the `account`  is 100% composed of frozen tokens post-transaction.",
								"params": {
									"_amount": "Amount of tokens to burn.  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`  emits a `Transfer` event",
									"_userAddress": "Address to burn the tokens from."
								}
							},
							"compliance()": {
								"details": "Returns the Compliance contract linked to the token"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 1 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including balanceOf() and transfer()."
							},
							"forcedTransfer(address,address,uint256)": {
								"details": "force a transfer of tokens between 2 whitelisted wallets  In case the `from` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `amount`  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the transfer, in such a case, the remaining balance on the `from`  account is 100% composed of frozen tokens post-transfer.  Require that the `to` address is a verified address,",
								"params": {
									"_amount": "The number of tokens to transfer",
									"_from": "The address of the sender",
									"_to": "The address of the receiver"
								},
								"returns": {
									"_0": "`true` if successful and revert if unsuccessful  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`  emits a `Transfer` event"
								}
							},
							"freezePartialTokens(address,uint256)": {
								"details": "freezes token amount specified for given address.",
								"params": {
									"_amount": "Amount of Tokens to be frozen  This function can only be called by a wallet set as agent of the token  emits a `TokensFrozen` event",
									"_userAddress": "The address for which to update frozen tokens"
								}
							},
							"getFrozenTokens(address)": {
								"details": "Returns the amount of tokens that are partially frozen on a wallet  the amount of frozen tokens is always <= to the total balance of the wallet",
								"params": {
									"_userAddress": "the address of the wallet on which getFrozenTokens is called"
								}
							},
							"identityRegistry()": {
								"details": "Returns the Identity Registry linked to the token"
							},
							"isFrozen(address)": {
								"details": "Returns the freezing status of a wallet  if isFrozen returns `true` the wallet is frozen  if isFrozen returns `false` the wallet is not frozen  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by  a partial freeze or the whole token could be blocked by pause",
								"params": {
									"_userAddress": "the address of the wallet on which isFrozen is called"
								}
							},
							"mint(address,uint256)": {
								"details": "mint tokens on a wallet  Improved version of default mint method. Tokens can be minted  to an address if only it is a verified address as per the security token.",
								"params": {
									"_amount": "Amount of tokens to mint.  This function can only be called by a wallet set as agent of the token  emits a `Transfer` event",
									"_to": "Address to mint the tokens to."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"onchainID()": {
								"details": "Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent."
							},
							"pause()": {
								"details": "pauses the token contract, when contract is paused investors cannot transfer tokens anymore  This function can only be called by a wallet set as agent of the token  emits a `Paused` event"
							},
							"recoveryAddress(address,address,address)": {
								"details": "recovery function used to force transfer tokens from a  lost wallet to a new wallet for an investor.",
								"params": {
									"_investorOnchainID": "the onchainID of the investor asking for a recovery  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful  emits a `Transfer` event if the recovery process is successful  emits a `RecoverySuccess` event if the recovery process is successful  emits a `RecoveryFails` event if the recovery process fails",
									"_lostWallet": "the wallet that the investor lost",
									"_newWallet": "the newly provided wallet on which tokens have to be transferred"
								}
							},
							"setAddressFrozen(address,bool)": {
								"details": "sets an address frozen status for this token.",
								"params": {
									"_freeze": "Frozen status of the address  This function can only be called by a wallet set as agent of the token  emits an `AddressFrozen` event",
									"_userAddress": "The address for which to update frozen status"
								}
							},
							"setCompliance(address)": {
								"details": "sets the compliance contract of the token",
								"params": {
									"_compliance": "the address of the compliance contract to set  Only the owner of the token smart contract can call this function  calls bindToken on the compliance contract  emits a `ComplianceAdded` event"
								}
							},
							"setIdentityRegistry(address)": {
								"details": "sets the Identity Registry for the token",
								"params": {
									"_identityRegistry": "the address of the Identity Registry to set  Only the owner of the token smart contract can call this function  emits an `IdentityRegistryAdded` event"
								}
							},
							"setOnchainID(address)": {
								"details": "sets the onchain ID of the token",
								"params": {
									"_onchainID": "the address of the onchain ID to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"unfreezePartialTokens(address,uint256)": {
								"details": "unfreezes token amount specified for given address",
								"params": {
									"_amount": "Amount of Tokens to be unfrozen  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event",
									"_userAddress": "The address for which to update frozen tokens"
								}
							},
							"unpause()": {
								"details": "unpauses the token contract, when contract is unpaused investors can transfer tokens  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens  This function can only be called by a wallet set as agent of the token  emits an `Unpaused` event"
							},
							"version()": {
								"details": "Returns the TREX version of the token. current version is 3.0.0"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"batchBurn(address[],uint256[])": "4a6cc677",
							"batchForcedTransfer(address[],address[],uint256[])": "42a47abc",
							"batchFreezePartialTokens(address[],uint256[])": "fc7e5fa8",
							"batchMint(address[],uint256[])": "68573107",
							"batchSetAddressFrozen(address[],bool[])": "1a7af379",
							"batchTransfer(address[],uint256[])": "88d695b2",
							"batchUnfreezePartialTokens(address[],uint256[])": "4710362d",
							"burn(address,uint256)": "9dc29fac",
							"compliance()": "6290865d",
							"decimals()": "313ce567",
							"forcedTransfer(address,address,uint256)": "9fc1d0e7",
							"freezePartialTokens(address,uint256)": "125c4a33",
							"getFrozenTokens(address)": "158b1a57",
							"identityRegistry()": "134e18f4",
							"isFrozen(address)": "e5839836",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"onchainID()": "aba63705",
							"pause()": "8456cb59",
							"recoveryAddress(address,address,address)": "9285948a",
							"setAddressFrozen(address,bool)": "c69c09cf",
							"setCompliance(address)": "f8981789",
							"setIdentityRegistry(address)": "cbf3f861",
							"setOnchainID(address)": "3d1ddc5b",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unfreezePartialTokens(address,uint256)": "1fe56f7d",
							"unpause()": "3f4ba83a",
							"version()": "54fd4d50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isFrozen\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"ComplianceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"RecoverySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOnchainID\",\"type\":\"address\"}],\"name\":\"UpdatedOnchainID\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchForcedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchFreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_freeze\",\"type\":\"bool[]\"}],\"name\":\"batchSetAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUnfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getFrozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistry\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"recoveryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"setAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"setIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"setOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"batchBurn(address[],uint256[])\":{\"details\":\"function allowing to burn tokens in batch  Require that the `_userAddresses` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to burn from the corresponding wallets  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `Transfer` events\",\"_userAddresses\":\"The addresses of the wallets concerned by the burn\"}},\"batchForcedTransfer(address[],address[],uint256[])\":{\"details\":\"function allowing to issue forced transfers in batch  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to transfer to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`  emits _fromList.length `Transfer` events\",\"_fromList\":\"The addresses of the senders\",\"_toList\":\"The addresses of the receivers\"}},\"batchFreezePartialTokens(address[],uint256[])\":{\"details\":\"function allowing to freeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"the amount of tokens to freeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensFrozen` events\",\"_userAddresses\":\"The addresses on which tokens need to be frozen\"}},\"batchMint(address[],uint256[])\":{\"details\":\"function allowing to mint tokens in batch  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to mint to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits _toList.length `Transfer` events\",\"_toList\":\"The addresses of the receivers\"}},\"batchSetAddressFrozen(address[],bool[])\":{\"details\":\"function allowing to set frozen addresses in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_freeze\":\"Frozen status of the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `AddressFrozen` events\",\"_userAddresses\":\"The addresses for which to update frozen status\"}},\"batchTransfer(address[],uint256[])\":{\"details\":\"function allowing to issue transfers in batch  Require that the msg.sender and `to` addresses are not frozen.  Require that the total value should not exceed available balance.  Require that the `to` addresses are all verified addresses,  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to transfer to the corresponding receiver  emits _toList.length `Transfer` events\",\"_toList\":\"The addresses of the receivers\"}},\"batchUnfreezePartialTokens(address[],uint256[])\":{\"details\":\"function allowing to unfreeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"the amount of tokens to unfreeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensUnfrozen` events\",\"_userAddresses\":\"The addresses on which tokens need to be unfrozen\"}},\"burn(address,uint256)\":{\"details\":\"burn tokens on a wallet  In case the `account` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `value` amount  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the burn, in such a case, the remaining balance on the `account`  is 100% composed of frozen tokens post-transaction.\",\"params\":{\"_amount\":\"Amount of tokens to burn.  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`  emits a `Transfer` event\",\"_userAddress\":\"Address to burn the tokens from.\"}},\"compliance()\":{\"details\":\"Returns the Compliance contract linked to the token\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 1 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\"},\"forcedTransfer(address,address,uint256)\":{\"details\":\"force a transfer of tokens between 2 whitelisted wallets  In case the `from` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `amount`  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the transfer, in such a case, the remaining balance on the `from`  account is 100% composed of frozen tokens post-transfer.  Require that the `to` address is a verified address,\",\"params\":{\"_amount\":\"The number of tokens to transfer\",\"_from\":\"The address of the sender\",\"_to\":\"The address of the receiver\"},\"returns\":{\"_0\":\"`true` if successful and revert if unsuccessful  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`  emits a `Transfer` event\"}},\"freezePartialTokens(address,uint256)\":{\"details\":\"freezes token amount specified for given address.\",\"params\":{\"_amount\":\"Amount of Tokens to be frozen  This function can only be called by a wallet set as agent of the token  emits a `TokensFrozen` event\",\"_userAddress\":\"The address for which to update frozen tokens\"}},\"getFrozenTokens(address)\":{\"details\":\"Returns the amount of tokens that are partially frozen on a wallet  the amount of frozen tokens is always <= to the total balance of the wallet\",\"params\":{\"_userAddress\":\"the address of the wallet on which getFrozenTokens is called\"}},\"identityRegistry()\":{\"details\":\"Returns the Identity Registry linked to the token\"},\"isFrozen(address)\":{\"details\":\"Returns the freezing status of a wallet  if isFrozen returns `true` the wallet is frozen  if isFrozen returns `false` the wallet is not frozen  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by  a partial freeze or the whole token could be blocked by pause\",\"params\":{\"_userAddress\":\"the address of the wallet on which isFrozen is called\"}},\"mint(address,uint256)\":{\"details\":\"mint tokens on a wallet  Improved version of default mint method. Tokens can be minted  to an address if only it is a verified address as per the security token.\",\"params\":{\"_amount\":\"Amount of tokens to mint.  This function can only be called by a wallet set as agent of the token  emits a `Transfer` event\",\"_to\":\"Address to mint the tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onchainID()\":{\"details\":\"Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent.\"},\"pause()\":{\"details\":\"pauses the token contract, when contract is paused investors cannot transfer tokens anymore  This function can only be called by a wallet set as agent of the token  emits a `Paused` event\"},\"recoveryAddress(address,address,address)\":{\"details\":\"recovery function used to force transfer tokens from a  lost wallet to a new wallet for an investor.\",\"params\":{\"_investorOnchainID\":\"the onchainID of the investor asking for a recovery  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful  emits a `Transfer` event if the recovery process is successful  emits a `RecoverySuccess` event if the recovery process is successful  emits a `RecoveryFails` event if the recovery process fails\",\"_lostWallet\":\"the wallet that the investor lost\",\"_newWallet\":\"the newly provided wallet on which tokens have to be transferred\"}},\"setAddressFrozen(address,bool)\":{\"details\":\"sets an address frozen status for this token.\",\"params\":{\"_freeze\":\"Frozen status of the address  This function can only be called by a wallet set as agent of the token  emits an `AddressFrozen` event\",\"_userAddress\":\"The address for which to update frozen status\"}},\"setCompliance(address)\":{\"details\":\"sets the compliance contract of the token\",\"params\":{\"_compliance\":\"the address of the compliance contract to set  Only the owner of the token smart contract can call this function  calls bindToken on the compliance contract  emits a `ComplianceAdded` event\"}},\"setIdentityRegistry(address)\":{\"details\":\"sets the Identity Registry for the token\",\"params\":{\"_identityRegistry\":\"the address of the Identity Registry to set  Only the owner of the token smart contract can call this function  emits an `IdentityRegistryAdded` event\"}},\"setOnchainID(address)\":{\"details\":\"sets the onchain ID of the token\",\"params\":{\"_onchainID\":\"the address of the onchain ID to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"unfreezePartialTokens(address,uint256)\":{\"details\":\"unfreezes token amount specified for given address\",\"params\":{\"_amount\":\"Amount of Tokens to be unfrozen  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event\",\"_userAddress\":\"The address for which to update frozen tokens\"}},\"unpause()\":{\"details\":\"unpauses the token contract, when contract is unpaused investors can transfer tokens  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens  This function can only be called by a wallet set as agent of the token  emits an `Unpaused` event\"},\"version()\":{\"details\":\"Returns the TREX version of the token. current version is 3.0.0\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddressFrozen(address,bool,address)\":{\"notice\":\"this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet\"},\"ComplianceAdded(address)\":{\"notice\":\"this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token\"},\"IdentityRegistryAdded(address)\":{\"notice\":\"this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token\"},\"RecoverySuccess(address,address,address)\":{\"notice\":\"this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\"},\"TokensFrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen\"},\"TokensUnfrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen\"},\"UpdatedOnchainID(address)\":{\"notice\":\"this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/IToken.sol\":\"IToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0xbc47d0a331c5a816e8eee459239de4d312a578fbad75985af02ffb04e0389743\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://39a4cdc9fe0479f17ace597e185ee1f179f540af838a5a331244150163bb10f6\",\"dweb:/ipfs/QmWQqSWAgndgbYT6pyHZ9SexrJHZy3XyQ3GMpLRwT743eL\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]},\"contracts/token/IToken.sol\":{\"keccak256\":\"0x2bd803bf4c94c206a40052ad13cf63fcf6d6c1d13eb0ff6e2513863faa159ae6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fff7c48b75dccd5998e7e68dc219331db7b7a6421d9feb66ea8694cb286bf566\",\"dweb:/ipfs/QmVSvtaXgVjuivmc9sNchy1PRh1uQGjHd1iszi5gXHHCvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AddressFrozen(address,bool,address)": {
								"notice": "this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet"
							},
							"ComplianceAdded(address)": {
								"notice": "this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token"
							},
							"IdentityRegistryAdded(address)": {
								"notice": "this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token"
							},
							"RecoverySuccess(address,address,address)": {
								"notice": "this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery"
							},
							"TokensFrozen(address,uint256)": {
								"notice": "this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen"
							},
							"TokensUnfrozen(address,uint256)": {
								"notice": "this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen"
							},
							"UpdatedOnchainID(address)": {
								"notice": "this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 50,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:0"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 50,
							"sourceUnit": 329,
							"src": "61:64:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3,
										"name": "IIdentity",
										"nameLocations": [
											"153:9:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 328,
										"src": "153:9:0"
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "153:9:0"
								}
							],
							"canonicalName": "IClaimIssuer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 49,
							"linearizedBaseContracts": [
								49,
								328,
								304,
								196
							],
							"name": "IClaimIssuer",
							"nameLocation": "137:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 5,
										"nodeType": "StructuredDocumentation",
										"src": "170:126:0",
										"text": " @dev Emitted when a claim is revoked.\n Specification: MUST be triggered when revoking a claim."
									},
									"eventSelector": "7f484e37f24c0a92f81dd74afa3027b3ea31f2e9fb6b9fa29fe9865f81ac5569",
									"id": 9,
									"name": "ClaimRevoked",
									"nameLocation": "307:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "334:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "320:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 6,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "320:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:25:0"
									},
									"src": "301:44:0"
								},
								{
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "351:351:0",
										"text": " @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n @notice will fetch the claim from the identity contract (unsafe).\n @param _claimId the id of the claim\n @param _identity the address of the identity contract\n @return isRevoked true when the claim is revoked"
									},
									"functionSelector": "73c33708",
									"id": 19,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeClaim",
									"nameLocation": "716:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "736:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "728:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 11,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "754:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "746:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:37:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "782:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 16,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "782:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "781:6:0"
									},
									"scope": 49,
									"src": "707:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "794:169:0",
										"text": " @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n @param signature the signature of the claim"
									},
									"functionSelector": "9f7f9edd",
									"id": 25,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeClaimBySignature",
									"nameLocation": "977:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1015:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1000:24:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 21,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1000:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:26:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:0:0"
									},
									"scope": 49,
									"src": "968:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1041:181:0",
										"text": " @dev Returns revocation status of a claim.\n @param _sig the signature of the claim\n @return isRevoked true if the claim is revoked and false otherwise"
									},
									"functionSelector": "2646b264",
									"id": 33,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimRevoked",
									"nameLocation": "1236:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "_sig",
												"nameLocation": "1266:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "1251:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 27,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1251:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:21:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "1295:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 30,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1295:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1294:6:0"
									},
									"scope": 49,
									"src": "1227:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										327
									],
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "1307:334:0",
										"text": " @dev Checks if a claim is valid.\n @param _identity the identity contract related to the claim\n @param claimTopic the claim topic of the claim\n @param sig the signature of the claim\n @param data the data field of the claim\n @return claimValid true if the claim is valid, false otherwise"
									},
									"functionSelector": "c0969a6e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimValid",
									"nameLocation": "1655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "1687:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1677:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 36,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 35,
														"name": "IIdentity",
														"nameLocations": [
															"1677:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1677:9:0"
													},
													"referencedDeclaration": 328,
													"src": "1677:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "1714:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1706:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1706:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "sig",
												"nameLocation": "1749:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1734:18:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 40,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1734:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1777:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1762:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 42,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1762:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1667:115:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1810:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 45,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1810:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1809:6:0"
									},
									"scope": 49,
									"src": "1646:170:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 50,
							"src": "127:1691:0",
							"usedErrors": [],
							"usedEvents": [
								9,
								59,
								70,
								81,
								92,
								101,
								110,
								216,
								233,
								250
							]
						}
					],
					"src": "36:1783:0"
				},
				"id": 0
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IERC734.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						]
					},
					"id": 197,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 51,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC734",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 52,
								"nodeType": "StructuredDocumentation",
								"src": "61:84:1",
								"text": " @dev interface of the ERC734 (Key Holder) standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 196,
							"linearizedBaseContracts": [
								196
							],
							"name": "IERC734",
							"nameLocation": "156:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "171:156:1",
										"text": " @dev Emitted when an execution request was approved.\n Specification: MUST be triggered when approve was successfully called."
									},
									"eventSelector": "b3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8",
									"id": 59,
									"name": "Approved",
									"nameLocation": "338:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "363:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "347:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "347:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "381:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "376:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 56,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "376:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "346:44:1"
									},
									"src": "332:59:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "397:214:1",
										"text": " @dev Emitted when an execute operation was approved and successfully performed.\n Specification: MUST be triggered when approve was called and the execution was successfully approved."
									},
									"eventSelector": "1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8",
									"id": 70,
									"name": "Executed",
									"nameLocation": "622:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "647:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "631:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 61,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "631:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "676:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "660:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "696:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "680:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "680:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "709:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "703:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 67,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "703:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "630:84:1"
									},
									"src": "616:99:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "721:171:1",
										"text": " @dev Emitted when an execution request was performed via `execute`.\n Specification: MUST be triggered when execute was successfully called."
									},
									"eventSelector": "8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8",
									"id": 81,
									"name": "ExecutionRequested",
									"nameLocation": "903:18:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "938:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "922:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "922:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "967:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "951:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "987:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "971:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1000:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "994:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 78,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "994:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "921:84:1"
									},
									"src": "897:109:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "1012:151:1",
										"text": " @dev Emitted when an execute operation was called and failed\n Specification: MUST be triggered when execute call failed"
									},
									"eventSelector": "e10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a68",
									"id": 92,
									"name": "ExecutionFailed",
									"nameLocation": "1174:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "1206:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1190:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1190:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1235:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1219:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1255:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1239:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1239:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1268:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1262:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 89,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1262:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1189:84:1"
									},
									"src": "1168:106:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "1280:153:1",
										"text": " @dev Emitted when a key was added to the Identity.\n Specification: MUST be triggered when addKey was successfully called."
									},
									"eventSelector": "480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e9",
									"id": 101,
									"name": "KeyAdded",
									"nameLocation": "1444:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1469:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1453:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1453:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "purpose",
												"nameLocation": "1490:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1474:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "1515:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1499:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1499:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1452:71:1"
									},
									"src": "1438:86:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "1530:160:1",
										"text": " @dev Emitted when a key was removed from the Identity.\n Specification: MUST be triggered when removeKey was successfully called."
									},
									"eventSelector": "585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d3397",
									"id": 110,
									"name": "KeyRemoved",
									"nameLocation": "1701:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1728:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1712:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 103,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1712:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "purpose",
												"nameLocation": "1749:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1733:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": true,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "1774:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1758:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1758:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1711:71:1"
									},
									"src": "1695:88:1"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "1789:319:1",
										"text": " @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n Triggers Event: `KeyAdded`\n Specification: MUST only be done by keys of purpose 1, or the identity\n itself. If it's the identity itself, the approval process will determine its approval."
									},
									"functionSelector": "1d381240",
									"id": 122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addKey",
									"nameLocation": "2122:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "2137:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2129:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2129:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "2151:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2143:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "_keyType",
												"nameLocation": "2169:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2161:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2161:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:50:1"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2202:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2197:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2197:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2196:14:1"
									},
									"scope": 196,
									"src": "2113:98:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "2217:201:1",
										"text": " @dev Approves an execution.\n Triggers Event: `Approved`\n Triggers on execution successful Event: `Executed`\n Triggers on execution failure Event: `ExecutionFailed`"
									},
									"functionSelector": "747442d3",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2432:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2448:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2440:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "_approve",
												"nameLocation": "2458:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2453:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 126,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2453:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:28:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2491:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2486:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 129,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2486:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2485:14:1"
									},
									"scope": 196,
									"src": "2423:77:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2506:290:1",
										"text": " @dev Removes _purpose for _key from the identity.\n Triggers Event: `KeyRemoved`\n Specification: MUST only be done by keys of purpose 1, or the identity itself.\n If it's the identity itself, the approval process will determine its approval."
									},
									"functionSelector": "53d413c5",
									"id": 142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeKey",
									"nameLocation": "2810:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "2828:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2820:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 134,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "2842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2834:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2834:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2819:32:1"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2875:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2870:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2870:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2869:14:1"
									},
									"scope": 196,
									"src": "2801:83:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "2890:481:1",
										"text": " @dev Passes an execution instruction to an ERC734 identity.\n How the execution is handled is up to the identity implementation:\n An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n approve this execution.\n Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n Triggers Event: ExecutionRequested\n Triggers on direct execution Event: Executed"
									},
									"functionSelector": "b61d27f6",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "3385:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "3401:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3393:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "3414:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3406:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "3437:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3422:20:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 148,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3422:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3392:51:1"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "3478:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3470:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3470:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3469:21:1"
									},
									"scope": 196,
									"src": "3376:115:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "3497:78:1",
										"text": " @dev Returns the full key data, if present in the identity."
									},
									"functionSelector": "12aaac70",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKey",
									"nameLocation": "3589:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "3604:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3596:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 156,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:14:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "purposes",
												"nameLocation": "3650:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3633:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 159,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3633:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 160,
													"nodeType": "ArrayTypeName",
													"src": "3633:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "3668:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3660:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3660:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "3685:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3677:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 164,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3677:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3632:57:1"
									},
									"scope": 196,
									"src": "3580:110:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "3696:75:1",
										"text": " @dev Returns the list of purposes associated with a key."
									},
									"functionSelector": "fb307b34",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKeyPurposes",
									"nameLocation": "3785:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "3808:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "3800:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 169,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3800:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3799:14:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "_purposes",
												"nameLocation": "3853:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "3836:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 172,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3836:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 173,
													"nodeType": "ArrayTypeName",
													"src": "3836:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3835:28:1"
									},
									"scope": 196,
									"src": "3776:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "3870:85:1",
										"text": " @dev Returns an array of public key bytes32 held by this identity."
									},
									"functionSelector": "9010f726",
									"id": 185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKeysByPurpose",
									"nameLocation": "3969:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "3994:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "3986:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3986:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3985:18:1"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "4044:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "4027:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 181,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4027:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 182,
													"nodeType": "ArrayTypeName",
													"src": "4027:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4026:23:1"
									},
									"scope": 196,
									"src": "3960:90:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "4056:127:1",
										"text": " @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
									},
									"functionSelector": "d202158d",
									"id": 195,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "keyHasPurpose",
									"nameLocation": "4197:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "4219:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4211:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 187,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4211:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "4233:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4225:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4225:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4210:32:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "exists",
												"nameLocation": "4271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4266:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 192,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4266:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4265:13:1"
									},
									"scope": 196,
									"src": "4188:91:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 197,
							"src": "146:4135:1",
							"usedErrors": [],
							"usedEvents": [
								59,
								70,
								81,
								92,
								101,
								110
							]
						}
					],
					"src": "36:4246:1"
				},
				"id": 1
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IERC735.sol",
					"exportedSymbols": {
						"IERC735": [
							304
						]
					},
					"id": 305,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 198,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC735",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 199,
								"nodeType": "StructuredDocumentation",
								"src": "61:86:2",
								"text": " @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 304,
							"linearizedBaseContracts": [
								304
							],
							"name": "IERC735",
							"nameLocation": "158:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "173:139:2",
										"text": " @dev Emitted when a claim was added.\n Specification: MUST be triggered when a claim was successfully added."
									},
									"eventSelector": "46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5",
									"id": 216,
									"name": "ClaimAdded",
									"nameLocation": "323:10:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "359:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "343:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 201,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "343:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "392:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "376:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "415:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "407:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "447:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "431:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "469:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "463:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 209,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "463:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "494:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "488:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 211,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "488:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "515:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "508:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 213,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "508:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "333:186:2"
									},
									"src": "317:203:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "526:146:2",
										"text": " @dev Emitted when a claim was removed.\n Specification: MUST be triggered when removeClaim was successfully called."
									},
									"eventSelector": "3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a",
									"id": 233,
									"name": "ClaimRemoved",
									"nameLocation": "683:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "721:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "705:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 218,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "754:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "738:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "777:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "769:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "809:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "793:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "831:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "825:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 226,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "825:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "856:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "850:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 228,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "850:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "877:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "870:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 230,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "870:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "695:186:2"
									},
									"src": "677:205:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "888:166:2",
										"text": " @dev Emitted when a claim was changed.\n Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
									},
									"eventSelector": "3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b13",
									"id": 250,
									"name": "ClaimChanged",
									"nameLocation": "1065:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "1103:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1087:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 235,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "1136:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1120:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1120:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "1159:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1151:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "1191:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1175:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1175:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 244,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1213:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1207:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 243,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1207:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1238:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1232:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 245,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1232:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "1259:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1252:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 247,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1252:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1077:186:2"
									},
									"src": "1059:205:2"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "1270:438:2",
										"text": " @dev Add or update a claim.\n Triggers Event: `ClaimAdded`, `ClaimChanged`\n Specification: Add or update a claim from an issuer.\n _signature is a signed message of the following structure:\n `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
									},
									"functionSelector": "b1a34e0d",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaim",
									"nameLocation": "1722:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "_topic",
												"nameLocation": "1748:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1740:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1740:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "_scheme",
												"nameLocation": "1772:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1764:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1764:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "1797:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1789:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1789:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "_signature",
												"nameLocation": "1828:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1813:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 258,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1813:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "1863:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1848:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 260,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1848:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1894:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1878:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 262,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1878:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:169:2"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "claimRequestId",
												"nameLocation": "1930:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1922:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 265,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1922:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1921:24:2"
									},
									"scope": 304,
									"src": "1713:233:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "1952:193:2",
										"text": " @dev Removes a claim.\n Triggers Event: `ClaimRemoved`\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
									},
									"functionSelector": "4eee424a",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaim",
									"nameLocation": "2159:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "2179:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "2171:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2170:18:2"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2212:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "2207:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2207:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2206:14:2"
									},
									"scope": 304,
									"src": "2150:71:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "2227:154:2",
										"text": " @dev Get a claim by its ID.\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
									},
									"functionSelector": "c9100bcb",
									"id": 294,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaim",
									"nameLocation": "2395:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "2412:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2404:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 278,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2404:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2403:18:2"
									},
									"returnParameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "2465:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2457:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2457:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "2488:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2480:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2480:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "2512:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2504:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2504:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2541:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2528:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 287,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2528:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2573:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2560:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 289,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2560:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "2601:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2587:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2587:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2447:158:2"
									},
									"scope": 304,
									"src": "2386:220:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "2612:63:2",
										"text": " @dev Returns an array of claim IDs by topic."
									},
									"functionSelector": "80e9e9e1",
									"id": 303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIdsByTopic",
									"nameLocation": "2689:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "_topic",
												"nameLocation": "2716:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "2708:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2708:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2707:16:2"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "claimIds",
												"nameLocation": "2763:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "2746:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 299,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2746:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 300,
													"nodeType": "ArrayTypeName",
													"src": "2746:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2745:27:2"
									},
									"scope": 304,
									"src": "2680:93:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 305,
							"src": "148:2627:2",
							"usedErrors": [],
							"usedEvents": [
								216,
								233,
								250
							]
						}
					],
					"src": "36:2740:2"
				},
				"id": 2
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 329,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 306,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:3"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IERC734.sol",
							"file": "./IERC734.sol",
							"id": 307,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 197,
							"src": "61:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IERC735.sol",
							"file": "./IERC735.sol",
							"id": 308,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 305,
							"src": "85:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 309,
										"name": "IERC734",
										"nameLocations": [
											"178:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 196,
										"src": "178:7:3"
									},
									"id": 310,
									"nodeType": "InheritanceSpecifier",
									"src": "178:7:3"
								},
								{
									"baseName": {
										"id": 311,
										"name": "IERC735",
										"nameLocations": [
											"187:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 304,
										"src": "187:7:3"
									},
									"id": 312,
									"nodeType": "InheritanceSpecifier",
									"src": "187:7:3"
								}
							],
							"canonicalName": "IIdentity",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 328,
							"linearizedBaseContracts": [
								328,
								304,
								196
							],
							"name": "IIdentity",
							"nameLocation": "165:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "201:334:3",
										"text": " @dev Checks if a claim is valid.\n @param _identity the identity contract related to the claim\n @param claimTopic the claim topic of the claim\n @param sig the signature of the claim\n @param data the data field of the claim\n @return claimValid true if the claim is valid, false otherwise"
									},
									"functionSelector": "c0969a6e",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimValid",
									"nameLocation": "549:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "581:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "571:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 315,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 314,
														"name": "IIdentity",
														"nameLocations": [
															"571:9:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "571:9:3"
													},
													"referencedDeclaration": 328,
													"src": "571:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "608:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "600:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "600:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "sig",
												"nameLocation": "643:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "628:18:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 319,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "628:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "671:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "656:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "656:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:115:3"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "704:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "704:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "703:6:3"
									},
									"scope": 328,
									"src": "540:170:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 329,
							"src": "155:557:3",
							"usedErrors": [],
							"usedEvents": [
								59,
								70,
								81,
								92,
								101,
								110,
								216,
								233,
								250
							]
						}
					],
					"src": "36:677:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							624
						],
						"Context": [
							815
						],
						"ERC165": [
							839
						],
						"IAccessControl": [
							707
						]
					},
					"id": 625,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 330,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 332,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 625,
							"sourceUnit": 708,
							"src": "134:52:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 331,
										"name": "IAccessControl",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 707,
										"src": "142:14:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 334,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 625,
							"sourceUnit": 816,
							"src": "187:45:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 333,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 815,
										"src": "195:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 336,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 625,
							"sourceUnit": 840,
							"src": "233:57:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 335,
										"name": "ERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 839,
										"src": "241:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 338,
										"name": "Context",
										"nameLocations": [
											"1988:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 815,
										"src": "1988:7:4"
									},
									"id": 339,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:7:4"
								},
								{
									"baseName": {
										"id": 340,
										"name": "IAccessControl",
										"nameLocations": [
											"1997:14:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 707,
										"src": "1997:14:4"
									},
									"id": 341,
									"nodeType": "InheritanceSpecifier",
									"src": "1997:14:4"
								},
								{
									"baseName": {
										"id": 342,
										"name": "ERC165",
										"nameLocations": [
											"2013:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 839,
										"src": "2013:6:4"
									},
									"id": 343,
									"nodeType": "InheritanceSpecifier",
									"src": "2013:6:4"
								}
							],
							"canonicalName": "AccessControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 337,
								"nodeType": "StructuredDocumentation",
								"src": "292:1660:4",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."
							},
							"fullyImplemented": true,
							"id": 624,
							"linearizedBaseContracts": [
								624,
								839,
								851,
								707,
								815
							],
							"name": "AccessControl",
							"nameLocation": "1971:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 350,
									"members": [
										{
											"constant": false,
											"id": 347,
											"mutability": "mutable",
											"name": "hasRole",
											"nameLocation": "2085:7:4",
											"nodeType": "VariableDeclaration",
											"scope": 350,
											"src": "2052:40:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 346,
												"keyName": "account",
												"keyNameLocation": "2068:7:4",
												"keyType": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "2052:32:4",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 345,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2079:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 349,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "2110:9:4",
											"nodeType": "VariableDeclaration",
											"scope": 350,
											"src": "2102:17:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 348,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "2102:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "2033:8:4",
									"nodeType": "StructDefinition",
									"scope": 624,
									"src": "2026:100:4",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 355,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2174:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 624,
									"src": "2132:48:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 354,
										"keyName": "role",
										"keyNameLocation": "2148:4:4",
										"keyType": {
											"id": 351,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "2140:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "2132:33:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 353,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 352,
												"name": "RoleData",
												"nameLocations": [
													"2156:8:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 350,
												"src": "2156:8:4"
											},
											"referencedDeclaration": 350,
											"src": "2156:8:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$350_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 358,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2211:18:4",
									"nodeType": "VariableDeclaration",
									"scope": 624,
									"src": "2187:49:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 356,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2187:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 357,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2232:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "2454:44:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 364,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "2475:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 363,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															422,
															443
														],
														"referencedDeclaration": 422,
														"src": "2464:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2464:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 366,
												"nodeType": "ExpressionStatement",
												"src": "2464:16:4"
											},
											{
												"id": 367,
												"nodeType": "PlaceholderStatement",
												"src": "2490:1:4"
											}
										]
									},
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "2243:174:4",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."
									},
									"id": 369,
									"name": "onlyRole",
									"nameLocation": "2431:8:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2448:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2440:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 360,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:14:4"
									},
									"src": "2422:76:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										838
									],
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "2656:111:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 383,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 378,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "2673:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 380,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 707,
																		"src": "2693:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$707_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$707_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 379,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2688:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 381,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2688:20:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$707",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "2709:11:4",
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2688:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2673:47:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 386,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "2748:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 384,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2724:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$624_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2730:17:4",
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 838,
															"src": "2724:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2724:36:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2673:87:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 377,
												"id": 389,
												"nodeType": "Return",
												"src": "2666:94:4"
											}
										]
									},
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "2504:56:4",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2574:17:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 374,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2632:8:4"
									},
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2599:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2592:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 371,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2592:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2591:20:4"
									},
									"returnParameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2650:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 375,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2650:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2649:6:4"
									},
									"scope": 624,
									"src": "2565:202:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										674
									],
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "2937:53:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 401,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 355,
																"src": "2954:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 403,
															"indexExpression": {
																"id": 402,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 394,
																"src": "2961:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2954:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$350_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 404,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2967:7:4",
														"memberName": "hasRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 347,
														"src": "2954:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 406,
													"indexExpression": {
														"id": 405,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "2975:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2954:29:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 400,
												"id": 407,
												"nodeType": "Return",
												"src": "2947:36:4"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "2773:76:4",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2863:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2879:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "2871:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2893:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "2885:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2885:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2870:31:4"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "2931:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 398,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2931:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2930:6:4"
									},
									"scope": 624,
									"src": "2854:136:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "3255:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 416,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3276:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 417,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 797,
																"src": "3282:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3282:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 415,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															422,
															443
														],
														"referencedDeclaration": 443,
														"src": "3265:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "3265:30:4"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "2996:198:4",
										"text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."
									},
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3208:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3227:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "3219:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 411,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3219:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3218:14:4"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:0:4"
									},
									"scope": 624,
									"src": "3199:103:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 442,
										"nodeType": "Block",
										"src": "3505:124:4",
										"statements": [
											{
												"condition": {
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3519:23:4",
													"subExpression": {
														"arguments": [
															{
																"id": 431,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "3528:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 432,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 427,
																"src": "3534:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 430,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "3520:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3520:22:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 441,
												"nodeType": "IfStatement",
												"src": "3515:108:4",
												"trueBody": {
													"id": 440,
													"nodeType": "Block",
													"src": "3544:79:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 436,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 427,
																		"src": "3598:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 437,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 425,
																		"src": "3607:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 435,
																	"name": "AccessControlUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "3565:32:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_bytes32_$returns$__$",
																		"typeString": "function (address,bytes32) pure"
																	}
																},
																"id": 438,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3565:47:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 439,
															"nodeType": "RevertStatement",
															"src": "3558:54:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "3308:119:4",
										"text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."
									},
									"id": 443,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3441:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3460:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "3452:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 424,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3452:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3474:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "3466:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3466:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3451:31:4"
									},
									"returnParameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3505:0:4"
									},
									"scope": 624,
									"src": "3432:197:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										682
									],
									"body": {
										"id": 456,
										"nodeType": "Block",
										"src": "3884:46:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 451,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "3901:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 453,
														"indexExpression": {
															"id": 452,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "3908:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3901:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$350_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3914:9:4",
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 349,
													"src": "3901:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 450,
												"id": 455,
												"nodeType": "Return",
												"src": "3894:29:4"
											}
										]
									},
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "3635:170:4",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "3819:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3840:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "3832:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 445,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3832:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3831:14:4"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "3875:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 448,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3875:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3874:9:4"
									},
									"scope": 624,
									"src": "3810:120:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										690
									],
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "4320:42:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 471,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "4341:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 472,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "4347:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 470,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "4330:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4330:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 474,
												"nodeType": "ExpressionStatement",
												"src": "4330:25:4"
											}
										]
									},
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "3936:285:4",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."
									},
									"functionSelector": "2f2ff15d",
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 466,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "4313:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 465,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 457,
														"src": "4300:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4300:18:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 468,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 464,
												"name": "onlyRole",
												"nameLocations": [
													"4291:8:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 369,
												"src": "4291:8:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "4291:28:4"
										}
									],
									"name": "grantRole",
									"nameLocation": "4235:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4253:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "4245:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 459,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4245:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4267:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "4259:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4259:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4244:31:4"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4320:0:4"
									},
									"scope": 624,
									"src": "4226:136:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										698
									],
									"body": {
										"id": 494,
										"nodeType": "Block",
										"src": "4737:43:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 490,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "4759:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 491,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "4765:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 489,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 623,
														"src": "4747:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4747:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "4747:26:4"
											}
										]
									},
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "4368:269:4",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "d547741f",
									"id": 495,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 485,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "4730:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 484,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 457,
														"src": "4717:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4717:18:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 487,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 483,
												"name": "onlyRole",
												"nameLocations": [
													"4708:8:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 369,
												"src": "4708:8:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "4708:28:4"
										}
									],
									"name": "revokeRole",
									"nameLocation": "4651:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4670:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "4662:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4662:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4684:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "4676:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4676:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:31:4"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4737:0:4"
									},
									"scope": 624,
									"src": "4642:138:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										706
									],
									"body": {
										"id": 517,
										"nodeType": "Block",
										"src": "5407:166:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 506,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 503,
														"name": "callerConfirmation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "5421:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 504,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 797,
															"src": "5443:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 505,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5443:12:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5421:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 511,
												"nodeType": "IfStatement",
												"src": "5417:102:4",
												"trueBody": {
													"id": 510,
													"nodeType": "Block",
													"src": "5457:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 507,
																	"name": "AccessControlBadConfirmation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 637,
																	"src": "5478:28:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5478:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 509,
															"nodeType": "RevertStatement",
															"src": "5471:37:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 513,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 498,
															"src": "5541:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 514,
															"name": "callerConfirmation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "5547:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 512,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 623,
														"src": "5529:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5529:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 516,
												"nodeType": "ExpressionStatement",
												"src": "5529:37:4"
											}
										]
									},
									"documentation": {
										"id": 496,
										"nodeType": "StructuredDocumentation",
										"src": "4786:537:4",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "36568abe",
									"id": 518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5337:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5358:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "5350:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 497,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5350:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "callerConfirmation",
												"nameLocation": "5372:18:4",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "5364:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5364:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5349:42:4"
									},
									"returnParameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5407:0:4"
									},
									"scope": 624,
									"src": "5328:245:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 545,
										"nodeType": "Block",
										"src": "5771:174:4",
										"statements": [
											{
												"assignments": [
													527
												],
												"declarations": [
													{
														"constant": false,
														"id": 527,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "5789:17:4",
														"nodeType": "VariableDeclaration",
														"scope": 545,
														"src": "5781:25:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 526,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5781:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 531,
												"initialValue": {
													"arguments": [
														{
															"id": 529,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "5822:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 528,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 457,
														"src": "5809:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5809:18:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5781:46:4"
											},
											{
												"expression": {
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 532,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 355,
																"src": "5837:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 534,
															"indexExpression": {
																"id": 533,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 521,
																"src": "5844:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5837:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$350_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 535,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5850:9:4",
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 349,
														"src": "5837:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 536,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 523,
														"src": "5862:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5837:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 538,
												"nodeType": "ExpressionStatement",
												"src": "5837:34:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 540,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "5903:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 541,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "5909:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 542,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 523,
															"src": "5928:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 539,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "5886:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5886:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 544,
												"nodeType": "EmitStatement",
												"src": "5881:57:4"
											}
										]
									},
									"documentation": {
										"id": 519,
										"nodeType": "StructuredDocumentation",
										"src": "5579:114:4",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "5707:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5729:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "5721:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 520,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "5743:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "5735:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 522,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:33:4"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5771:0:4"
									},
									"scope": 624,
									"src": "5698:247:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "6262:233:4",
										"statements": [
											{
												"condition": {
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "6276:23:4",
													"subExpression": {
														"arguments": [
															{
																"id": 557,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 549,
																"src": "6285:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 558,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 551,
																"src": "6291:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 556,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "6277:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 559,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6277:22:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 582,
													"nodeType": "Block",
													"src": "6452:37:4",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6473:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 555,
															"id": 581,
															"nodeType": "Return",
															"src": "6466:12:4"
														}
													]
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "6272:217:4",
												"trueBody": {
													"id": 579,
													"nodeType": "Block",
													"src": "6301:145:4",
													"statements": [
														{
															"expression": {
																"id": 568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 561,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 355,
																				"src": "6315:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 563,
																			"indexExpression": {
																				"id": 562,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 549,
																				"src": "6322:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6315:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$350_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6328:7:4",
																		"memberName": "hasRole",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 347,
																		"src": "6315:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 566,
																	"indexExpression": {
																		"id": 565,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 551,
																		"src": "6336:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6315:29:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 567,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6347:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "6315:36:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 569,
															"nodeType": "ExpressionStatement",
															"src": "6315:36:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 571,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "6382:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 572,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 551,
																		"src": "6388:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 573,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 797,
																			"src": "6397:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6397:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 570,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 655,
																	"src": "6370:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 575,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6370:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 576,
															"nodeType": "EmitStatement",
															"src": "6365:45:4"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6431:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 555,
															"id": 578,
															"nodeType": "Return",
															"src": "6424:11:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 547,
										"nodeType": "StructuredDocumentation",
										"src": "5951:223:4",
										"text": " @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."
									},
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "6188:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6207:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "6199:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 548,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6199:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6221:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "6213:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6213:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6198:31:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "6256:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 553,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6256:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6255:6:4"
									},
									"scope": 624,
									"src": "6179:316:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 622,
										"nodeType": "Block",
										"src": "6814:233:4",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 596,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "6836:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 597,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "6842:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 595,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "6828:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6828:22:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 620,
													"nodeType": "Block",
													"src": "7004:37:4",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 618,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7025:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 594,
															"id": 619,
															"nodeType": "Return",
															"src": "7018:12:4"
														}
													]
												},
												"id": 621,
												"nodeType": "IfStatement",
												"src": "6824:217:4",
												"trueBody": {
													"id": 617,
													"nodeType": "Block",
													"src": "6852:146:4",
													"statements": [
														{
															"expression": {
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 599,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 355,
																				"src": "6866:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$350_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 601,
																			"indexExpression": {
																				"id": 600,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 588,
																				"src": "6873:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6866:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$350_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 602,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6879:7:4",
																		"memberName": "hasRole",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 347,
																		"src": "6866:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 604,
																	"indexExpression": {
																		"id": 603,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 590,
																		"src": "6887:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6866:29:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6898:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "6866:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 607,
															"nodeType": "ExpressionStatement",
															"src": "6866:37:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 609,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 588,
																		"src": "6934:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 610,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 590,
																		"src": "6940:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 611,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 797,
																			"src": "6949:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6949:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 608,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 664,
																	"src": "6922:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6922:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 614,
															"nodeType": "EmitStatement",
															"src": "6917:45:4"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6983:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 594,
															"id": 616,
															"nodeType": "Return",
															"src": "6976:11:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "6501:224:4",
										"text": " @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."
									},
									"id": 623,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "6739:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6759:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "6751:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 587,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6751:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6773:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "6765:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6765:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6750:31:4"
									},
									"returnParameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "6808:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 592,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6808:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6807:6:4"
									},
									"scope": 624,
									"src": "6730:317:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 625,
							"src": "1953:5096:4",
							"usedErrors": [
								634,
								637
							],
							"usedEvents": [
								646,
								655,
								664
							]
						}
					],
					"src": "108:6942:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							707
						]
					},
					"id": 708,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 626,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "135:89:5",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 707,
							"linearizedBaseContracts": [
								707
							],
							"name": "IAccessControl",
							"nameLocation": "235:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 628,
										"nodeType": "StructuredDocumentation",
										"src": "256:56:5",
										"text": " @dev The `account` is missing a role."
									},
									"errorSelector": "e2517d3f",
									"id": 634,
									"name": "AccessControlUnauthorizedAccount",
									"nameLocation": "323:32:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "364:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "356:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "356:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "neededRole",
												"nameLocation": "381:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "373:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 631,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "373:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "355:37:5"
									},
									"src": "317:76:5"
								},
								{
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "399:148:5",
										"text": " @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
									},
									"errorSelector": "6697b232",
									"id": 637,
									"name": "AccessControlBadConfirmation",
									"nameLocation": "558:28:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "586:2:5"
									},
									"src": "552:37:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 638,
										"nodeType": "StructuredDocumentation",
										"src": "595:254:5",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this."
									},
									"eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
									"id": 646,
									"name": "RoleAdminChanged",
									"nameLocation": "860:16:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 640,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "893:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "877:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 639,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "877:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 642,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "915:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "899:33:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 641,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "899:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "950:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "934:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 643,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "934:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:87:5"
									},
									"src": "854:110:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 647,
										"nodeType": "StructuredDocumentation",
										"src": "970:212:5",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
									"id": 655,
									"name": "RoleGranted",
									"nameLocation": "1193:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 649,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1221:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1205:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 648,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1205:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 651,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1243:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1227:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 650,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 653,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1268:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1252:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1252:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1204:71:5"
									},
									"src": "1187:89:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 656,
										"nodeType": "StructuredDocumentation",
										"src": "1282:275:5",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
									"id": 664,
									"name": "RoleRevoked",
									"nameLocation": "1568:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1596:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1580:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 657,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1580:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1618:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1602:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1602:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1643:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1627:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1627:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:71:5"
									},
									"src": "1562:89:5"
								},
								{
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "1657:76:5",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1747:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1763:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "1755:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 666,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1755:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1777:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "1769:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1769:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1754:31:5"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "1809:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 671,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1809:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1808:6:5"
									},
									"scope": 707,
									"src": "1738:77:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "1821:184:5",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 682,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "2019:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2040:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "2032:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 676,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2032:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2031:14:5"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "2069:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 679,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2069:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2068:9:5"
									},
									"scope": 707,
									"src": "2010:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "2084:239:5",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 690,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2337:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2355:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "2347:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 684,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2347:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2369:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "2361:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2361:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2346:31:5"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2386:0:5"
									},
									"scope": 707,
									"src": "2328:59:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "2393:223:5",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 698,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2630:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2649:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "2641:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 692,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2641:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2663:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "2655:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2655:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2640:31:5"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2680:0:5"
									},
									"scope": 707,
									"src": "2621:60:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 699,
										"nodeType": "StructuredDocumentation",
										"src": "2687:491:5",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."
									},
									"functionSelector": "36568abe",
									"id": 706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "3192:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3213:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "3205:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 700,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3205:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "callerConfirmation",
												"nameLocation": "3227:18:5",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "3219:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 702,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3219:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3204:42:5"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:0:5"
									},
									"scope": 707,
									"src": "3183:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 708,
							"src": "225:3033:5",
							"usedErrors": [
								634,
								637
							],
							"usedEvents": [
								646,
								655,
								664
							]
						}
					],
					"src": "109:3150:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							785
						]
					},
					"id": 786,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 709,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 710,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:6",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 785,
							"linearizedBaseContracts": [
								785
							],
							"name": "IERC20",
							"nameLocation": "213:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:6",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 719,
									"name": "Transfer",
									"nameLocation": "395:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "404:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "426:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "446:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:6"
									},
									"src": "389:72:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:6",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 728,
									"name": "Approval",
									"nameLocation": "626:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "635:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "658:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "683:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:6"
									},
									"src": "620:78:6"
								},
								{
									"documentation": {
										"id": 729,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:6",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:6"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 734,
												"src": "820:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:6"
									},
									"scope": 785,
									"src": "774:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 735,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:6",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "930:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:6"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "970:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 739,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:6"
									},
									"scope": 785,
									"src": "911:68:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:6",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 752,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "1221:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 744,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "1233:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 746,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:6"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "1266:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 749,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:6"
									},
									"scope": 785,
									"src": "1203:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 753,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:6",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 762,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "1566:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "1581:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:6"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "1621:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:6"
									},
									"scope": 785,
									"src": "1547:83:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:6",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2325:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2342:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:6"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2375:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 769,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:6"
									},
									"scope": 785,
									"src": "2308:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 773,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:6",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 784,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "2711:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "2725:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "2737:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:6"
									},
									"returnParameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "2770:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 781,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:6"
									},
									"scope": 785,
									"src": "2689:87:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 786,
							"src": "203:2575:6",
							"usedErrors": [],
							"usedEvents": [
								719,
								728
							]
						}
					],
					"src": "106:2673:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							815
						]
					},
					"id": 816,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 787,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 788,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 815,
							"linearizedBaseContracts": [
								815
							],
							"name": "Context",
							"nameLocation": "642:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 796,
										"nodeType": "Block",
										"src": "718:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 793,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 792,
												"id": 795,
												"nodeType": "Return",
												"src": "728:17:7"
											}
										]
									},
									"id": 797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:7"
									},
									"returnParameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "709:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 790,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:7"
									},
									"scope": 815,
									"src": "656:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 805,
										"nodeType": "Block",
										"src": "825:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 802,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 801,
												"id": 804,
												"nodeType": "Return",
												"src": "835:15:7"
											}
										]
									},
									"id": 806,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:7"
									},
									"returnParameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 806,
												"src": "809:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 799,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:7"
									},
									"scope": 815,
									"src": "758:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 813,
										"nodeType": "Block",
										"src": "935:25:7",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 810,
												"id": 812,
												"nodeType": "Return",
												"src": "945:8:7"
											}
										]
									},
									"id": 814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:7"
									},
									"returnParameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "926:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:7"
									},
									"scope": 815,
									"src": "863:97:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 816,
							"src": "624:338:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							839
						],
						"IERC165": [
							851
						]
					},
					"id": 840,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 817,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "114:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 819,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 840,
							"sourceUnit": 852,
							"src": "140:38:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 818,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 851,
										"src": "148:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 821,
										"name": "IERC165",
										"nameLocations": [
											"687:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 851,
										"src": "687:7:8"
									},
									"id": 822,
									"nodeType": "InheritanceSpecifier",
									"src": "687:7:8"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 820,
								"nodeType": "StructuredDocumentation",
								"src": "180:478:8",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 839,
							"linearizedBaseContracts": [
								839,
								851
							],
							"name": "ERC165",
							"nameLocation": "677:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										850
									],
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "844:64:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 830,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "861:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 832,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 851,
																	"src": "881:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$851_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$851_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 831,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "876:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "876:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$851",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "890:11:8",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "876:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "861:40:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 829,
												"id": 836,
												"nodeType": "Return",
												"src": "854:47:8"
											}
										]
									},
									"documentation": {
										"id": 823,
										"nodeType": "StructuredDocumentation",
										"src": "701:56:8",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "771:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "796:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "789:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 824,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:20:8"
									},
									"returnParameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "838:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 827,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "838:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "837:6:8"
									},
									"scope": 839,
									"src": "762:146:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 840,
							"src": "659:251:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "114:797:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							851
						]
					},
					"id": 852,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 841,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 842,
								"nodeType": "StructuredDocumentation",
								"src": "141:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 851,
							"linearizedBaseContracts": [
								851
							],
							"name": "IERC165",
							"nameLocation": "431:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 850,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "817:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 844,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:9"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "860:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 847,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:9"
									},
									"scope": 851,
									"src": "790:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 852,
							"src": "421:447:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:754:9"
				},
				"id": 9
			},
			"contracts/compliance/BasicCompliance.sol": {
				"ast": {
					"absolutePath": "contracts/compliance/BasicCompliance.sol",
					"exportedSymbols": {
						"AccessControl": [
							624
						],
						"BasicCompliance": [
							1080
						],
						"Context": [
							815
						],
						"ERC165": [
							839
						],
						"IAccessControl": [
							707
						],
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							1256
						],
						"IClaimTopicsRegistry": [
							1288
						],
						"ICompliance": [
							1153
						],
						"IERC20": [
							785
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistry": [
							1469
						],
						"IIdentityRegistryStorage": [
							1585
						],
						"IToken": [
							1862
						]
					},
					"id": 1081,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 853,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:10"
						},
						{
							"absolutePath": "contracts/compliance/interface/ICompliance.sol",
							"file": "./interface/ICompliance.sol",
							"id": 854,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1081,
							"sourceUnit": 1154,
							"src": "61:37:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/token/IToken.sol",
							"file": "../token/IToken.sol",
							"id": 855,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1081,
							"sourceUnit": 1863,
							"src": "99:29:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
							"file": "@openzeppelin/contracts/access/AccessControl.sol",
							"id": 856,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1081,
							"sourceUnit": 625,
							"src": "129:58:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 857,
										"name": "ICompliance",
										"nameLocations": [
											"217:11:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1153,
										"src": "217:11:10"
									},
									"id": 858,
									"nodeType": "InheritanceSpecifier",
									"src": "217:11:10"
								},
								{
									"baseName": {
										"id": 859,
										"name": "AccessControl",
										"nameLocations": [
											"230:13:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 624,
										"src": "230:13:10"
									},
									"id": 860,
									"nodeType": "InheritanceSpecifier",
									"src": "230:13:10"
								}
							],
							"canonicalName": "BasicCompliance",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1080,
							"linearizedBaseContracts": [
								1080,
								624,
								839,
								851,
								707,
								815,
								1153
							],
							"name": "BasicCompliance",
							"nameLocation": "198:15:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "250:45:10",
										"text": "Mapping between agents and their statuses"
									},
									"id": 865,
									"mutability": "mutable",
									"name": "_tokenAgentsList",
									"nameLocation": "333:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 1080,
									"src": "300:49:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 864,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 862,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "308:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "300:24:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 863,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "319:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "355:55:10",
										"text": "Mapping of tokens linked to the compliance contract"
									},
									"functionSelector": "93e62f07",
									"id": 869,
									"mutability": "mutable",
									"name": "tokenBound",
									"nameLocation": "429:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1080,
									"src": "415:24:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IToken_$1862",
										"typeString": "contract IToken"
									},
									"typeName": {
										"id": 868,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 867,
											"name": "IToken",
											"nameLocations": [
												"415:6:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1862,
											"src": "415:6:10"
										},
										"referencedDeclaration": 1862,
										"src": "415:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IToken_$1862",
											"typeString": "contract IToken"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "75b238fc",
									"id": 872,
									"mutability": "constant",
									"name": "ADMIN_ROLE",
									"nameLocation": "499:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1080,
									"src": "475:111:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 870,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "475:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861343938303732303563653464333535303932656635613861313866353665383931336366346132303166626532383738323562303935363933633231373735",
										"id": 871,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "520:66:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_74447917106227587185069542233768419360415527974423666340979253117352358844277_by_1",
											"typeString": "int_const 7444...(69 digits omitted)...4277"
										},
										"value": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "8301057b",
									"id": 875,
									"mutability": "constant",
									"name": "TOKEN_ROLE",
									"nameLocation": "646:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1080,
									"src": "622:111:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 873,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "622:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861373139376333386439633463373435306337663263643230643061313763626537633334343139306436633832613662343961313436653632343339616534",
										"id": 874,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "667:66:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_75581274239262679086413083587165305977074103557877967517903863887433377749732_by_1",
											"typeString": "int_const 7558...(69 digits omitted)...9732"
										},
										"value": "0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "99f644f6",
									"id": 879,
									"mutability": "mutable",
									"name": "isCountryAllowed",
									"nameLocation": "776:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 1080,
									"src": "744:48:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint16_$_t_bool_$",
										"typeString": "mapping(uint16 => bool)"
									},
									"typeName": {
										"id": 878,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 876,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "753:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"nodeType": "Mapping",
										"src": "744:22:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint16_$_t_bool_$",
											"typeString": "mapping(uint16 => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 877,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "761:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 894,
										"nodeType": "Block",
										"src": "814:93:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30783030",
															"id": 883,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "835:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0x00"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 884,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 797,
																"src": "841:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "841:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 882,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "824:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "824:30:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 887,
												"nodeType": "ExpressionStatement",
												"src": "824:30:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 889,
															"name": "ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "875:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 890,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 797,
																"src": "887:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 891,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "887:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 888,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "864:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "864:36:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 893,
												"nodeType": "ExpressionStatement",
												"src": "864:36:10"
											}
										]
									},
									"id": 895,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "811:2:10"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "814:0:10"
									},
									"scope": 1080,
									"src": "800:107:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1098
									],
									"body": {
										"id": 930,
										"nodeType": "Block",
										"src": "1015:251:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 903,
																		"name": "ADMIN_ROLE",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 872,
																		"src": "1054:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 904,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 797,
																			"src": "1066:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 905,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1066:12:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 902,
																	"name": "hasRole",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "1046:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (bytes32,address) view returns (bool)"
																	}
																},
																"id": 906,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1046:33:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 909,
																			"name": "tokenBound",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "1107:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IToken_$1862",
																				"typeString": "contract IToken"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IToken_$1862",
																				"typeString": "contract IToken"
																			}
																		],
																		"id": 908,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1099:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 907,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1099:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 910,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1099:19:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1130:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1122:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 911,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1122:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1122:10:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1099:33:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1046:86:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564",
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1146:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
																"typeString": "literal_string \"ERC-3643: Caller not authorized\""
															},
															"value": "ERC-3643: Caller not authorized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
																"typeString": "literal_string \"ERC-3643: Caller not authorized\""
															}
														],
														"id": 901,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1025:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1025:164:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 919,
												"nodeType": "ExpressionStatement",
												"src": "1025:164:10"
											},
											{
												"expression": {
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 920,
														"name": "tokenBound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "1199:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IToken_$1862",
															"typeString": "contract IToken"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 922,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "1219:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 921,
															"name": "IToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1862,
															"src": "1212:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IToken_$1862_$",
																"typeString": "type(contract IToken)"
															}
														},
														"id": 923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1212:14:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IToken_$1862",
															"typeString": "contract IToken"
														}
													},
													"src": "1199:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IToken_$1862",
														"typeString": "contract IToken"
													}
												},
												"id": 925,
												"nodeType": "ExpressionStatement",
												"src": "1199:27:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 927,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 898,
															"src": "1252:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 926,
														"name": "TokenBound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1087,
														"src": "1241:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1241:18:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 929,
												"nodeType": "EmitStatement",
												"src": "1236:23:10"
											}
										]
									},
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "913:53:10",
										"text": "  @dev See {ICompliance-bindToken}."
									},
									"functionSelector": "3ff5aa02",
									"id": 931,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bindToken",
									"nameLocation": "980:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "998:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "990:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "990:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "989:16:10"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1015:0:10"
									},
									"scope": 1080,
									"src": "971:295:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1104
									],
									"body": {
										"id": 969,
										"nodeType": "Block",
										"src": "1378:320:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 939,
																		"name": "ADMIN_ROLE",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 872,
																		"src": "1417:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 940,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 797,
																			"src": "1429:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1429:12:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 938,
																	"name": "hasRole",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "1409:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (bytes32,address) view returns (bool)"
																	}
																},
																"id": 942,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1409:33:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 944,
																		"name": "TOKEN_ROLE",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 875,
																		"src": "1470:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 945,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 797,
																			"src": "1482:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 946,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1482:12:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 943,
																	"name": "hasRole",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "1462:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (bytes32,address) view returns (bool)"
																	}
																},
																"id": 947,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1462:33:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1409:86:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564",
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1509:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
																"typeString": "literal_string \"ERC-3643: Caller not authorized\""
															},
															"value": "ERC-3643: Caller not authorized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_38037d784d8f5fcd85cbe7227ceba1787a35f09390244ce703067894301baf6c",
																"typeString": "literal_string \"ERC-3643: Caller not authorized\""
															}
														],
														"id": 937,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1388:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1388:164:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 951,
												"nodeType": "ExpressionStatement",
												"src": "1388:164:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 953,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 934,
																"src": "1570:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "tokenBound",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "1588:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IToken_$1862",
																			"typeString": "contract IToken"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IToken_$1862",
																			"typeString": "contract IToken"
																		}
																	],
																	"id": 955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1580:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 954,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1580:7:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1580:19:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1570:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552432d333634333a20546f6b656e206e6f7420626f756e64",
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1601:27:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68",
																"typeString": "literal_string \"ERC-3643: Token not bound\""
															},
															"value": "ERC-3643: Token not bound"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ed93288d78cefdce7c0c22d700a4f52198da6c438d8ec0421fa06ef3ef589e68",
																"typeString": "literal_string \"ERC-3643: Token not bound\""
															}
														],
														"id": 952,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1562:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1562:67:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 961,
												"nodeType": "ExpressionStatement",
												"src": "1562:67:10"
											},
											{
												"expression": {
													"id": 963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "1639:17:10",
													"subExpression": {
														"id": 962,
														"name": "tokenBound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "1646:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IToken_$1862",
															"typeString": "contract IToken"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 964,
												"nodeType": "ExpressionStatement",
												"src": "1639:17:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 966,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 934,
															"src": "1684:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 965,
														"name": "TokenUnbound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "1671:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1671:20:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 968,
												"nodeType": "EmitStatement",
												"src": "1666:25:10"
											}
										]
									},
									"documentation": {
										"id": 932,
										"nodeType": "StructuredDocumentation",
										"src": "1272:55:10",
										"text": "  @dev See {ICompliance-unbindToken}."
									},
									"functionSelector": "40db3b50",
									"id": 970,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unbindToken",
									"nameLocation": "1341:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "1361:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "1353:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1353:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1352:16:10"
									},
									"returnParameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1378:0:10"
									},
									"scope": 1080,
									"src": "1332:366:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1114
									],
									"body": {
										"id": 979,
										"nodeType": "Block",
										"src": "1837:2:10",
										"statements": []
									},
									"functionSelector": "8baf29b4",
									"id": 980,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferred",
									"nameLocation": "1772:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "1792:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "1784:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 971,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1784:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "1807:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "1799:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "1820:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "1812:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 975,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1783:44:10"
									},
									"returnParameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1837:0:10"
									},
									"scope": 1080,
									"src": "1763:76:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1122
									],
									"body": {
										"id": 988,
										"nodeType": "Block",
										"src": "1957:2:10",
										"statements": []
									},
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "1845:51:10",
										"text": "  @dev See {ICompliance-created}."
									},
									"functionSelector": "5f8dead3",
									"id": 989,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "created",
									"nameLocation": "1911:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "1927:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "1919:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "1940:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 989,
												"src": "1932:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1932:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1918:29:10"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1957:0:10"
									},
									"scope": 1080,
									"src": "1902:57:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1130
									],
									"body": {
										"id": 997,
										"nodeType": "Block",
										"src": "2082:2:10",
										"statements": []
									},
									"documentation": {
										"id": 990,
										"nodeType": "StructuredDocumentation",
										"src": "1965:53:10",
										"text": "  @dev See {ICompliance-destroyed}."
									},
									"functionSelector": "8d2ea772",
									"id": 998,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "destroyed",
									"nameLocation": "2032:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "2050:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "2042:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 991,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2042:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "2065:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "2057:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2057:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:31:10"
									},
									"returnParameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2082:0:10"
									},
									"scope": 1080,
									"src": "2023:61:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1152
									],
									"body": {
										"id": 1021,
										"nodeType": "Block",
										"src": "2315:111:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 1013,
																"name": "isCountryAllowed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 879,
																"src": "2333:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint16_$_t_bool_$",
																	"typeString": "mapping(uint16 => bool)"
																}
															},
															"id": 1015,
															"indexExpression": {
																"id": 1014,
																"name": "countryCode",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1007,
																"src": "2350:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2333:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "20636f756e74727920636f6d706c696e616e63652069732072656a6563746564",
															"id": 1016,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2363:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd",
																"typeString": "literal_string \" country complinance is rejected\""
															},
															"value": " country complinance is rejected"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9ca5b2b4b83f4282a1ab8833c4707b5899c43144f563fd6bbf89494434ecb7dd",
																"typeString": "literal_string \" country complinance is rejected\""
															}
														],
														"id": 1012,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2325:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2325:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1018,
												"nodeType": "ExpressionStatement",
												"src": "2325:73:10"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1019,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2415:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1011,
												"id": 1020,
												"nodeType": "Return",
												"src": "2408:11:10"
											}
										]
									},
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "2090:55:10",
										"text": "  @dev See {ICompliance-canTransfer}."
									},
									"functionSelector": "e5316e78",
									"id": 1022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "canTransfer",
									"nameLocation": "2159:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "2181:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2181:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "2208:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "2233:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "countryCode",
												"nameLocation": "2268:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "2261:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1006,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2261:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2171:114:10"
									},
									"returnParameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "2309:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1009,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2309:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2308:6:10"
									},
									"scope": 1080,
									"src": "2150:276:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1138
									],
									"body": {
										"id": 1038,
										"nodeType": "Block",
										"src": "2560:56:10",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1030,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1025,
																"src": "2578:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1033,
																		"name": "tokenBound",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "2596:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IToken_$1862",
																			"typeString": "contract IToken"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IToken_$1862",
																			"typeString": "contract IToken"
																		}
																	],
																	"id": 1032,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2588:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1031,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2588:7:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2588:19:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2578:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1036,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2577:31:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1029,
												"id": 1037,
												"nodeType": "Return",
												"src": "2570:38:10"
											}
										]
									},
									"documentation": {
										"id": 1023,
										"nodeType": "StructuredDocumentation",
										"src": "2432:56:10",
										"text": "  @dev See {ICompliance-isTokenBound}."
									},
									"functionSelector": "993e8b95",
									"id": 1039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isTokenBound",
									"nameLocation": "2502:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "2523:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2515:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2515:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2514:16:10"
									},
									"returnParameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2554:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1027,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2554:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2553:6:10"
									},
									"scope": 1080,
									"src": "2493:123:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "2797:105:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1046,
																	"name": "ADMIN_ROLE",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 872,
																	"src": "2823:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1047,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 797,
																		"src": "2835:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1048,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2835:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1045,
																"name": "hasRole",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 409,
																"src": "2815:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (bytes32,address) view returns (bool)"
																}
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2815:33:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1044,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2807:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2807:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1051,
												"nodeType": "ExpressionStatement",
												"src": "2807:42:10"
											},
											{
												"expression": {
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1052,
															"name": "isCountryAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "2859:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint16_$_t_bool_$",
																"typeString": "mapping(uint16 => bool)"
															}
														},
														"id": 1054,
														"indexExpression": {
															"id": 1053,
															"name": "country_code",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1041,
															"src": "2876:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2859:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1055,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2890:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2859:35:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1057,
												"nodeType": "ExpressionStatement",
												"src": "2859:35:10"
											}
										]
									},
									"functionSelector": "4f44425e",
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addAllowedCountry",
									"nameLocation": "2750:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "country_code",
												"nameLocation": "2776:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "2769:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1040,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2769:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:21:10"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2797:0:10"
									},
									"scope": 1080,
									"src": "2741:161:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1078,
										"nodeType": "Block",
										"src": "2966:106:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1066,
																	"name": "ADMIN_ROLE",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 872,
																	"src": "2992:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1067,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 797,
																		"src": "3004:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3004:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1065,
																"name": "hasRole",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 409,
																"src": "2984:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (bytes32,address) view returns (bool)"
																}
															},
															"id": 1069,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2984:33:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1064,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2976:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2976:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1071,
												"nodeType": "ExpressionStatement",
												"src": "2976:42:10"
											},
											{
												"expression": {
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1072,
															"name": "isCountryAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "3028:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint16_$_t_bool_$",
																"typeString": "mapping(uint16 => bool)"
															}
														},
														"id": 1074,
														"indexExpression": {
															"id": 1073,
															"name": "country_code",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "3045:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3028:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1075,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3028:36:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1077,
												"nodeType": "ExpressionStatement",
												"src": "3028:36:10"
											}
										]
									},
									"functionSelector": "817544c3",
									"id": 1079,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "removeAllowedCountry",
									"nameLocation": "2916:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "country_code",
												"nameLocation": "2945:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "2938:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1060,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2938:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2937:21:10"
									},
									"returnParameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2966:0:10"
									},
									"scope": 1080,
									"src": "2907:165:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1081,
							"src": "189:2885:10",
							"usedErrors": [
								634,
								637
							],
							"usedEvents": [
								646,
								655,
								664,
								1087,
								1092
							]
						}
					],
					"src": "36:3039:10"
				},
				"id": 10
			},
			"contracts/compliance/interface/ICompliance.sol": {
				"ast": {
					"absolutePath": "contracts/compliance/interface/ICompliance.sol",
					"exportedSymbols": {
						"ICompliance": [
							1153
						]
					},
					"id": 1154,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1082,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ICompliance",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1153,
							"linearizedBaseContracts": [
								1153
							],
							"name": "ICompliance",
							"nameLocation": "71:11:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1083,
										"nodeType": "StructuredDocumentation",
										"src": "89:204:11",
										"text": "  this event is emitted when a token has been bound to the compliance contract\n  the event is emitted by the bindToken function\n  `_token` is the address of the token to bind"
									},
									"eventSelector": "2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b",
									"id": 1087,
									"name": "TokenBound",
									"nameLocation": "304:10:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"indexed": false,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "323:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "315:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "315:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "314:16:11"
									},
									"src": "298:33:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1088,
										"nodeType": "StructuredDocumentation",
										"src": "337:212:11",
										"text": "  this event is emitted when a token has been unbound from the compliance contract\n  the event is emitted by the unbindToken function\n  `_token` is the address of the token to unbind"
									},
									"eventSelector": "28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a",
									"id": 1092,
									"name": "TokenUnbound",
									"nameLocation": "560:12:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"indexed": false,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "581:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "573:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "573:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "572:16:11"
									},
									"src": "554:35:11"
								},
								{
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "595:149:11",
										"text": "  @dev binds a token to the compliance contract\n  @param _token address of the token to bind\n  Emits a TokenBound event"
									},
									"functionSelector": "3ff5aa02",
									"id": 1098,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "bindToken",
									"nameLocation": "758:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "776:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1098,
												"src": "768:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:16:11"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "792:0:11"
									},
									"scope": 1153,
									"src": "749:44:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1099,
										"nodeType": "StructuredDocumentation",
										"src": "799:157:11",
										"text": "  @dev unbinds a token from the compliance contract\n  @param _token address of the token to unbind\n  Emits a TokenUnbound event"
									},
									"functionSelector": "40db3b50",
									"id": 1104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unbindToken",
									"nameLocation": "970:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "990:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "982:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:16:11"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:0:11"
									},
									"scope": 1153,
									"src": "961:46:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "1013:575:11",
										"text": "  @dev function called whenever tokens are transferred\n  from one wallet to another\n  this function can update state variables in the compliance contract\n  these state variables being used by `canTransfer` to decide if a transfer\n  is compliant or not depending on the values stored in these state variables and on\n  the parameters of the compliance smart contract\n  @param _from The address of the sender\n  @param _to The address of the receiver\n  @param _amount The amount of tokens involved in the transfer"
									},
									"functionSelector": "8baf29b4",
									"id": 1114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferred",
									"nameLocation": "1602:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "1622:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "1614:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1614:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "1637:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "1629:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1629:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1650:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "1642:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1642:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1613:45:11"
									},
									"returnParameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1667:0:11"
									},
									"scope": 1153,
									"src": "1593:75:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1115,
										"nodeType": "StructuredDocumentation",
										"src": "1674:509:11",
										"text": "  @dev function called whenever tokens are created\n  on a wallet\n  this function can update state variables in the compliance contract\n  these state variables being used by `canTransfer` to decide if a transfer\n  is compliant or not depending on the values stored in these state variables and on\n  the parameters of the compliance smart contract\n  @param _to The address of the receiver\n  @param _amount The amount of tokens involved in the transfer"
									},
									"functionSelector": "5f8dead3",
									"id": 1122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "created",
									"nameLocation": "2197:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "2213:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "2205:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1116,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2205:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2226:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "2218:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2218:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2204:30:11"
									},
									"returnParameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2243:0:11"
									},
									"scope": 1153,
									"src": "2188:56:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1123,
										"nodeType": "StructuredDocumentation",
										"src": "2250:493:11",
										"text": "  @dev function called whenever tokens are destroyed\n  this function can update state variables in the compliance contract\n  these state variables being used by `canTransfer` to decide if a transfer\n  is compliant or not depending on the values stored in these state variables and on\n  the parameters of the compliance smart contract\n  @param _from The address of the receiver\n  @param _amount The amount of tokens involved in the transfer"
									},
									"functionSelector": "8d2ea772",
									"id": 1130,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "destroyed",
									"nameLocation": "2757:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "2775:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "2767:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2767:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2790:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "2782:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2782:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2766:32:11"
									},
									"returnParameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2807:0:11"
									},
									"scope": 1153,
									"src": "2748:60:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1131,
										"nodeType": "StructuredDocumentation",
										"src": "2814:167:11",
										"text": "  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\n  @param _token address of the token"
									},
									"functionSelector": "993e8b95",
									"id": 1138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isTokenBound",
									"nameLocation": "2995:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "3016:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "3008:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3008:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3007:16:11"
									},
									"returnParameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "3047:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1135,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3047:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3046:6:11"
									},
									"scope": 1153,
									"src": "2986:67:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1139,
										"nodeType": "StructuredDocumentation",
										"src": "3059:378:11",
										"text": "  @dev checks that the transfer is compliant.\n  default compliance always returns true\n  READ ONLY FUNCTION, this function cannot be used to increment\n  counters, emit events, ...\n  @param _from The address of the sender\n  @param _to The address of the receiver\n  @param _amount The amount of tokens involved in the transfer"
									},
									"functionSelector": "e5316e78",
									"id": 1152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "canTransfer",
									"nameLocation": "3451:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "3480:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3472:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3472:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "3503:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3495:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3495:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3524:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3516:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3516:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "3548:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3541:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1146,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3541:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3462:96:11"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3582:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3582:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3581:6:11"
									},
									"scope": 1153,
									"src": "3442:146:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1154,
							"src": "61:3534:11",
							"usedErrors": [],
							"usedEvents": [
								1087,
								1092
							]
						}
					],
					"src": "36:3560:11"
				},
				"id": 11
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IClaimIssuersRegistry.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							1256
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 1257,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1155,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:12"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"id": 1156,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1257,
							"sourceUnit": 50,
							"src": "61:67:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimIssuersRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1256,
							"linearizedBaseContracts": [
								1256
							],
							"name": "IClaimIssuersRegistry",
							"nameLocation": "140:21:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1157,
										"nodeType": "StructuredDocumentation",
										"src": "168:311:12",
										"text": "  this event is emitted when a claim issuer is added in the registry.\n  the event is emitted by the addClaimIssuer function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
									},
									"eventSelector": "375851630239b005eafd9230e43a9a9d4a5d7b96a4956fc8e9d2ab3ff4583d16",
									"id": 1165,
									"name": "ClaimIssuerAdded",
									"nameLocation": "490:16:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1160,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "537:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "516:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1159,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1158,
														"name": "IClaimIssuer",
														"nameLocations": [
															"516:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "516:12:12"
													},
													"referencedDeclaration": 49,
													"src": "516:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1163,
												"indexed": false,
												"mutability": "mutable",
												"name": "claimTopics",
												"nameLocation": "568:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "558:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1161,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "558:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1162,
													"nodeType": "ArrayTypeName",
													"src": "558:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "506:79:12"
									},
									"src": "484:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1166,
										"nodeType": "StructuredDocumentation",
										"src": "592:234:12",
										"text": "  this event is emitted when a claim issuer is removed from the registry.\n  the event is emitted by the removeClaimIssuer function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract"
									},
									"eventSelector": "8432c8693d2550c2eb52d3f0a803b38eb8c3c0e62234fa1b6b8b35cc38667854",
									"id": 1171,
									"name": "ClaimIssuerRemoved",
									"nameLocation": "837:18:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "877:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "856:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1168,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1167,
														"name": "IClaimIssuer",
														"nameLocations": [
															"856:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "856:12:12"
													},
													"referencedDeclaration": 49,
													"src": "856:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:34:12"
									},
									"src": "831:59:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "896:340:12",
										"text": "  this event is emitted when the set of claim topics is changed for a given claim issuer.\n  the event is emitted by the updateIssuerClaimTopics function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
									},
									"eventSelector": "ec753cfc52044f61676f18a11e500093a9f2b1cd5e4942bc476f2b0438159bcf",
									"id": 1180,
									"name": "ClaimTopicsUpdated",
									"nameLocation": "1247:18:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "1296:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "1275:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1173,
														"name": "IClaimIssuer",
														"nameLocations": [
															"1275:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "1275:12:12"
													},
													"referencedDeclaration": 49,
													"src": "1275:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1178,
												"indexed": false,
												"mutability": "mutable",
												"name": "claimTopics",
												"nameLocation": "1327:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "1317:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1176,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1317:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1177,
													"nodeType": "ArrayTypeName",
													"src": "1317:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:79:12"
									},
									"src": "1241:104:12"
								},
								{
									"documentation": {
										"id": 1181,
										"nodeType": "StructuredDocumentation",
										"src": "1351:637:12",
										"text": "  @dev registers a ClaimIssuer contract as claim claim issuer.\n  Requires that a ClaimIssuer contract doesn't already exist\n  Requires that the claimTopics set is not empty\n  Requires that there is no more than 15 claimTopics\n  Requires that there is no more than 50 Claim issuers\n  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\n  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimIssuerAdded` event"
									},
									"functionSelector": "38d742a4",
									"id": 1190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaimIssuer",
									"nameLocation": "2002:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "2039:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "2026:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1183,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1182,
														"name": "IClaimIssuer",
														"nameLocations": [
															"2026:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "2026:12:12"
													},
													"referencedDeclaration": 49,
													"src": "2026:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "_claimTopics",
												"nameLocation": "2080:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "2061:31:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1185,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2061:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1186,
													"nodeType": "ArrayTypeName",
													"src": "2061:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2016:82:12"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2107:0:12"
									},
									"scope": 1256,
									"src": "1993:115:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "2114:345:12",
										"text": "  @dev Removes the ClaimIssuer contract of a claim claim issuer.\n  Requires that the claim issuer contract to be registered first\n  @param _claimIssuer the claim issuer to remove.\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimIssuerRemoved` event"
									},
									"functionSelector": "0b4b764c",
									"id": 1197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaimIssuer",
									"nameLocation": "2473:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "2504:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "2491:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1193,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1192,
														"name": "IClaimIssuer",
														"nameLocations": [
															"2491:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "2491:12:12"
													},
													"referencedDeclaration": 49,
													"src": "2491:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2490:27:12"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2526:0:12"
									},
									"scope": 1256,
									"src": "2464:63:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "2533:583:12",
										"text": "  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\n  Requires that this ClaimIssuer contract already exists in the registry\n  Requires that the provided claimTopics set is not empty\n  Requires that there is no more than 15 claimTopics\n  @param _claimIssuer the claim issuer to update.\n  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimTopicsUpdated` event"
									},
									"functionSelector": "04bc7e84",
									"id": 1207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateIssuerClaimTopics",
									"nameLocation": "3130:23:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "3176:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "3163:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1200,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1199,
														"name": "IClaimIssuer",
														"nameLocations": [
															"3163:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "3163:12:12"
													},
													"referencedDeclaration": 49,
													"src": "3163:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "_claimTopics",
												"nameLocation": "3217:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "3198:31:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1202,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3198:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1203,
													"nodeType": "ArrayTypeName",
													"src": "3198:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3153:82:12"
									},
									"returnParameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3244:0:12"
									},
									"scope": 1256,
									"src": "3121:124:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "3251:136:12",
										"text": "  @dev Function for getting all the claim claim issuers stored.\n  @return array of all claim issuers registered."
									},
									"functionSelector": "d4f4ac4e",
									"id": 1215,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuers",
									"nameLocation": "3401:15:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3416:2:12"
									},
									"returnParameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "3442:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_memory_ptr",
													"typeString": "contract IClaimIssuer[]"
												},
												"typeName": {
													"baseType": {
														"id": 1211,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1210,
															"name": "IClaimIssuer",
															"nameLocations": [
																"3442:12:12"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 49,
															"src": "3442:12:12"
														},
														"referencedDeclaration": 49,
														"src": "3442:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IClaimIssuer_$49",
															"typeString": "contract IClaimIssuer"
														}
													},
													"id": 1212,
													"nodeType": "ArrayTypeName",
													"src": "3442:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_storage_ptr",
														"typeString": "contract IClaimIssuer[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3441:23:12"
									},
									"scope": 1256,
									"src": "3392:73:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "3471:267:12",
										"text": "  @dev Function for getting all the claim issuer allowed for a given claim topic.\n  @param claimTopic the claim topic to get the claim issuers for.\n  @return array of all claim issuer addresses that are allowed for the given claim topic."
									},
									"functionSelector": "6b2c56bd",
									"id": 1225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuersForClaimTopic",
									"nameLocation": "3752:28:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "3798:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "3790:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3780:34:12"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "3838:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_memory_ptr",
													"typeString": "contract IClaimIssuer[]"
												},
												"typeName": {
													"baseType": {
														"id": 1221,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1220,
															"name": "IClaimIssuer",
															"nameLocations": [
																"3838:12:12"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 49,
															"src": "3838:12:12"
														},
														"referencedDeclaration": 49,
														"src": "3838:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IClaimIssuer_$49",
															"typeString": "contract IClaimIssuer"
														}
													},
													"id": 1222,
													"nodeType": "ArrayTypeName",
													"src": "3838:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_storage_ptr",
														"typeString": "contract IClaimIssuer[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3837:23:12"
									},
									"scope": 1256,
									"src": "3743:118:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1226,
										"nodeType": "StructuredDocumentation",
										"src": "3867:193:12",
										"text": "  @dev Checks if the ClaimIssuer contract is claim\n  @param _issuer the address of the ClaimIssuer contract\n  @return true if the issuer is claim, false otherwise."
									},
									"functionSelector": "6de48708",
									"id": 1234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimIssuer",
									"nameLocation": "4074:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "_issuer",
												"nameLocation": "4101:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "4088:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1228,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1227,
														"name": "IClaimIssuer",
														"nameLocations": [
															"4088:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "4088:12:12"
													},
													"referencedDeclaration": 49,
													"src": "4088:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:22:12"
									},
									"returnParameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "4133:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1231,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4133:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4132:6:12"
									},
									"scope": 1256,
									"src": "4065:74:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1235,
										"nodeType": "StructuredDocumentation",
										"src": "4145:323:12",
										"text": "  @dev Function for getting all the claim topic of claim claim issuer\n  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\n  @param _claimIssuer the claim issuer concerned.\n  @return The set of claim topics that the claim issuer is allowed to emit"
									},
									"functionSelector": "122dade8",
									"id": 1244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuerClaimTopics",
									"nameLocation": "4482:25:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "4530:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "4517:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1236,
														"name": "IClaimIssuer",
														"nameLocations": [
															"4517:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "4517:12:12"
													},
													"referencedDeclaration": 49,
													"src": "4517:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4507:41:12"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "4572:16:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1240,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4572:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1241,
													"nodeType": "ArrayTypeName",
													"src": "4572:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4571:18:12"
									},
									"scope": 1256,
									"src": "4473:117:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "4596:377:12",
										"text": "  @dev Function for checking if the claim claim issuer is allowed\n  to emit a certain claim topic\n  @param _issuer the address of the claim issuer's ClaimIssuer contract\n  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n  @return true if the issuer is claim for this claim topic."
									},
									"functionSelector": "34a89987",
									"id": 1255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasClaimTopic",
									"nameLocation": "4987:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "_issuer",
												"nameLocation": "5023:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5010:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 1247,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1246,
														"name": "IClaimIssuer",
														"nameLocations": [
															"5010:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "5010:12:12"
													},
													"referencedDeclaration": 49,
													"src": "5010:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "5048:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5040:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5000:65:12"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5089:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1252,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5089:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5088:6:12"
									},
									"scope": 1256,
									"src": "4978:117:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1257,
							"src": "130:4967:12",
							"usedErrors": [],
							"usedEvents": [
								1165,
								1171,
								1180
							]
						}
					],
					"src": "36:5062:12"
				},
				"id": 12
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IClaimTopicsRegistry.sol",
					"exportedSymbols": {
						"IClaimTopicsRegistry": [
							1288
						]
					},
					"id": 1289,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1258,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimTopicsRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1288,
							"linearizedBaseContracts": [
								1288
							],
							"name": "IClaimTopicsRegistry",
							"nameLocation": "71:20:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1259,
										"nodeType": "StructuredDocumentation",
										"src": "98:241:13",
										"text": "  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n  the event is emitted by the 'addClaimTopic' function\n  `claimTopic` is the required claim added to the Claim Topics Registry"
									},
									"eventSelector": "01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d6",
									"id": 1263,
									"name": "ClaimTopicAdded",
									"nameLocation": "350:15:13",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "382:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "366:26:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:28:13"
									},
									"src": "344:50:13"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1264,
										"nodeType": "StructuredDocumentation",
										"src": "400:252:13",
										"text": "  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n  the event is emitted by the 'removeClaimTopic' function\n  `claimTopic` is the required claim removed from the Claim Topics Registry"
									},
									"eventSelector": "0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec5",
									"id": 1268,
									"name": "ClaimTopicRemoved",
									"nameLocation": "663:17:13",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "697:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "681:26:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "681:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "680:28:13"
									},
									"src": "657:52:13"
								},
								{
									"documentation": {
										"id": 1269,
										"nodeType": "StructuredDocumentation",
										"src": "715:278:13",
										"text": " @dev Add a claim claim topic (For example: KYC=1, AML=2).\n Only owner can call.\n emits `ClaimTopicAdded` event\n cannot add more than 15 topics for 1 token as adding more could create gas issues\n @param _claimTopic The claim topic index"
									},
									"functionSelector": "c7b22551",
									"id": 1274,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaimTopic",
									"nameLocation": "1007:13:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "1029:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "1021:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1020:21:13"
									},
									"returnParameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:0:13"
									},
									"scope": 1288,
									"src": "998:53:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1275,
										"nodeType": "StructuredDocumentation",
										"src": "1057:198:13",
										"text": "  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\n  Only owner can call.\n  emits `ClaimTopicRemoved` event\n  @param _claimTopic The claim topic index"
									},
									"functionSelector": "08297846",
									"id": 1280,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaimTopic",
									"nameLocation": "1269:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "1294:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "1286:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1285:21:13"
									},
									"returnParameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:0:13"
									},
									"scope": 1288,
									"src": "1260:56:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1281,
										"nodeType": "StructuredDocumentation",
										"src": "1322:118:13",
										"text": "  @dev Get the claim claim topics for the security token\n  @return Array of claim claim topics"
									},
									"functionSelector": "df09d604",
									"id": 1287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimTopics",
									"nameLocation": "1454:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1468:2:13"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "1494:16:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1283,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1494:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1284,
													"nodeType": "ArrayTypeName",
													"src": "1494:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1493:18:13"
									},
									"scope": 1288,
									"src": "1445:67:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1289,
							"src": "61:1453:13",
							"usedErrors": [],
							"usedEvents": [
								1263,
								1268
							]
						}
					],
					"src": "36:1479:13"
				},
				"id": 13
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IIdentityRegistry.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							1256
						],
						"IClaimTopicsRegistry": [
							1288
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistry": [
							1469
						],
						"IIdentityRegistryStorage": [
							1585
						]
					},
					"id": 1470,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1290,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:14"
						},
						{
							"absolutePath": "contracts/registry/interface/IClaimIssuersRegistry.sol",
							"file": "./IClaimIssuersRegistry.sol",
							"id": 1291,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1470,
							"sourceUnit": 1257,
							"src": "61:37:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/registry/interface/IClaimTopicsRegistry.sol",
							"file": "./IClaimTopicsRegistry.sol",
							"id": 1292,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1470,
							"sourceUnit": 1289,
							"src": "99:36:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/registry/interface/IIdentityRegistryStorage.sol",
							"file": "./IIdentityRegistryStorage.sol",
							"id": 1293,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1470,
							"sourceUnit": 1586,
							"src": "136:40:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"id": 1294,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1470,
							"sourceUnit": 50,
							"src": "178:67:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 1295,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1470,
							"sourceUnit": 329,
							"src": "246:64:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIdentityRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1469,
							"linearizedBaseContracts": [
								1469
							],
							"name": "IIdentityRegistry",
							"nameLocation": "322:17:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1296,
										"nodeType": "StructuredDocumentation",
										"src": "346:256:14",
										"text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
									},
									"eventSelector": "7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d0",
									"id": 1301,
									"name": "ClaimTopicsRegistrySet",
									"nameLocation": "613:22:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopicsRegistry",
												"nameLocation": "674:19:14",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "645:48:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 1298,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1297,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"645:20:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1288,
														"src": "645:20:14"
													},
													"referencedDeclaration": 1288,
													"src": "645:20:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:64:14"
									},
									"src": "607:93:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1302,
										"nodeType": "StructuredDocumentation",
										"src": "706:260:14",
										"text": "  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `identityStorage` is the address of the Identity Registry Storage contract"
									},
									"eventSelector": "2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c",
									"id": 1307,
									"name": "IdentityStorageSet",
									"nameLocation": "977:18:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityStorage",
												"nameLocation": "1029:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "996:48:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 1304,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1303,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"996:24:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1585,
														"src": "996:24:14"
													},
													"referencedDeclaration": 1585,
													"src": "996:24:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:50:14"
									},
									"src": "971:75:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1308,
										"nodeType": "StructuredDocumentation",
										"src": "1052:259:14",
										"text": "  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract"
									},
									"eventSelector": "811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e8",
									"id": 1313,
									"name": "ClaimIssuersRegistrySet",
									"nameLocation": "1322:23:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuersRegistry",
												"nameLocation": "1385:20:14",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "1355:50:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 1310,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1309,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"1355:21:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1256,
														"src": "1355:21:14"
													},
													"referencedDeclaration": 1256,
													"src": "1355:21:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1345:66:14"
									},
									"src": "1316:96:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1314,
										"nodeType": "StructuredDocumentation",
										"src": "1418:307:14",
										"text": "  this event is emitted when an Identity is registered into the Identity Registry.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af19",
									"id": 1321,
									"name": "IdentityRegistered",
									"nameLocation": "1736:18:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1316,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "1780:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1764:31:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1764:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "1823:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1805:26:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1318,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1317,
														"name": "IIdentity",
														"nameLocations": [
															"1805:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1805:9:14"
													},
													"referencedDeclaration": 328,
													"src": "1805:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1754:83:14"
									},
									"src": "1730:108:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "1844:302:14",
										"text": "  this event is emitted when an Identity is removed from the Identity Registry.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327",
									"id": 1329,
									"name": "IdentityRemoved",
									"nameLocation": "2157:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "2198:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "2182:31:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2182:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1327,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "2241:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "2223:26:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1325,
														"name": "IIdentity",
														"nameLocations": [
															"2223:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2223:9:14"
													},
													"referencedDeclaration": 328,
													"src": "2223:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2172:83:14"
									},
									"src": "2151:105:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1330,
										"nodeType": "StructuredDocumentation",
										"src": "2262:261:14",
										"text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
									},
									"eventSelector": "e98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf6010",
									"id": 1338,
									"name": "IdentityUpdated",
									"nameLocation": "2534:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldIdentity",
												"nameLocation": "2577:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "2559:29:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1332,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1331,
														"name": "IIdentity",
														"nameLocations": [
															"2559:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2559:9:14"
													},
													"referencedDeclaration": 328,
													"src": "2559:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1336,
												"indexed": true,
												"mutability": "mutable",
												"name": "newIdentity",
												"nameLocation": "2616:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "2598:29:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1335,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1334,
														"name": "IIdentity",
														"nameLocations": [
															"2598:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2598:9:14"
													},
													"referencedDeclaration": 328,
													"src": "2598:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2549:84:14"
									},
									"src": "2528:106:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "2640:295:14",
										"text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
									},
									"eventSelector": "04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee853",
									"id": 1345,
									"name": "CountryUpdated",
									"nameLocation": "2946:14:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "2986:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "2970:31:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2970:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1343,
												"indexed": true,
												"mutability": "mutable",
												"name": "country",
												"nameLocation": "3026:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "3011:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1342,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3011:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2960:79:14"
									},
									"src": "2940:100:14"
								},
								{
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "3046:474:14",
										"text": "  @dev Register an identity contract corresponding to a user address.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityRegistered` event"
									},
									"functionSelector": "454a03e0",
									"id": 1356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerIdentity",
									"nameLocation": "3534:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3568:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "3560:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3560:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "3600:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "3590:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1350,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1349,
														"name": "IIdentity",
														"nameLocations": [
															"3590:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "3590:9:14"
													},
													"referencedDeclaration": 328,
													"src": "3590:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "3626:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "3619:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1352,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3619:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:90:14"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3649:0:14"
									},
									"scope": 1469,
									"src": "3525:125:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1357,
										"nodeType": "StructuredDocumentation",
										"src": "3656:356:14",
										"text": "  @dev Removes an user from the identity registry.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityRemoved` event"
									},
									"functionSelector": "a8d29d1d",
									"id": 1362,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteIdentity",
									"nameLocation": "4026:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4049:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "4041:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4041:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4040:22:14"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4071:0:14"
									},
									"scope": 1469,
									"src": "4017:55:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "4078:312:14",
										"text": "  @dev Replace the actual identityRegistryStorage contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _identityRegistryStorage The address of the new Identity Registry Storage\n  emits `IdentityStorageSet` event"
									},
									"functionSelector": "26d941ae",
									"id": 1369,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setIdentityRegistryStorage",
									"nameLocation": "4404:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "_identityRegistryStorage",
												"nameLocation": "4465:24:14",
												"nodeType": "VariableDeclaration",
												"scope": 1369,
												"src": "4440:49:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 1365,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1364,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"4440:24:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1585,
														"src": "4440:24:14"
													},
													"referencedDeclaration": 1585,
													"src": "4440:24:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4430:65:14"
									},
									"returnParameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4504:0:14"
									},
									"scope": 1469,
									"src": "4395:110:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1370,
										"nodeType": "StructuredDocumentation",
										"src": "4511:304:14",
										"text": "  @dev Replace the actual claimTopicsRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimTopicsRegistry The address of the new claim Topics Registry\n  emits `ClaimTopicsRegistrySet` event"
									},
									"functionSelector": "670af6a9",
									"id": 1376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setClaimTopicsRegistry",
									"nameLocation": "4829:22:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "_claimTopicsRegistry",
												"nameLocation": "4882:20:14",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "4861:41:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 1372,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1371,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"4861:20:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1288,
														"src": "4861:20:14"
													},
													"referencedDeclaration": 1288,
													"src": "4861:20:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4851:57:14"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4917:0:14"
									},
									"scope": 1469,
									"src": "4820:98:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1377,
										"nodeType": "StructuredDocumentation",
										"src": "4924:308:14",
										"text": "  @dev Replace the actual claimIssuersRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\n  emits `ClaimIssuersRegistrySet` event"
									},
									"functionSelector": "6bc72c90",
									"id": 1383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setClaimIssuersRegistry",
									"nameLocation": "5246:23:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "_claimIssuersRegistry",
												"nameLocation": "5301:21:14",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "5279:43:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 1379,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1378,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"5279:21:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1256,
														"src": "5279:21:14"
													},
													"referencedDeclaration": 1256,
													"src": "5279:21:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5269:59:14"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5337:0:14"
									},
									"scope": 1469,
									"src": "5237:101:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1384,
										"nodeType": "StructuredDocumentation",
										"src": "5344:410:14",
										"text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryUpdated` event"
									},
									"functionSelector": "3b239a7f",
									"id": 1391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateCountry",
									"nameLocation": "5768:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5790:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "5782:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5782:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "5811:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "5804:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1387,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5804:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5781:39:14"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5829:0:14"
									},
									"scope": 1469,
									"src": "5759:71:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1392,
										"nodeType": "StructuredDocumentation",
										"src": "5836:526:14",
										"text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityUpdated` event"
									},
									"functionSelector": "8e098ca1",
									"id": 1400,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateIdentity",
									"nameLocation": "6376:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6399:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1400,
												"src": "6391:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6391:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "6423:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1400,
												"src": "6413:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1396,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1395,
														"name": "IIdentity",
														"nameLocations": [
															"6413:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6413:9:14"
													},
													"referencedDeclaration": 328,
													"src": "6413:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6390:43:14"
									},
									"returnParameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6442:0:14"
									},
									"scope": 1469,
									"src": "6367:76:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1401,
										"nodeType": "StructuredDocumentation",
										"src": "6449:701:14",
										"text": "  @dev function allowing to register identities in batch\n  This function can only be called by a wallet set as agent of the smart contract\n  Requires that none of the users has an identity contract already registered.\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the users\n  @param _identities The addresses of the corresponding identity contracts\n  @param _countries The countries of the corresponding investors\n  emits _userAddresses.length `IdentityRegistered` events"
									},
									"functionSelector": "653dc9f1",
									"id": 1414,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchRegisterIdentity",
									"nameLocation": "7164:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "7214:14:14",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "7195:33:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1402,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "7195:7:14",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1403,
													"nodeType": "ArrayTypeName",
													"src": "7195:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "_identities",
												"nameLocation": "7259:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "7238:32:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IIdentity_$328_$dyn_calldata_ptr",
													"typeString": "contract IIdentity[]"
												},
												"typeName": {
													"baseType": {
														"id": 1406,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1405,
															"name": "IIdentity",
															"nameLocations": [
																"7238:9:14"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 328,
															"src": "7238:9:14"
														},
														"referencedDeclaration": 328,
														"src": "7238:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IIdentity_$328",
															"typeString": "contract IIdentity"
														}
													},
													"id": 1407,
													"nodeType": "ArrayTypeName",
													"src": "7238:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IIdentity_$328_$dyn_storage_ptr",
														"typeString": "contract IIdentity[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "_countries",
												"nameLocation": "7298:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "7280:28:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint16_$dyn_calldata_ptr",
													"typeString": "uint16[]"
												},
												"typeName": {
													"baseType": {
														"id": 1409,
														"name": "uint16",
														"nodeType": "ElementaryTypeName",
														"src": "7280:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"id": 1410,
													"nodeType": "ArrayTypeName",
													"src": "7280:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint16_$dyn_storage_ptr",
														"typeString": "uint16[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7185:129:14"
									},
									"returnParameters": {
										"id": 1413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7323:0:14"
									},
									"scope": 1469,
									"src": "7155:169:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1415,
										"nodeType": "StructuredDocumentation",
										"src": "7330:292:14",
										"text": "  @dev This functions checks whether a wallet has its Identity registered or not\n  in the Identity Registry.\n  @param _userAddress The address of the user to be checked.\n  @return 'True' if the address is contained in the Identity Registry, 'false' if not."
									},
									"functionSelector": "5dbe47e8",
									"id": 1422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "7636:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1417,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "7653:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "7645:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7645:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7644:22:14"
									},
									"returnParameters": {
										"id": 1421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "7690:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1419,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7690:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7689:6:14"
									},
									"scope": 1469,
									"src": "7627:69:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1423,
										"nodeType": "StructuredDocumentation",
										"src": "7702:389:14",
										"text": "  @dev This functions checks whether an identity contract\n  corresponding to the provided user address has the required claims or not based\n  on the data fetched from claim issuers registry and from the claim topics registry\n  @param _userAddress The address of the user to be verified.\n  @return 'True' if the address is verified, 'false' if not."
									},
									"functionSelector": "b9209e33",
									"id": 1430,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isVerified",
									"nameLocation": "8105:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8124:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "8116:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8116:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8115:22:14"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "8161:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1427,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8161:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8160:6:14"
									},
									"scope": 1469,
									"src": "8096:71:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1431,
										"nodeType": "StructuredDocumentation",
										"src": "8173:117:14",
										"text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "f0eb5e54",
									"id": 1439,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identity",
									"nameLocation": "8304:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8321:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "8313:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8313:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8312:22:14"
									},
									"returnParameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "8358:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1435,
														"name": "IIdentity",
														"nameLocations": [
															"8358:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "8358:9:14"
													},
													"referencedDeclaration": 328,
													"src": "8358:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8357:11:14"
									},
									"scope": 1469,
									"src": "8295:74:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1440,
										"nodeType": "StructuredDocumentation",
										"src": "8375:120:14",
										"text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "7e42683b",
									"id": 1447,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "investorCountry",
									"nameLocation": "8509:15:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8542:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "8534:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8534:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8524:36:14"
									},
									"returnParameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "8584:6:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1444,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "8584:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8583:8:14"
									},
									"scope": 1469,
									"src": "8500:92:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "8598:100:14",
										"text": "  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
									},
									"functionSelector": "f11abfd8",
									"id": 1454,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identityStorage",
									"nameLocation": "8712:15:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8727:2:14"
									},
									"returnParameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "8753:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 1451,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1450,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"8753:24:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1585,
														"src": "8753:24:14"
													},
													"referencedDeclaration": 1585,
													"src": "8753:24:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$1585",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8752:26:14"
									},
									"scope": 1469,
									"src": "8703:76:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1455,
										"nodeType": "StructuredDocumentation",
										"src": "8785:97:14",
										"text": "  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry."
									},
									"functionSelector": "b4f3fcb7",
									"id": 1461,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "issuersRegistry",
									"nameLocation": "8896:15:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8911:2:14"
									},
									"returnParameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "8937:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 1458,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1457,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"8937:21:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1256,
														"src": "8937:21:14"
													},
													"referencedDeclaration": 1256,
													"src": "8937:21:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$1256",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8936:23:14"
									},
									"scope": 1469,
									"src": "8887:73:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1462,
										"nodeType": "StructuredDocumentation",
										"src": "8966:96:14",
										"text": "  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
									},
									"functionSelector": "3b3e12f4",
									"id": 1468,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "topicsRegistry",
									"nameLocation": "9076:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9090:2:14"
									},
									"returnParameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "9116:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 1465,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1464,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"9116:20:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1288,
														"src": "9116:20:14"
													},
													"referencedDeclaration": 1288,
													"src": "9116:20:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$1288",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9115:22:14"
									},
									"scope": 1469,
									"src": "9067:71:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1470,
							"src": "312:8828:14",
							"usedErrors": [],
							"usedEvents": [
								1301,
								1307,
								1313,
								1321,
								1329,
								1338,
								1345
							]
						}
					],
					"src": "36:9105:14"
				},
				"id": 14
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IIdentityRegistryStorage.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistryStorage": [
							1585
						]
					},
					"id": 1586,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1471,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:15"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 1472,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1586,
							"sourceUnit": 329,
							"src": "61:64:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIdentityRegistryStorage",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1585,
							"linearizedBaseContracts": [
								1585
							],
							"name": "IIdentityRegistryStorage",
							"nameLocation": "137:24:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1473,
										"nodeType": "StructuredDocumentation",
										"src": "184:306:15",
										"text": "  this event is emitted when an Identity is registered into the storage contract.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "0030dea7e9c9afaa2e3c9810f2fc9b5181f1bad74ca5a8db85f746a33585e747",
									"id": 1480,
									"name": "IdentityStored",
									"nameLocation": "501:14:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "541:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1480,
												"src": "525:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "525:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1478,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "584:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 1480,
												"src": "566:26:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1477,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1476,
														"name": "IIdentity",
														"nameLocations": [
															"566:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "566:9:15"
													},
													"referencedDeclaration": 328,
													"src": "566:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "515:83:15"
									},
									"src": "495:104:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1481,
										"nodeType": "StructuredDocumentation",
										"src": "605:301:15",
										"text": "  this event is emitted when an Identity is removed from the storage contract.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "ca6a4c3370b859312246e7f086284076e557997e10d856b716c23ab67067790b",
									"id": 1488,
									"name": "IdentityUnstored",
									"nameLocation": "917:16:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "959:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "943:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1486,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "1002:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "984:26:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1485,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1484,
														"name": "IIdentity",
														"nameLocations": [
															"984:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "984:9:15"
													},
													"referencedDeclaration": 328,
													"src": "984:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:83:15"
									},
									"src": "911:106:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1489,
										"nodeType": "StructuredDocumentation",
										"src": "1023:261:15",
										"text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
									},
									"eventSelector": "556ce885dfcea52155c773f1ed2e58781c51945c13030ab8f793c61f51d1b808",
									"id": 1497,
									"name": "IdentityModified",
									"nameLocation": "1295:16:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldIdentity",
												"nameLocation": "1339:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1321:29:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1491,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1490,
														"name": "IIdentity",
														"nameLocations": [
															"1321:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1321:9:15"
													},
													"referencedDeclaration": 328,
													"src": "1321:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1495,
												"indexed": true,
												"mutability": "mutable",
												"name": "newIdentity",
												"nameLocation": "1378:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1360:29:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1493,
														"name": "IIdentity",
														"nameLocations": [
															"1360:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1360:9:15"
													},
													"referencedDeclaration": 328,
													"src": "1360:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:84:15"
									},
									"src": "1289:107:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1498,
										"nodeType": "StructuredDocumentation",
										"src": "1402:295:15",
										"text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
									},
									"eventSelector": "20965fcdc6eed7ae398065b40ece4e732ba667992ca819fc54e80e9f2047c4cf",
									"id": 1504,
									"name": "CountryModified",
									"nameLocation": "1708:15:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1500,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "1749:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1733:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"indexed": true,
												"mutability": "mutable",
												"name": "country",
												"nameLocation": "1789:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1774:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1501,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1774:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1723:79:15"
									},
									"src": "1702:101:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1505,
										"nodeType": "StructuredDocumentation",
										"src": "1809:240:15",
										"text": "  this event is emitted when an Identity Registry is bound to the storage contract\n  the event is emitted by the 'addIdentityRegistry' function\n  `identityRegistry` is the address of the identity registry added"
									},
									"eventSelector": "500c250171aa20e861b680f93502547b9d436eda7d4c537fc360db6e0c6eedfb",
									"id": 1509,
									"name": "IdentityRegistryBound",
									"nameLocation": "2060:21:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityRegistry",
												"nameLocation": "2098:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2082:32:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2082:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2081:34:15"
									},
									"src": "2054:62:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1510,
										"nodeType": "StructuredDocumentation",
										"src": "2122:249:15",
										"text": "  this event is emitted when an Identity Registry is unbound from the storage contract\n  the event is emitted by the 'removeIdentityRegistry' function\n  `identityRegistry` is the address of the identity registry removed"
									},
									"eventSelector": "51f353eb5801583fdf2706e43c045b62fdf6b1566820b349390616363ecf72c9",
									"id": 1514,
									"name": "IdentityRegistryUnbound",
									"nameLocation": "2382:23:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityRegistry",
												"nameLocation": "2422:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "2406:32:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2405:34:15"
									},
									"src": "2376:64:15"
								},
								{
									"documentation": {
										"id": 1515,
										"nodeType": "StructuredDocumentation",
										"src": "2465:483:15",
										"text": "  @dev adds an identity contract corresponding to a user address in the storage.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityStored` event"
									},
									"functionSelector": "a53410dd",
									"id": 1525,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addIdentityToStorage",
									"nameLocation": "2962:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3000:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "2992:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2992:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "3032:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "3022:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1519,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1518,
														"name": "IIdentity",
														"nameLocations": [
															"3022:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "3022:9:15"
													},
													"referencedDeclaration": 328,
													"src": "3022:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "3058:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "3051:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1521,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3051:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2982:90:15"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3081:0:15"
									},
									"scope": 1585,
									"src": "2953:129:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1526,
										"nodeType": "StructuredDocumentation",
										"src": "3088:349:15",
										"text": "  @dev Removes an user from the storage.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityUnstored` event"
									},
									"functionSelector": "cf191bcd",
									"id": 1531,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeIdentityFromStorage",
									"nameLocation": "3451:25:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3485:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "3477:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3477:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3476:22:15"
									},
									"returnParameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3507:0:15"
									},
									"scope": 1585,
									"src": "3442:66:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1532,
										"nodeType": "StructuredDocumentation",
										"src": "3514:413:15",
										"text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryModified` event"
									},
									"functionSelector": "9f3418d5",
									"id": 1539,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "modifyStoredInvestorCountry",
									"nameLocation": "3941:27:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3986:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "3978:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "4015:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "4008:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1535,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4008:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3968:61:15"
									},
									"returnParameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4038:0:15"
									},
									"scope": 1585,
									"src": "3932:107:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1540,
										"nodeType": "StructuredDocumentation",
										"src": "4045:529:15",
										"text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityModified` event"
									},
									"functionSelector": "e805cf86",
									"id": 1548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "modifyStoredIdentity",
									"nameLocation": "4588:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4626:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "4618:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4618:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1545,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "4658:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "4648:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1544,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1543,
														"name": "IIdentity",
														"nameLocations": [
															"4648:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "4648:9:15"
													},
													"referencedDeclaration": 328,
													"src": "4648:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4608:65:15"
									},
									"returnParameters": {
										"id": 1547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4682:0:15"
									},
									"scope": 1585,
									"src": "4579:104:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1549,
										"nodeType": "StructuredDocumentation",
										"src": "4689:426:15",
										"text": "  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n  cannot bind more than 300 IR to 1 IRS\n  @param _identityRegistry The identity registry address to add."
									},
									"functionSelector": "690a49f9",
									"id": 1554,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "bindIdentityRegistry",
									"nameLocation": "5129:20:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5158:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 1554,
												"src": "5150:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5150:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5149:27:15"
									},
									"returnParameters": {
										"id": 1553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5185:0:15"
									},
									"scope": 1585,
									"src": "5120:66:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1555,
										"nodeType": "StructuredDocumentation",
										"src": "5192:399:15",
										"text": "  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n  @param _identityRegistry The identity registry address to remove."
									},
									"functionSelector": "97a012f7",
									"id": 1560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unbindIdentityRegistry",
									"nameLocation": "5605:22:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5636:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "5628:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5628:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5627:27:15"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5663:0:15"
									},
									"scope": 1585,
									"src": "5596:68:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1561,
										"nodeType": "StructuredDocumentation",
										"src": "5670:87:15",
										"text": "  @dev Returns the identity registries linked to the storage contract"
									},
									"functionSelector": "bf9eb959",
									"id": 1567,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "linkedIdentityRegistries",
									"nameLocation": "5771:24:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5795:2:15"
									},
									"returnParameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "5845:16:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1563,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5845:7:15",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1564,
													"nodeType": "ArrayTypeName",
													"src": "5845:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5844:18:15"
									},
									"scope": 1585,
									"src": "5762:101:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1568,
										"nodeType": "StructuredDocumentation",
										"src": "5869:117:15",
										"text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "7988d3a5",
									"id": 1576,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "storedIdentity",
									"nameLocation": "6000:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6032:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "6024:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6024:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6014:36:15"
									},
									"returnParameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "6074:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 1573,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1572,
														"name": "IIdentity",
														"nameLocations": [
															"6074:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6074:9:15"
													},
													"referencedDeclaration": 328,
													"src": "6074:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6073:11:15"
									},
									"scope": 1585,
									"src": "5991:94:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1577,
										"nodeType": "StructuredDocumentation",
										"src": "6091:120:15",
										"text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "727e13bc",
									"id": 1584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "storedInvestorCountry",
									"nameLocation": "6225:21:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6264:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "6256:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6256:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6246:36:15"
									},
									"returnParameters": {
										"id": 1583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "6306:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1581,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6306:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6305:8:15"
									},
									"scope": 1585,
									"src": "6216:98:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1586,
							"src": "127:6189:15",
							"usedErrors": [],
							"usedEvents": [
								1480,
								1488,
								1497,
								1504,
								1509,
								1514
							]
						}
					],
					"src": "36:6281:15"
				},
				"id": 15
			},
			"contracts/token/IToken.sol": {
				"ast": {
					"absolutePath": "contracts/token/IToken.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							1256
						],
						"IClaimTopicsRegistry": [
							1288
						],
						"IERC20": [
							785
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistry": [
							1469
						],
						"IIdentityRegistryStorage": [
							1585
						],
						"IToken": [
							1862
						]
					},
					"id": 1863,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1587,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:16"
						},
						{
							"absolutePath": "contracts/registry/interface/IIdentityRegistry.sol",
							"file": "../registry/interface/IIdentityRegistry.sol",
							"id": 1588,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1863,
							"sourceUnit": 1470,
							"src": "61:53:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1589,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1863,
							"sourceUnit": 786,
							"src": "115:56:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1591,
										"name": "IERC20",
										"nameLocations": [
											"212:6:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 785,
										"src": "212:6:16"
									},
									"id": 1592,
									"nodeType": "InheritanceSpecifier",
									"src": "212:6:16"
								}
							],
							"canonicalName": "IToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1590,
								"nodeType": "StructuredDocumentation",
								"src": "173:19:16",
								"text": "@dev interface"
							},
							"fullyImplemented": false,
							"id": 1862,
							"linearizedBaseContracts": [
								1862,
								785
							],
							"name": "IToken",
							"nameLocation": "202:6:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1593,
										"nodeType": "StructuredDocumentation",
										"src": "241:231:16",
										"text": "  this event is emitted when the onchainID  is updated.\n  the event is emitted by the token init function and by the setOnchainID function\n  `_newOnchainID` is the address of the onchainID of the token"
									},
									"eventSelector": "b940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f",
									"id": 1597,
									"name": "UpdatedOnchainID",
									"nameLocation": "483:16:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"indexed": true,
												"mutability": "mutable",
												"name": "_newOnchainID",
												"nameLocation": "516:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "500:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:31:16"
									},
									"src": "477:54:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "537:269:16",
										"text": "  this event is emitted when the IdentityRegistry has been set for the token\n  the event is emitted by the token constructor and by the setIdentityRegistry function\n  `_identityRegistry` is the address of the Identity Registry of the token"
									},
									"eventSelector": "d2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c",
									"id": 1602,
									"name": "IdentityRegistryAdded",
									"nameLocation": "817:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"indexed": true,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "855:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 1602,
												"src": "839:33:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:35:16"
									},
									"src": "811:63:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1603,
										"nodeType": "StructuredDocumentation",
										"src": "880:253:16",
										"text": "  this event is emitted when the Compliance has been set for the token\n  the event is emitted by the token constructor and by the setCompliance function\n  `_compliance` is the address of the Compliance contract of the token"
									},
									"eventSelector": "7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b6",
									"id": 1607,
									"name": "ComplianceAdded",
									"nameLocation": "1144:15:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"indexed": true,
												"mutability": "mutable",
												"name": "_compliance",
												"nameLocation": "1176:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "1160:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1160:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1159:29:16"
									},
									"src": "1138:51:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1608,
										"nodeType": "StructuredDocumentation",
										"src": "1195:432:16",
										"text": "  this event is emitted when an investor successfully recovers his tokens\n  the event is emitted by the recoveryAddress function\n  `_lostWallet` is the address of the wallet that the investor lost access to\n  `_newWallet` is the address of the wallet that the investor provided for the recovery\n  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery"
									},
									"eventSelector": "f0c9129a94f30f1caaceb63e44b9811d0a3edf1d6c23757f346093af5553fed0",
									"id": 1616,
									"name": "RecoverySuccess",
									"nameLocation": "1638:15:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1610,
												"indexed": true,
												"mutability": "mutable",
												"name": "_lostWallet",
												"nameLocation": "1679:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "1663:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1663:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1612,
												"indexed": true,
												"mutability": "mutable",
												"name": "_newWallet",
												"nameLocation": "1716:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "1700:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1700:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"indexed": true,
												"mutability": "mutable",
												"name": "_investorOnchainID",
												"nameLocation": "1752:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "1736:34:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1736:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1653:123:16"
									},
									"src": "1632:145:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1617,
										"nodeType": "StructuredDocumentation",
										"src": "1783:595:16",
										"text": "  this event is emitted when the wallet of an investor is frozen or unfrozen\n  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_isFrozen` is the freezing status of the wallet\n  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n  `_owner` is the address of the agent who called the function to freeze the wallet"
									},
									"eventSelector": "7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f436",
									"id": 1625,
									"name": "AddressFrozen",
									"nameLocation": "2389:13:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1619,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "2428:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1625,
												"src": "2412:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2412:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1621,
												"indexed": true,
												"mutability": "mutable",
												"name": "_isFrozen",
												"nameLocation": "2463:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1625,
												"src": "2450:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1620,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2450:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1623,
												"indexed": true,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "2498:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1625,
												"src": "2482:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2482:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2402:108:16"
									},
									"src": "2383:128:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1626,
										"nodeType": "StructuredDocumentation",
										"src": "2517:338:16",
										"text": "  this event is emitted when a certain amount of tokens is frozen on a wallet\n  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_amount` is the amount of tokens that are frozen"
									},
									"eventSelector": "a065e63c631c86f1b9f66a4a2f63f2093bf1c2168d23290259dbd969e0222a45",
									"id": 1632,
									"name": "TokensFrozen",
									"nameLocation": "2866:12:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "2895:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1632,
												"src": "2879:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2879:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"indexed": false,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2917:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1632,
												"src": "2909:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1629,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2909:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2878:47:16"
									},
									"src": "2860:66:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1633,
										"nodeType": "StructuredDocumentation",
										"src": "2932:346:16",
										"text": "  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_amount` is the amount of tokens that are unfrozen"
									},
									"eventSelector": "9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6",
									"id": 1639,
									"name": "TokensUnfrozen",
									"nameLocation": "3289:14:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3320:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "3304:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3304:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"indexed": false,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3342:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "3334:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3334:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3303:47:16"
									},
									"src": "3283:68:16"
								},
								{
									"documentation": {
										"id": 1640,
										"nodeType": "StructuredDocumentation",
										"src": "3357:242:16",
										"text": "  @dev sets the onchain ID of the token\n  @param _onchainID the address of the onchain ID to set\n  Only the owner of the token smart contract can call this function\n  emits a `UpdatedTokenInformation` event"
									},
									"functionSelector": "3d1ddc5b",
									"id": 1645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOnchainID",
									"nameLocation": "3613:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "_onchainID",
												"nameLocation": "3634:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1645,
												"src": "3626:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3626:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3625:20:16"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3654:0:16"
									},
									"scope": 1862,
									"src": "3604:51:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1646,
										"nodeType": "StructuredDocumentation",
										"src": "3661:226:16",
										"text": "  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n  This function can only be called by a wallet set as agent of the token\n  emits a `Paused` event"
									},
									"functionSelector": "8456cb59",
									"id": 1649,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pause",
									"nameLocation": "3901:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3906:2:16"
									},
									"returnParameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3917:0:16"
									},
									"scope": 1862,
									"src": "3892:26:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1650,
										"nodeType": "StructuredDocumentation",
										"src": "3924:324:16",
										"text": "  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n  This function can only be called by a wallet set as agent of the token\n  emits an `Unpaused` event"
									},
									"functionSelector": "3f4ba83a",
									"id": 1653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unpause",
									"nameLocation": "4262:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4269:2:16"
									},
									"returnParameters": {
										"id": 1652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4280:0:16"
									},
									"scope": 1862,
									"src": "4253:28:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1654,
										"nodeType": "StructuredDocumentation",
										"src": "4287:314:16",
										"text": "  @dev sets an address frozen status for this token.\n  @param _userAddress The address for which to update frozen status\n  @param _freeze Frozen status of the address\n  This function can only be called by a wallet set as agent of the token\n  emits an `AddressFrozen` event"
									},
									"functionSelector": "c69c09cf",
									"id": 1661,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAddressFrozen",
									"nameLocation": "4615:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4640:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "4632:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4632:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "_freeze",
												"nameLocation": "4659:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "4654:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1657,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4654:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4631:36:16"
									},
									"returnParameters": {
										"id": 1660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4676:0:16"
									},
									"scope": 1862,
									"src": "4606:71:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1662,
										"nodeType": "StructuredDocumentation",
										"src": "4683:317:16",
										"text": "  @dev freezes token amount specified for given address.\n  @param _userAddress The address for which to update frozen tokens\n  @param _amount Amount of Tokens to be frozen\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensFrozen` event"
									},
									"functionSelector": "125c4a33",
									"id": 1669,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "freezePartialTokens",
									"nameLocation": "5014:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5051:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "5043:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5043:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5081:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "5073:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5073:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5033:61:16"
									},
									"returnParameters": {
										"id": 1668,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5103:0:16"
									},
									"scope": 1862,
									"src": "5005:99:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1670,
										"nodeType": "StructuredDocumentation",
										"src": "5110:322:16",
										"text": "  @dev unfreezes token amount specified for given address\n  @param _userAddress The address for which to update frozen tokens\n  @param _amount Amount of Tokens to be unfrozen\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event"
									},
									"functionSelector": "1fe56f7d",
									"id": 1677,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unfreezePartialTokens",
									"nameLocation": "5446:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5485:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1677,
												"src": "5477:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5477:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5515:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1677,
												"src": "5507:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5507:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5467:61:16"
									},
									"returnParameters": {
										"id": 1676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5537:0:16"
									},
									"scope": 1862,
									"src": "5437:101:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1678,
										"nodeType": "StructuredDocumentation",
										"src": "5544:263:16",
										"text": "  @dev sets the Identity Registry for the token\n  @param _identityRegistry the address of the Identity Registry to set\n  Only the owner of the token smart contract can call this function\n  emits an `IdentityRegistryAdded` event"
									},
									"functionSelector": "cbf3f861",
									"id": 1683,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setIdentityRegistry",
									"nameLocation": "5821:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5849:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "5841:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5841:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5840:27:16"
									},
									"returnParameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5876:0:16"
									},
									"scope": 1862,
									"src": "5812:65:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "5883:304:16",
										"text": "  @dev sets the compliance contract of the token\n  @param _compliance the address of the compliance contract to set\n  Only the owner of the token smart contract can call this function\n  calls bindToken on the compliance contract\n  emits a `ComplianceAdded` event"
									},
									"functionSelector": "f8981789",
									"id": 1689,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCompliance",
									"nameLocation": "6201:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "_compliance",
												"nameLocation": "6223:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "6215:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6215:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6214:21:16"
									},
									"returnParameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6244:0:16"
									},
									"scope": 1862,
									"src": "6192:53:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1690,
										"nodeType": "StructuredDocumentation",
										"src": "6251:940:16",
										"text": "  @dev force a transfer of tokens between 2 whitelisted wallets\n  In case the `from` address has not enough free tokens (unfrozen tokens)\n  but has a total balance higher or equal to the `amount`\n  the amount of frozen tokens is reduced in order to have enough free tokens\n  to proceed the transfer, in such a case, the remaining balance on the `from`\n  account is 100% composed of frozen tokens post-transfer.\n  Require that the `to` address is a verified address,\n  @param _from The address of the sender\n  @param _to The address of the receiver\n  @param _amount The number of tokens to transfer\n  @return `true` if successful and revert if unsuccessful\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n  emits a `Transfer` event"
									},
									"functionSelector": "9fc1d0e7",
									"id": 1701,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "forcedTransfer",
									"nameLocation": "7205:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "7237:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "7229:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7229:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "7260:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "7252:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7252:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7281:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "7273:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7273:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7219:75:16"
									},
									"returnParameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "7313:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7313:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7312:6:16"
									},
									"scope": 1862,
									"src": "7196:123:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1702,
										"nodeType": "StructuredDocumentation",
										"src": "7325:411:16",
										"text": "  @dev mint tokens on a wallet\n  Improved version of default mint method. Tokens can be minted\n  to an address if only it is a verified address as per the security token.\n  @param _to Address to mint the tokens to.\n  @param _amount Amount of tokens to mint.\n  This function can only be called by a wallet set as agent of the token\n  emits a `Transfer` event"
									},
									"functionSelector": "40c10f19",
									"id": 1709,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7750:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "7763:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "7755:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7755:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7776:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "7768:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7768:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7754:30:16"
									},
									"returnParameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7793:0:16"
									},
									"scope": 1862,
									"src": "7741:53:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1710,
										"nodeType": "StructuredDocumentation",
										"src": "7800:752:16",
										"text": "  @dev burn tokens on a wallet\n  In case the `account` address has not enough free tokens (unfrozen tokens)\n  but has a total balance higher or equal to the `value` amount\n  the amount of frozen tokens is reduced in order to have enough free tokens\n  to proceed the burn, in such a case, the remaining balance on the `account`\n  is 100% composed of frozen tokens post-transaction.\n  @param _userAddress Address to burn the tokens from.\n  @param _amount Amount of tokens to burn.\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n  emits a `Transfer` event"
									},
									"functionSelector": "9dc29fac",
									"id": 1717,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8566:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8579:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "8571:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8571:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8601:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "8593:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8593:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8570:39:16"
									},
									"returnParameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8618:0:16"
									},
									"scope": 1862,
									"src": "8557:62:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1718,
										"nodeType": "StructuredDocumentation",
										"src": "8625:793:16",
										"text": "  @dev recovery function used to force transfer tokens from a\n  lost wallet to a new wallet for an investor.\n  @param _lostWallet the wallet that the investor lost\n  @param _newWallet the newly provided wallet on which tokens have to be transferred\n  @param _investorOnchainID the onchainID of the investor asking for a recovery\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n  emits a `Transfer` event if the recovery process is successful\n  emits a `RecoverySuccess` event if the recovery process is successful\n  emits a `RecoveryFails` event if the recovery process fails"
									},
									"functionSelector": "9285948a",
									"id": 1729,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoveryAddress",
									"nameLocation": "9432:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "_lostWallet",
												"nameLocation": "9465:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "9457:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9457:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "_newWallet",
												"nameLocation": "9494:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "9486:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9486:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "_investorOnchainID",
												"nameLocation": "9522:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "9514:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9514:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9447:99:16"
									},
									"returnParameters": {
										"id": 1728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "9565:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1726,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9565:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9564:6:16"
									},
									"scope": 1862,
									"src": "9423:148:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1730,
										"nodeType": "StructuredDocumentation",
										"src": "9577:645:16",
										"text": "  @dev function allowing to issue transfers in batch\n  Require that the msg.sender and `to` addresses are not frozen.\n  Require that the total value should not exceed available balance.\n  Require that the `to` addresses are all verified addresses,\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to transfer to the corresponding receiver\n  emits _toList.length `Transfer` events"
									},
									"functionSelector": "88d695b2",
									"id": 1739,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchTransfer",
									"nameLocation": "10236:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1733,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "10278:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "10259:26:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1731,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10259:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1732,
													"nodeType": "ArrayTypeName",
													"src": "10259:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "10314:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "10295:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1734,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "10295:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1735,
													"nodeType": "ArrayTypeName",
													"src": "10295:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10249:79:16"
									},
									"returnParameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10337:0:16"
									},
									"scope": 1862,
									"src": "10227:111:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1740,
										"nodeType": "StructuredDocumentation",
										"src": "10344:843:16",
										"text": "  @dev function allowing to issue forced transfers in batch\n  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n  Require that the `_toList` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _fromList The addresses of the senders\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to transfer to the corresponding receiver\n  This function can only be called by a wallet set as agent of the token\n  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n  emits _fromList.length `Transfer` events"
									},
									"functionSelector": "42a47abc",
									"id": 1752,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchForcedTransfer",
									"nameLocation": "11201:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "_fromList",
												"nameLocation": "11249:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "11230:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1741,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11230:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1742,
													"nodeType": "ArrayTypeName",
													"src": "11230:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "11287:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "11268:26:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1744,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11268:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1745,
													"nodeType": "ArrayTypeName",
													"src": "11268:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "11323:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "11304:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1747,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11304:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1748,
													"nodeType": "ArrayTypeName",
													"src": "11304:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11220:117:16"
									},
									"returnParameters": {
										"id": 1751,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11346:0:16"
									},
									"scope": 1862,
									"src": "11192:155:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1753,
										"nodeType": "StructuredDocumentation",
										"src": "11353:575:16",
										"text": "  @dev function allowing to mint tokens in batch\n  Require that the `_toList` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to mint to the corresponding receiver\n  This function can only be called by a wallet set as agent of the token\n  emits _toList.length `Transfer` events"
									},
									"functionSelector": "68573107",
									"id": 1762,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchMint",
									"nameLocation": "11942:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "11980:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "11961:26:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1754,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11961:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1755,
													"nodeType": "ArrayTypeName",
													"src": "11961:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "12016:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "11997:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1757,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11997:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1758,
													"nodeType": "ArrayTypeName",
													"src": "11997:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11951:79:16"
									},
									"returnParameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12039:0:16"
									},
									"scope": 1862,
									"src": "11933:107:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1763,
										"nodeType": "StructuredDocumentation",
										"src": "12046:624:16",
										"text": "  @dev function allowing to burn tokens in batch\n  Require that the `_userAddresses` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the wallets concerned by the burn\n  @param _amounts The number of tokens to burn from the corresponding wallets\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `Transfer` events"
									},
									"functionSelector": "4a6cc677",
									"id": 1772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchBurn",
									"nameLocation": "12684:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "12722:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "12703:33:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1764,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12703:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1765,
													"nodeType": "ArrayTypeName",
													"src": "12703:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "12765:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "12746:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1767,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12746:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1768,
													"nodeType": "ArrayTypeName",
													"src": "12746:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12693:86:16"
									},
									"returnParameters": {
										"id": 1771,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12788:0:16"
									},
									"scope": 1862,
									"src": "12675:114:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1773,
										"nodeType": "StructuredDocumentation",
										"src": "12795:538:16",
										"text": "  @dev function allowing to set frozen addresses in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses for which to update frozen status\n  @param _freeze Frozen status of the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `AddressFrozen` events"
									},
									"functionSelector": "1a7af379",
									"id": 1782,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchSetAddressFrozen",
									"nameLocation": "13347:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "13397:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1782,
												"src": "13378:33:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1774,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "13378:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1775,
													"nodeType": "ArrayTypeName",
													"src": "13378:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1779,
												"mutability": "mutable",
												"name": "_freeze",
												"nameLocation": "13437:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1782,
												"src": "13421:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1777,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13421:4:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1778,
													"nodeType": "ArrayTypeName",
													"src": "13421:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13368:82:16"
									},
									"returnParameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13459:0:16"
									},
									"scope": 1862,
									"src": "13338:122:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1783,
										"nodeType": "StructuredDocumentation",
										"src": "13466:558:16",
										"text": "  @dev function allowing to freeze tokens partially in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses on which tokens need to be frozen\n  @param _amounts the amount of tokens to freeze on the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `TokensFrozen` events"
									},
									"functionSelector": "fc7e5fa8",
									"id": 1792,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchFreezePartialTokens",
									"nameLocation": "14038:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1786,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "14091:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1792,
												"src": "14072:33:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1784,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "14072:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1785,
													"nodeType": "ArrayTypeName",
													"src": "14072:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "14134:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1792,
												"src": "14115:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1787,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14115:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1788,
													"nodeType": "ArrayTypeName",
													"src": "14115:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14062:86:16"
									},
									"returnParameters": {
										"id": 1791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14157:0:16"
									},
									"scope": 1862,
									"src": "14029:129:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1793,
										"nodeType": "StructuredDocumentation",
										"src": "14164:566:16",
										"text": "  @dev function allowing to unfreeze tokens partially in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses on which tokens need to be unfrozen\n  @param _amounts the amount of tokens to unfreeze on the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `TokensUnfrozen` events"
									},
									"functionSelector": "4710362d",
									"id": 1802,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchUnfreezePartialTokens",
									"nameLocation": "14744:26:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "14799:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "14780:33:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1794,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "14780:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1795,
													"nodeType": "ArrayTypeName",
													"src": "14780:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "14842:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "14823:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1797,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14823:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1798,
													"nodeType": "ArrayTypeName",
													"src": "14823:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14770:86:16"
									},
									"returnParameters": {
										"id": 1801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14865:0:16"
									},
									"scope": 1862,
									"src": "14735:131:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1803,
										"nodeType": "StructuredDocumentation",
										"src": "14872:523:16",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 1 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n balanceOf() and transfer()."
									},
									"functionSelector": "313ce567",
									"id": 1808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "15409:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15417:2:16"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "15443:5:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1805,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "15443:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15442:7:16"
									},
									"scope": 1862,
									"src": "15400:50:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1809,
										"nodeType": "StructuredDocumentation",
										"src": "15456:54:16",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1814,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "15524:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1810,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15528:2:16"
									},
									"returnParameters": {
										"id": 1813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1812,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "15554:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1811,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "15554:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15553:15:16"
									},
									"scope": 1862,
									"src": "15515:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "15575:216:16",
										"text": " @dev Returns the address of the onchainID of the token.\n the onchainID of the token gives all the information available\n about the token and is managed by the token issuer or his agent."
									},
									"functionSelector": "aba63705",
									"id": 1820,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onchainID",
									"nameLocation": "15805:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15814:2:16"
									},
									"returnParameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "15840:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15840:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15839:9:16"
									},
									"scope": 1862,
									"src": "15796:53:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "15855:102:16",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "15971:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15977:2:16"
									},
									"returnParameters": {
										"id": 1825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1826,
												"src": "16003:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1823,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "16003:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16002:15:16"
									},
									"scope": 1862,
									"src": "15962:56:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1827,
										"nodeType": "StructuredDocumentation",
										"src": "16024:94:16",
										"text": " @dev Returns the TREX version of the token.\n current version is 3.0.0"
									},
									"functionSelector": "54fd4d50",
									"id": 1832,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "version",
									"nameLocation": "16132:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1828,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16139:2:16"
									},
									"returnParameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1832,
												"src": "16165:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1829,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "16165:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16164:15:16"
									},
									"scope": 1862,
									"src": "16123:57:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1833,
										"nodeType": "StructuredDocumentation",
										"src": "16186:74:16",
										"text": "  @dev Returns the Identity Registry linked to the token"
									},
									"functionSelector": "134e18f4",
									"id": 1839,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identityRegistry",
									"nameLocation": "16274:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16290:2:16"
									},
									"returnParameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "16316:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistry_$1469",
													"typeString": "contract IIdentityRegistry"
												},
												"typeName": {
													"id": 1836,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1835,
														"name": "IIdentityRegistry",
														"nameLocations": [
															"16316:17:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1469,
														"src": "16316:17:16"
													},
													"referencedDeclaration": 1469,
													"src": "16316:17:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistry_$1469",
														"typeString": "contract IIdentityRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16315:19:16"
									},
									"scope": 1862,
									"src": "16265:70:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "16341:76:16",
										"text": "  @dev Returns the Compliance contract linked to the token"
									},
									"functionSelector": "6290865d",
									"id": 1845,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "compliance",
									"nameLocation": "16431:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16441:2:16"
									},
									"returnParameters": {
										"id": 1844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1845,
												"src": "16467:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16467:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16466:9:16"
									},
									"scope": 1862,
									"src": "16422:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1846,
										"nodeType": "StructuredDocumentation",
										"src": "16482:433:16",
										"text": "  @dev Returns the freezing status of a wallet\n  if isFrozen returns `true` the wallet is frozen\n  if isFrozen returns `false` the wallet is not frozen\n  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n  a partial freeze or the whole token could be blocked by pause\n  @param _userAddress the address of the wallet on which isFrozen is called"
									},
									"functionSelector": "e5839836",
									"id": 1853,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isFrozen",
									"nameLocation": "16929:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "16946:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1853,
												"src": "16938:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16938:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16937:22:16"
									},
									"returnParameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1853,
												"src": "16983:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1850,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16983:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16982:6:16"
									},
									"scope": 1862,
									"src": "16920:69:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1854,
										"nodeType": "StructuredDocumentation",
										"src": "16995:264:16",
										"text": "  @dev Returns the amount of tokens that are partially frozen on a wallet\n  the amount of frozen tokens is always <= to the total balance of the wallet\n  @param _userAddress the address of the wallet on which getFrozenTokens is called"
									},
									"functionSelector": "158b1a57",
									"id": 1861,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFrozenTokens",
									"nameLocation": "17273:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "17306:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "17298:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17298:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17288:36:16"
									},
									"returnParameters": {
										"id": 1860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "17348:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17348:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17347:9:16"
									},
									"scope": 1862,
									"src": "17264:93:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1863,
							"src": "192:17167:16",
							"usedErrors": [],
							"usedEvents": [
								719,
								728,
								1597,
								1602,
								1607,
								1616,
								1625,
								1632,
								1639
							]
						}
					],
					"src": "36:17324:16"
				},
				"id": 16
			}
		}
	}
}