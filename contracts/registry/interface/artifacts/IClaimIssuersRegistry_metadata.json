{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IClaimIssuer",
						"name": "claimIssuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "claimTopics",
						"type": "uint256[]"
					}
				],
				"name": "ClaimIssuerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IClaimIssuer",
						"name": "claimIssuer",
						"type": "address"
					}
				],
				"name": "ClaimIssuerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IClaimIssuer",
						"name": "claimIssuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "claimTopics",
						"type": "uint256[]"
					}
				],
				"name": "ClaimTopicsUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_claimIssuer",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_claimTopics",
						"type": "uint256[]"
					}
				],
				"name": "addClaimIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_claimIssuer",
						"type": "address"
					}
				],
				"name": "getClaimIssuerClaimTopics",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getClaimIssuers",
				"outputs": [
					{
						"internalType": "contract IClaimIssuer[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "claimTopic",
						"type": "uint256"
					}
				],
				"name": "getClaimIssuersForClaimTopic",
				"outputs": [
					{
						"internalType": "contract IClaimIssuer[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_issuer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_claimTopic",
						"type": "uint256"
					}
				],
				"name": "hasClaimTopic",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "isClaimIssuer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_claimIssuer",
						"type": "address"
					}
				],
				"name": "removeClaimIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IClaimIssuer",
						"name": "_claimIssuer",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_claimTopics",
						"type": "uint256[]"
					}
				],
				"name": "updateIssuerClaimTopics",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addClaimIssuer(address,uint256[])": {
					"details": "registers a ClaimIssuer contract as claim claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Claim issuers",
					"params": {
						"_claimIssuer": "The ClaimIssuer contract address of the claim claim issuer.",
						"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerAdded` event"
					}
				},
				"getClaimIssuerClaimTopics(address)": {
					"details": "Function for getting all the claim topic of claim claim issuer  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.",
					"params": {
						"_claimIssuer": "the claim issuer concerned."
					},
					"returns": {
						"_0": "The set of claim topics that the claim issuer is allowed to emit"
					}
				},
				"getClaimIssuers()": {
					"details": "Function for getting all the claim claim issuers stored.",
					"returns": {
						"_0": "array of all claim issuers registered."
					}
				},
				"getClaimIssuersForClaimTopic(uint256)": {
					"details": "Function for getting all the claim issuer allowed for a given claim topic.",
					"params": {
						"claimTopic": "the claim topic to get the claim issuers for."
					},
					"returns": {
						"_0": "array of all claim issuer addresses that are allowed for the given claim topic."
					}
				},
				"hasClaimTopic(address,uint256)": {
					"details": "Function for checking if the claim claim issuer is allowed  to emit a certain claim topic",
					"params": {
						"_claimTopic": "the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it",
						"_issuer": "the address of the claim issuer's ClaimIssuer contract"
					},
					"returns": {
						"_0": "true if the issuer is claim for this claim topic."
					}
				},
				"isClaimIssuer(address)": {
					"details": "Checks if the ClaimIssuer contract is claim",
					"params": {
						"_issuer": "the address of the ClaimIssuer contract"
					},
					"returns": {
						"_0": "true if the issuer is claim, false otherwise."
					}
				},
				"removeClaimIssuer(address)": {
					"details": "Removes the ClaimIssuer contract of a claim claim issuer.  Requires that the claim issuer contract to be registered first",
					"params": {
						"_claimIssuer": "the claim issuer to remove.  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerRemoved` event"
					}
				},
				"updateIssuerClaimTopics(address,uint256[])": {
					"details": "Updates the set of claim topics that a claim issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics",
					"params": {
						"_claimIssuer": "the claim issuer to update.",
						"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimTopicsUpdated` event"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"ClaimIssuerAdded(address,uint256[])": {
					"notice": "this event is emitted when a claim issuer is added in the registry.  the event is emitted by the addClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
				},
				"ClaimIssuerRemoved(address)": {
					"notice": "this event is emitted when a claim issuer is removed from the registry.  the event is emitted by the removeClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract"
				},
				"ClaimTopicsUpdated(address,uint256[])": {
					"notice": "this event is emitted when the set of claim topics is changed for a given claim issuer.  the event is emitted by the updateIssuerClaimTopics function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/registry/interface/IClaimIssuersRegistry.sol": "IClaimIssuersRegistry"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
			"keccak256": "0x1a20afc15dd2827ea789c3b1eb0efebb34d5ba3273ddae3c0418d10004d29896",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b5d3e76cd4a4b6872bb219b9af60290d7a7c9a333b700e742d4e5dafcb0d03b0",
				"dweb:/ipfs/QmTL4ZvcTfrvU1yXoSJZQS1hqdXxxFkb2iij12q1oNkAyv"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC734.sol": {
			"keccak256": "0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8d9b77d41bcd0f68eac91543b9e162dadb3078e13d558db153307f3ee01f819",
				"dweb:/ipfs/QmXs6vjAfnXFz1VQxNBGQUv5i2DHr9AeJ9ezG5RQHy4bWd"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC735.sol": {
			"keccak256": "0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ebb12c62267e4f33475cfe554bbc32740b8a1e2a620d88338490fb0dcb0d4523",
				"dweb:/ipfs/QmTXg9XUuEcTMZBc3FbGRaSekxEv8rE3oyYJQUJ9Zi3qo9"
			]
		},
		"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
			"keccak256": "0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://82a0e205a814739ac45b4d1fc490aa40f5f0da4e9a9f1fb1d998c595850a29c4",
				"dweb:/ipfs/QmTqc9Z9mGmCPw3v76S2oAFkxjjQXrpgJ5YYzYj5gtbrnN"
			]
		},
		"contracts/registry/interface/IClaimIssuersRegistry.sol": {
			"keccak256": "0x30fc2796d981249648e5e5101825fac8c7c439b936ec2bd9537c9e398eea2348",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://7f23ae654234a3c4b074cf22e14218b4159572a48f4fb275d3d229d8eaa7190a",
				"dweb:/ipfs/QmX92TykzcMKMGoAeaf4hx7hwp8LgUKhWje7sQbMBiu3we"
			]
		}
	},
	"version": 1
}