{
	"id": "fdbdd64cffaaef46560e5e95a193a020",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/token/IToken.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"../registry/interface/IIdentityRegistry.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev interface\ninterface IToken is IERC20 {\n    /// events\n\n    /**\n     *  this event is emitted when the onchainID  is updated.\n     *  the event is emitted by the token init function and by the setOnchainID function\n     *  `_newOnchainID` is the address of the onchainID of the token\n     */\n    event UpdatedOnchainID(address indexed _newOnchainID);\n\n    /**\n     *  this event is emitted when the IdentityRegistry has been set for the token\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\n     *  `_identityRegistry` is the address of the Identity Registry of the token\n     */\n    event IdentityRegistryAdded(address indexed _identityRegistry);\n\n    /**\n     *  this event is emitted when the Compliance has been set for the token\n     *  the event is emitted by the token constructor and by the setCompliance function\n     *  `_compliance` is the address of the Compliance contract of the token\n     */\n    event ComplianceAdded(address indexed _compliance);\n\n    /**\n     *  this event is emitted when an investor successfully recovers his tokens\n     *  the event is emitted by the recoveryAddress function\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\n     */\n    event RecoverySuccess(\n        address indexed _lostWallet,\n        address indexed _newWallet,\n        address indexed _investorOnchainID\n    );\n\n    /**\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_isFrozen` is the freezing status of the wallet\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\n     */\n    event AddressFrozen(\n        address indexed _userAddress,\n        bool indexed _isFrozen,\n        address indexed _owner\n    );\n\n    /**\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are frozen\n     */\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are unfrozen\n     */\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  @dev sets the onchain ID of the token\n     *  @param _onchainID the address of the onchain ID to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setOnchainID(address _onchainID) external;\n\n    /**\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Paused` event\n     */\n    function pause() external;\n\n    /**\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `Unpaused` event\n     */\n    function unpause() external;\n\n    /**\n     *  @dev sets an address frozen status for this token.\n     *  @param _userAddress The address for which to update frozen status\n     *  @param _freeze Frozen status of the address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `AddressFrozen` event\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\n\n    /**\n     *  @dev freezes token amount specified for given address.\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be frozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensFrozen` event\n     */\n    function freezePartialTokens(\n        address _userAddress,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev unfreezes token amount specified for given address\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be unfrozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event\n     */\n    function unfreezePartialTokens(\n        address _userAddress,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev sets the Identity Registry for the token\n     *  @param _identityRegistry the address of the Identity Registry to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits an `IdentityRegistryAdded` event\n     */\n    function setIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev sets the compliance contract of the token\n     *  @param _compliance the address of the compliance contract to set\n     *  Only the owner of the token smart contract can call this function\n     *  calls bindToken on the compliance contract\n     *  emits a `ComplianceAdded` event\n     */\n    function setCompliance(address _compliance) external;\n\n    /**\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `amount`\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\n     *  account is 100% composed of frozen tokens post-transfer.\n     *  Require that the `to` address is a verified address,\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n     *  emits a `Transfer` event\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool);\n\n    /**\n     *  @dev mint tokens on a wallet\n     *  Improved version of default mint method. Tokens can be minted\n     *  to an address if only it is a verified address as per the security token.\n     *  @param _to Address to mint the tokens to.\n     *  @param _amount Amount of tokens to mint.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Transfer` event\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev burn tokens on a wallet\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `value` amount\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\n     *  is 100% composed of frozen tokens post-transaction.\n     *  @param _userAddress Address to burn the tokens from.\n     *  @param _amount Amount of tokens to burn.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n     *  emits a `Transfer` event\n     */\n    function burn(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev recovery function used to force transfer tokens from a\n     *  lost wallet to a new wallet for an investor.\n     *  @param _lostWallet the wallet that the investor lost\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n     *  emits a `Transfer` event if the recovery process is successful\n     *  emits a `RecoverySuccess` event if the recovery process is successful\n     *  emits a `RecoveryFails` event if the recovery process fails\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external returns (bool);\n\n    /**\n     *  @dev function allowing to issue transfers in batch\n     *  Require that the msg.sender and `to` addresses are not frozen.\n     *  Require that the total value should not exceed available balance.\n     *  Require that the `to` addresses are all verified addresses,\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  emits _toList.length `Transfer` events\n     */\n    function batchTransfer(\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to issue forced transfers in batch\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _fromList The addresses of the senders\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n     *  emits _fromList.length `Transfer` events\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to mint tokens in batch\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _toList.length `Transfer` events\n     */\n    function batchMint(\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to burn tokens in batch\n     *  Require that the `_userAddresses` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `Transfer` events\n     */\n    function batchBurn(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to set frozen addresses in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses for which to update frozen status\n     *  @param _freeze Frozen status of the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `AddressFrozen` events\n     */\n    function batchSetAddressFrozen(\n        address[] calldata _userAddresses,\n        bool[] calldata _freeze\n    ) external;\n\n    /**\n     *  @dev function allowing to freeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be frozen\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensFrozen` events\n     */\n    function batchFreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to unfreeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensUnfrozen` events\n     */\n    function batchUnfreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * balanceOf() and transfer().\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the address of the onchainID of the token.\n     * the onchainID of the token gives all the information available\n     * about the token and is managed by the token issuer or his agent.\n     */\n    function onchainID() external view returns (address);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the TREX version of the token.\n     * current version is 3.0.0\n     */\n    function version() external view returns (string memory);\n\n    /**\n     *  @dev Returns the Identity Registry linked to the token\n     */\n    function identityRegistry() external view returns (IIdentityRegistry);\n\n    /**\n     *  @dev Returns the Compliance contract linked to the token\n     */\n    function compliance() external view returns (address);\n\n    /**\n     *  @dev Returns the freezing status of a wallet\n     *  if isFrozen returns `true` the wallet is frozen\n     *  if isFrozen returns `false` the wallet is not frozen\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n     *  a partial freeze or the whole token could be blocked by pause\n     *  @param _userAddress the address of the wallet on which isFrozen is called\n     */\n    function isFrozen(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\n     */\n    function getFrozenTokens(\n        address _userAddress\n    ) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"./IClaimIssuersRegistry.sol\";\nimport \"./IClaimTopicsRegistry.sol\";\nimport \"./IIdentityRegistryStorage.sol\";\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistry {\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n     */\n    event ClaimTopicsRegistrySet(\n        IClaimTopicsRegistry indexed claimTopicsRegistry\n    );\n\n    /**\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `identityStorage` is the address of the Identity Registry Storage contract\n     */\n    event IdentityStorageSet(IIdentityRegistryStorage indexed identityStorage);\n\n    /**\n     *  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\n     */\n    event ClaimIssuersRegistrySet(\n        IClaimIssuersRegistry indexed claimIssuersRegistry\n    );\n\n    /**\n     *  this event is emitted when an Identity is registered into the Identity Registry.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRegistered(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity is removed from the Identity Registry.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRemoved(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityUpdated(\n        IIdentity indexed oldIdentity,\n        IIdentity indexed newIdentity\n    );\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryUpdated(\n        address indexed investorAddress,\n        uint16 indexed country\n    );\n\n    /**\n     *  @dev Register an identity contract corresponding to a user address.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityRegistered` event\n     */\n    function registerIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the identity registry.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityRemoved` event\n     */\n    function deleteIdentity(address _userAddress) external;\n\n    /**\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n     *  emits `IdentityStorageSet` event\n     */\n    function setIdentityRegistryStorage(\n        IIdentityRegistryStorage _identityRegistryStorage\n    ) external;\n\n    /**\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n     *  emits `ClaimTopicsRegistrySet` event\n     */\n    function setClaimTopicsRegistry(\n        IClaimTopicsRegistry _claimTopicsRegistry\n    ) external;\n\n    /**\n     *  @dev Replace the actual claimIssuersRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\n     *  emits `ClaimIssuersRegistrySet` event\n     */\n    function setClaimIssuersRegistry(\n        IClaimIssuersRegistry _claimIssuersRegistry\n    ) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryUpdated` event\n     */\n    function updateCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityUpdated` event\n     */\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\n\n    /**\n     *  @dev function allowing to register identities in batch\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  Requires that none of the users has an identity contract already registered.\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the users\n     *  @param _identities The addresses of the corresponding identity contracts\n     *  @param _countries The countries of the corresponding investors\n     *  emits _userAddresses.length `IdentityRegistered` events\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        IIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external;\n\n    /**\n     *  @dev This functions checks whether a wallet has its Identity registered or not\n     *  in the Identity Registry.\n     *  @param _userAddress The address of the user to be checked.\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n     */\n    function contains(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev This functions checks whether an identity contract\n     *  corresponding to the provided user address has the required claims or not based\n     *  on the data fetched from claim issuers registry and from the claim topics registry\n     *  @param _userAddress The address of the user to be verified.\n     *  @return 'True' if the address is verified, 'false' if not.\n     */\n    function isVerified(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function identity(address _userAddress) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function investorCountry(\n        address _userAddress\n    ) external view returns (uint16);\n\n    /**\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n     */\n    function identityStorage() external view returns (IIdentityRegistryStorage);\n\n    /**\n     *  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\n     */\n    function issuersRegistry() external view returns (IClaimIssuersRegistry);\n\n    /**\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n     */\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"./IERC734.sol\";\nimport \"./IERC735.sol\";\n\n// solhint-disable-next-line no-empty-blocks\ninterface IIdentity is IERC734, IERC735 {\n    /**\n     * @dev Checks if a claim is valid.\n     * @param _identity the identity contract related to the claim\n     * @param claimTopic the claim topic of the claim\n     * @param sig the signature of the claim\n     * @param data the data field of the claim\n     * @return claimValid true if the claim is valid, false otherwise\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IClaimIssuer is IIdentity {\n\n    /**\n     * @dev Emitted when a claim is revoked.\n     *\n     * Specification: MUST be triggered when revoking a claim.\n     */\n    event ClaimRevoked(bytes indexed signature);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @notice will fetch the claim from the identity contract (unsafe).\n     * @param _claimId the id of the claim\n     * @param _identity the address of the identity contract\n     * @return isRevoked true when the claim is revoked\n     */\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @param signature the signature of the claim\n     */\n    function revokeClaimBySignature(bytes calldata signature) external;\n\n    /**\n     * @dev Returns revocation status of a claim.\n     * @param _sig the signature of the claim\n     * @return isRevoked true if the claim is revoked and false otherwise\n     */\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n\n    /**\n     * @dev Checks if a claim is valid.\n     * @param _identity the identity contract related to the claim\n     * @param claimTopic the claim topic of the claim\n     * @param sig the signature of the claim\n     * @param data the data field of the claim\n     * @return claimValid true if the claim is valid, false otherwise\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n}\n"
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistryStorage {\n    /// events\n\n    /**\n     *  this event is emitted when an Identity is registered into the storage contract.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityStored(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity is removed from the storage contract.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityUnstored(\n        address indexed investorAddress,\n        IIdentity indexed identity\n    );\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityModified(\n        IIdentity indexed oldIdentity,\n        IIdentity indexed newIdentity\n    );\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryModified(\n        address indexed investorAddress,\n        uint16 indexed country\n    );\n\n    /**\n     *  this event is emitted when an Identity Registry is bound to the storage contract\n     *  the event is emitted by the 'addIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry added\n     */\n    event IdentityRegistryBound(address indexed identityRegistry);\n\n    /**\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\n     *  the event is emitted by the 'removeIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry removed\n     */\n    event IdentityRegistryUnbound(address indexed identityRegistry);\n\n    /// functions\n\n    /**\n     *  @dev adds an identity contract corresponding to a user address in the storage.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityStored` event\n     */\n    function addIdentityToStorage(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the storage.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityUnstored` event\n     */\n    function removeIdentityFromStorage(address _userAddress) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryModified` event\n     */\n    function modifyStoredInvestorCountry(\n        address _userAddress,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityModified` event\n     */\n    function modifyStoredIdentity(\n        address _userAddress,\n        IIdentity _identity\n    ) external;\n\n    /**\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n     *  cannot bind more than 300 IR to 1 IRS\n     *  @param _identityRegistry The identity registry address to add.\n     */\n    function bindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n     *  @param _identityRegistry The identity registry address to remove.\n     */\n    function unbindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev Returns the identity registries linked to the storage contract\n     */\n    function linkedIdentityRegistries()\n        external\n        view\n        returns (address[] memory);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedIdentity(\n        address _userAddress\n    ) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedInvestorCountry(\n        address _userAddress\n    ) external view returns (uint16);\n}\n"
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\ninterface IClaimTopicsRegistry {\n    /**\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n     *  the event is emitted by the 'addClaimTopic' function\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\n     */\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n\n    /**\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n     *  the event is emitted by the 'removeClaimTopic' function\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\n     */\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    /**\n     * @dev Add a claim claim topic (For example: KYC=1, AML=2).\n     * Only owner can call.\n     * emits `ClaimTopicAdded` event\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\n     * @param _claimTopic The claim topic index\n     */\n    function addClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\n     *  Only owner can call.\n     *  emits `ClaimTopicRemoved` event\n     *  @param _claimTopic The claim topic index\n     */\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Get the claim claim topics for the security token\n     *  @return Array of claim claim topics\n     */\n    function getClaimTopics() external view returns (uint256[] memory);\n}\n"
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\n\ninterface IClaimIssuersRegistry {\n    /**\n     *  this event is emitted when a claim issuer is added in the registry.\n     *  the event is emitted by the addClaimIssuer function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\n     */\n    event ClaimIssuerAdded(\n        IClaimIssuer indexed claimIssuer,\n        uint256[] claimTopics\n    );\n\n    /**\n     *  this event is emitted when a claim issuer is removed from the registry.\n     *  the event is emitted by the removeClaimIssuer function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     */\n    event ClaimIssuerRemoved(IClaimIssuer indexed claimIssuer);\n\n    /**\n     *  this event is emitted when the set of claim topics is changed for a given claim issuer.\n     *  the event is emitted by the updateIssuerClaimTopics function\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\n     */\n    event ClaimTopicsUpdated(\n        IClaimIssuer indexed claimIssuer,\n        uint256[] claimTopics\n    );\n\n    /**\n     *  @dev registers a ClaimIssuer contract as claim claim issuer.\n     *  Requires that a ClaimIssuer contract doesn't already exist\n     *  Requires that the claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  Requires that there is no more than 50 Claim issuers\n     *  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimIssuerAdded` event\n     */\n    function addClaimIssuer(\n        IClaimIssuer _claimIssuer,\n        uint256[] calldata _claimTopics\n    ) external;\n\n    /**\n     *  @dev Removes the ClaimIssuer contract of a claim claim issuer.\n     *  Requires that the claim issuer contract to be registered first\n     *  @param _claimIssuer the claim issuer to remove.\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimIssuerRemoved` event\n     */\n    function removeClaimIssuer(IClaimIssuer _claimIssuer) external;\n\n    /**\n     *  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\n     *  Requires that this ClaimIssuer contract already exists in the registry\n     *  Requires that the provided claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  @param _claimIssuer the claim issuer to update.\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\n     *  emits a `ClaimTopicsUpdated` event\n     */\n    function updateIssuerClaimTopics(\n        IClaimIssuer _claimIssuer,\n        uint256[] calldata _claimTopics\n    ) external;\n\n    /**\n     *  @dev Function for getting all the claim claim issuers stored.\n     *  @return array of all claim issuers registered.\n     */\n    function getClaimIssuers() external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Function for getting all the claim issuer allowed for a given claim topic.\n     *  @param claimTopic the claim topic to get the claim issuers for.\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\n     */\n    function getClaimIssuersForClaimTopic(\n        uint256 claimTopic\n    ) external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Checks if the ClaimIssuer contract is claim\n     *  @param _issuer the address of the ClaimIssuer contract\n     *  @return true if the issuer is claim, false otherwise.\n     */\n    function isClaimIssuer(IClaimIssuer _issuer) external view returns (bool);\n\n    /**\n     *  @dev Function for getting all the claim topic of claim claim issuer\n     *  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\n     *  @param _claimIssuer the claim issuer concerned.\n     *  @return The set of claim topics that the claim issuer is allowed to emit\n     */\n    function getClaimIssuerClaimTopics(\n        IClaimIssuer _claimIssuer\n    ) external view returns (uint256[] memory);\n\n    /**\n     *  @dev Function for checking if the claim claim issuer is allowed\n     *  to emit a certain claim topic\n     *  @param _issuer the address of the claim issuer's ClaimIssuer contract\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n     *  @return true if the issuer is claim for this claim topic.\n     */\n    function hasClaimTopic(\n        IClaimIssuer _issuer,\n        uint256 _claimTopic\n    ) external view returns (bool);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n */\ninterface IERC735 {\n\n    /**\n     * @dev Emitted when a claim was added.\n     *\n     * Specification: MUST be triggered when a claim was successfully added.\n     */\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was removed.\n     *\n     * Specification: MUST be triggered when removeClaim was successfully called.\n     */\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was changed.\n     *\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\n     */\n    event ClaimChanged(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Add or update a claim.\n     *\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\n     *\n     * Specification: Add or update a claim from an issuer.\n     *\n     * _signature is a signed message of the following structure:\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n     */\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address issuer,\n        bytes calldata _signature,\n        bytes calldata _data,\n        string calldata _uri)\n    external returns (bytes32 claimRequestId);\n\n    /**\n     * @dev Removes a claim.\n     *\n     * Triggers Event: `ClaimRemoved`\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n\n    /**\n     * @dev Get a claim by its ID.\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function getClaim(bytes32 _claimId)\n    external view returns(\n        uint256 topic,\n        uint256 scheme,\n        address issuer,\n        bytes memory signature,\n        bytes memory data,\n        string memory uri);\n\n    /**\n     * @dev Returns an array of claim IDs by topic.\n     */\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\n}\n"
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\n */\ninterface IERC734 {\n\n    /**\n     * @dev Emitted when an execution request was approved.\n     *\n     * Specification: MUST be triggered when approve was successfully called.\n     */\n    event Approved(uint256 indexed executionId, bool approved);\n\n    /**\n     * @dev Emitted when an execute operation was approved and successfully performed.\n     *\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n     */\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execution request was performed via `execute`.\n     *\n     * Specification: MUST be triggered when execute was successfully called.\n     */\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execute operation was called and failed\n     *\n     * Specification: MUST be triggered when execute call failed\n     */\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when a key was added to the Identity.\n     *\n     * Specification: MUST be triggered when addKey was successfully called.\n     */\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Emitted when a key was removed from the Identity.\n     *\n     * Specification: MUST be triggered when removeKey was successfully called.\n     */\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n     *\n     * Triggers Event: `KeyAdded`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity\n     * itself. If it's the identity itself, the approval process will determine its approval.\n     */\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n\n    /**\n    * @dev Approves an execution.\n    *\n    * Triggers Event: `Approved`\n    * Triggers on execution successful Event: `Executed`\n    * Triggers on execution failure Event: `ExecutionFailed`\n    */\n    function approve(uint256 _id, bool _approve) external returns (bool success);\n\n    /**\n     * @dev Removes _purpose for _key from the identity.\n     *\n     * Triggers Event: `KeyRemoved`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\n     * If it's the identity itself, the approval process will determine its approval.\n     */\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n\n    /**\n     * @dev Passes an execution instruction to an ERC734 identity.\n     * How the execution is handled is up to the identity implementation:\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n     * approve this execution.\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n     *\n     * Triggers Event: ExecutionRequested\n     * Triggers on direct execution Event: Executed\n     */\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n\n    /**\n     * @dev Returns the full key data, if present in the identity.\n     */\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n\n    /**\n     * @dev Returns the list of purposes associated with a key.\n     */\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\n\n    /**\n     * @dev Returns an array of public key bytes32 held by this identity.\n     */\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n\n    /**\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n     */\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"IClaimIssuer": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "ClaimRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_sig",
									"type": "bytes"
								}
							],
							"name": "isClaimRevoked",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "sig",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "isClaimValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "revokeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "revokeClaimBySignature",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							},
							"ClaimRevoked(bytes)": {
								"details": "Emitted when a claim is revoked. Specification: MUST be triggered when revoking a claim."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"isClaimRevoked(bytes)": {
								"details": "Returns revocation status of a claim.",
								"params": {
									"_sig": "the signature of the claim"
								},
								"returns": {
									"_0": "isRevoked true if the claim is revoked and false otherwise"
								}
							},
							"isClaimValid(address,uint256,bytes,bytes)": {
								"details": "Checks if a claim is valid.",
								"params": {
									"_identity": "the identity contract related to the claim",
									"claimTopic": "the claim topic of the claim",
									"data": "the data field of the claim",
									"sig": "the signature of the claim"
								},
								"returns": {
									"_0": "claimValid true if the claim is valid, false otherwise"
								}
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"revokeClaim(bytes32,address)": {
								"details": "Revoke a claim previously issued, the claim is no longer considered as valid after revocation.",
								"params": {
									"_claimId": "the id of the claim",
									"_identity": "the address of the identity contract"
								},
								"returns": {
									"_0": "isRevoked true when the claim is revoked"
								}
							},
							"revokeClaimBySignature(bytes)": {
								"details": "Revoke a claim previously issued, the claim is no longer considered as valid after revocation.",
								"params": {
									"signature": "the signature of the claim"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"isClaimRevoked(bytes)": "2646b264",
							"isClaimValid(address,uint256,bytes,bytes)": "c0969a6e",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeClaim(bytes32)": "4eee424a",
							"removeKey(bytes32,uint256)": "53d413c5",
							"revokeClaim(bytes32,address)": "73c33708",
							"revokeClaimBySignature(bytes)": "9f7f9edd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ClaimRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"isClaimRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isClaimValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"revokeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeClaimBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"},\"ClaimRevoked(bytes)\":{\"details\":\"Emitted when a claim is revoked. Specification: MUST be triggered when revoking a claim.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"isClaimRevoked(bytes)\":{\"details\":\"Returns revocation status of a claim.\",\"params\":{\"_sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"isRevoked true if the claim is revoked and false otherwise\"}},\"isClaimValid(address,uint256,bytes,bytes)\":{\"details\":\"Checks if a claim is valid.\",\"params\":{\"_identity\":\"the identity contract related to the claim\",\"claimTopic\":\"the claim topic of the claim\",\"data\":\"the data field of the claim\",\"sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"claimValid true if the claim is valid, false otherwise\"}},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"revokeClaim(bytes32,address)\":{\"details\":\"Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\",\"params\":{\"_claimId\":\"the id of the claim\",\"_identity\":\"the address of the identity contract\"},\"returns\":{\"_0\":\"isRevoked true when the claim is revoked\"}},\"revokeClaimBySignature(bytes)\":{\"details\":\"Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\",\"params\":{\"signature\":\"the signature of the claim\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"revokeClaim(bytes32,address)\":{\"notice\":\"will fetch the claim from the identity contract (unsafe).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":\"IClaimIssuer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"revokeClaim(bytes32,address)": {
								"notice": "will fetch the claim from the identity contract (unsafe)."
							}
						},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"IERC734": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface of the ERC734 (Key Holder) standard as defined in the EIP.",
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeKey(bytes32,uint256)": "53d413c5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface of the ERC734 (Key Holder) standard as defined in the EIP.\",\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":\"IERC734\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"IERC735": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface of the ERC735 (Claim Holder) standard as defined in the EIP.",
						"events": {
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"removeClaim(bytes32)": "4eee424a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface of the ERC735 (Claim Holder) standard as defined in the EIP.\",\"events\":{\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IERC735.sol\":\"IERC735\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"IIdentity": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "Approved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "claimId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "ClaimRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "ExecutionRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purpose",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								}
							],
							"name": "KeyRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "addClaim",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "claimRequestId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_keyType",
									"type": "uint256"
								}
							],
							"name": "addKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_approve",
									"type": "bool"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "executionId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "topic",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "scheme",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "issuer",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_topic",
									"type": "uint256"
								}
							],
							"name": "getClaimIdsByTopic",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "claimIds",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKey",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "purposes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "keyType",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								}
							],
							"name": "getKeyPurposes",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_purposes",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "getKeysByPurpose",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "keys",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "sig",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "isClaimValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "keyHasPurpose",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exists",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_claimId",
									"type": "bytes32"
								}
							],
							"name": "removeClaim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_purpose",
									"type": "uint256"
								}
							],
							"name": "removeKey",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approved(uint256,bool)": {
								"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
							},
							"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
							},
							"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
							},
							"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
								"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
							},
							"Executed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
							},
							"ExecutionFailed(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
							},
							"ExecutionRequested(uint256,address,uint256,bytes)": {
								"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
							},
							"KeyAdded(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
							},
							"KeyRemoved(bytes32,uint256,uint256)": {
								"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
							}
						},
						"kind": "dev",
						"methods": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": {
								"details": "Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
							},
							"addKey(bytes32,uint256,uint256)": {
								"details": "Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							},
							"approve(uint256,bool)": {
								"details": "Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`"
							},
							"execute(address,uint256,bytes)": {
								"details": "Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed"
							},
							"getClaim(bytes32)": {
								"details": "Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"getClaimIdsByTopic(uint256)": {
								"details": "Returns an array of claim IDs by topic."
							},
							"getKey(bytes32)": {
								"details": "Returns the full key data, if present in the identity."
							},
							"getKeyPurposes(bytes32)": {
								"details": "Returns the list of purposes associated with a key."
							},
							"getKeysByPurpose(uint256)": {
								"details": "Returns an array of public key bytes32 held by this identity."
							},
							"isClaimValid(address,uint256,bytes,bytes)": {
								"details": "Checks if a claim is valid.",
								"params": {
									"_identity": "the identity contract related to the claim",
									"claimTopic": "the claim topic of the claim",
									"data": "the data field of the claim",
									"sig": "the signature of the claim"
								},
								"returns": {
									"_0": "claimValid true if the claim is valid, false otherwise"
								}
							},
							"keyHasPurpose(bytes32,uint256)": {
								"details": "Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
							},
							"removeClaim(bytes32)": {
								"details": "Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
							},
							"removeKey(bytes32,uint256)": {
								"details": "Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaim(uint256,uint256,address,bytes,bytes,string)": "b1a34e0d",
							"addKey(bytes32,uint256,uint256)": "1d381240",
							"approve(uint256,bool)": "747442d3",
							"execute(address,uint256,bytes)": "b61d27f6",
							"getClaim(bytes32)": "c9100bcb",
							"getClaimIdsByTopic(uint256)": "80e9e9e1",
							"getKey(bytes32)": "12aaac70",
							"getKeyPurposes(bytes32)": "fb307b34",
							"getKeysByPurpose(uint256)": "9010f726",
							"isClaimValid(address,uint256,bytes,bytes)": "c0969a6e",
							"keyHasPurpose(bytes32,uint256)": "d202158d",
							"removeClaim(bytes32)": "4eee424a",
							"removeKey(bytes32,uint256)": "53d413c5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isClaimValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approved(uint256,bool)\":{\"details\":\"Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called.\"},\"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added.\"},\"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\"},\"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called.\"},\"Executed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved.\"},\"ExecutionFailed(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed\"},\"ExecutionRequested(uint256,address,uint256,bytes)\":{\"details\":\"Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called.\"},\"KeyAdded(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called.\"},\"KeyRemoved(bytes32,uint256,uint256)\":{\"details\":\"Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called.\"}},\"kind\":\"dev\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\"},\"addKey(bytes32,uint256,uint256)\":{\"details\":\"Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"},\"approve(uint256,bool)\":{\"details\":\"Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`\"},\"execute(address,uint256,bytes)\":{\"details\":\"Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed\"},\"getClaim(bytes32)\":{\"details\":\"Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"getClaimIdsByTopic(uint256)\":{\"details\":\"Returns an array of claim IDs by topic.\"},\"getKey(bytes32)\":{\"details\":\"Returns the full key data, if present in the identity.\"},\"getKeyPurposes(bytes32)\":{\"details\":\"Returns the list of purposes associated with a key.\"},\"getKeysByPurpose(uint256)\":{\"details\":\"Returns an array of public key bytes32 held by this identity.\"},\"isClaimValid(address,uint256,bytes,bytes)\":{\"details\":\"Checks if a claim is valid.\",\"params\":{\"_identity\":\"the identity contract related to the claim\",\"claimTopic\":\"the claim topic of the claim\",\"data\":\"the data field of the claim\",\"sig\":\"the signature of the claim\"},\"returns\":{\"_0\":\"claimValid true if the claim is valid, false otherwise\"}},\"keyHasPurpose(bytes32,uint256)\":{\"details\":\"Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\"},\"removeClaim(bytes32)\":{\"details\":\"Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\"},\"removeKey(bytes32,uint256)\":{\"details\":\"Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":\"IIdentity\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"IClaimIssuersRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "ClaimIssuerAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								}
							],
							"name": "ClaimIssuerRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuer",
									"name": "claimIssuer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "ClaimTopicsUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "addClaimIssuer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								}
							],
							"name": "getClaimIssuerClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimIssuers",
							"outputs": [
								{
									"internalType": "contract IClaimIssuer[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "getClaimIssuersForClaimTopic",
							"outputs": [
								{
									"internalType": "contract IClaimIssuer[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_issuer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "hasClaimTopic",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_issuer",
									"type": "address"
								}
							],
							"name": "isClaimIssuer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								}
							],
							"name": "removeClaimIssuer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuer",
									"name": "_claimIssuer",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_claimTopics",
									"type": "uint256[]"
								}
							],
							"name": "updateIssuerClaimTopics",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addClaimIssuer(address,uint256[])": {
								"details": "registers a ClaimIssuer contract as claim claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Claim issuers",
								"params": {
									"_claimIssuer": "The ClaimIssuer contract address of the claim claim issuer.",
									"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerAdded` event"
								}
							},
							"getClaimIssuerClaimTopics(address)": {
								"details": "Function for getting all the claim topic of claim claim issuer  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.",
								"params": {
									"_claimIssuer": "the claim issuer concerned."
								},
								"returns": {
									"_0": "The set of claim topics that the claim issuer is allowed to emit"
								}
							},
							"getClaimIssuers()": {
								"details": "Function for getting all the claim claim issuers stored.",
								"returns": {
									"_0": "array of all claim issuers registered."
								}
							},
							"getClaimIssuersForClaimTopic(uint256)": {
								"details": "Function for getting all the claim issuer allowed for a given claim topic.",
								"params": {
									"claimTopic": "the claim topic to get the claim issuers for."
								},
								"returns": {
									"_0": "array of all claim issuer addresses that are allowed for the given claim topic."
								}
							},
							"hasClaimTopic(address,uint256)": {
								"details": "Function for checking if the claim claim issuer is allowed  to emit a certain claim topic",
								"params": {
									"_claimTopic": "the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it",
									"_issuer": "the address of the claim issuer's ClaimIssuer contract"
								},
								"returns": {
									"_0": "true if the issuer is claim for this claim topic."
								}
							},
							"isClaimIssuer(address)": {
								"details": "Checks if the ClaimIssuer contract is claim",
								"params": {
									"_issuer": "the address of the ClaimIssuer contract"
								},
								"returns": {
									"_0": "true if the issuer is claim, false otherwise."
								}
							},
							"removeClaimIssuer(address)": {
								"details": "Removes the ClaimIssuer contract of a claim claim issuer.  Requires that the claim issuer contract to be registered first",
								"params": {
									"_claimIssuer": "the claim issuer to remove.  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerRemoved` event"
								}
							},
							"updateIssuerClaimTopics(address,uint256[])": {
								"details": "Updates the set of claim topics that a claim issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics",
								"params": {
									"_claimIssuer": "the claim issuer to update.",
									"_claimTopics": "the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimTopicsUpdated` event"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaimIssuer(address,uint256[])": "38d742a4",
							"getClaimIssuerClaimTopics(address)": "122dade8",
							"getClaimIssuers()": "d4f4ac4e",
							"getClaimIssuersForClaimTopic(uint256)": "6b2c56bd",
							"hasClaimTopic(address,uint256)": "34a89987",
							"isClaimIssuer(address)": "6de48708",
							"removeClaimIssuer(address)": "0b4b764c",
							"updateIssuerClaimTopics(address,uint256[])": "04bc7e84"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimIssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"}],\"name\":\"ClaimIssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuer\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTopicsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"addClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"name\":\"getClaimIssuerClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimIssuers\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"getClaimIssuersForClaimTopic\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"isClaimIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"name\":\"removeClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateIssuerClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimIssuer(address,uint256[])\":{\"details\":\"registers a ClaimIssuer contract as claim claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Claim issuers\",\"params\":{\"_claimIssuer\":\"The ClaimIssuer contract address of the claim claim issuer.\",\"_claimTopics\":\"the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerAdded` event\"}},\"getClaimIssuerClaimTopics(address)\":{\"details\":\"Function for getting all the claim topic of claim claim issuer  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\",\"params\":{\"_claimIssuer\":\"the claim issuer concerned.\"},\"returns\":{\"_0\":\"The set of claim topics that the claim issuer is allowed to emit\"}},\"getClaimIssuers()\":{\"details\":\"Function for getting all the claim claim issuers stored.\",\"returns\":{\"_0\":\"array of all claim issuers registered.\"}},\"getClaimIssuersForClaimTopic(uint256)\":{\"details\":\"Function for getting all the claim issuer allowed for a given claim topic.\",\"params\":{\"claimTopic\":\"the claim topic to get the claim issuers for.\"},\"returns\":{\"_0\":\"array of all claim issuer addresses that are allowed for the given claim topic.\"}},\"hasClaimTopic(address,uint256)\":{\"details\":\"Function for checking if the claim claim issuer is allowed  to emit a certain claim topic\",\"params\":{\"_claimTopic\":\"the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\",\"_issuer\":\"the address of the claim issuer's ClaimIssuer contract\"},\"returns\":{\"_0\":\"true if the issuer is claim for this claim topic.\"}},\"isClaimIssuer(address)\":{\"details\":\"Checks if the ClaimIssuer contract is claim\",\"params\":{\"_issuer\":\"the address of the ClaimIssuer contract\"},\"returns\":{\"_0\":\"true if the issuer is claim, false otherwise.\"}},\"removeClaimIssuer(address)\":{\"details\":\"Removes the ClaimIssuer contract of a claim claim issuer.  Requires that the claim issuer contract to be registered first\",\"params\":{\"_claimIssuer\":\"the claim issuer to remove.  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimIssuerRemoved` event\"}},\"updateIssuerClaimTopics(address,uint256[])\":{\"details\":\"Updates the set of claim topics that a claim issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics\",\"params\":{\"_claimIssuer\":\"the claim issuer to update.\",\"_claimTopics\":\"the set of claim topics that the claim issuer is allowed to emit  This function can only be called by the owner of the Claim Issuers Registry contract  emits a `ClaimTopicsUpdated` event\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimIssuerAdded(address,uint256[])\":{\"notice\":\"this event is emitted when a claim issuer is added in the registry.  the event is emitted by the addClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit\"},\"ClaimIssuerRemoved(address)\":{\"notice\":\"this event is emitted when a claim issuer is removed from the registry.  the event is emitted by the removeClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\"},\"ClaimTopicsUpdated(address,uint256[])\":{\"notice\":\"this event is emitted when the set of claim topics is changed for a given claim issuer.  the event is emitted by the updateIssuerClaimTopics function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IClaimIssuersRegistry.sol\":\"IClaimIssuersRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimIssuerAdded(address,uint256[])": {
								"notice": "this event is emitted when a claim issuer is added in the registry.  the event is emitted by the addClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
							},
							"ClaimIssuerRemoved(address)": {
								"notice": "this event is emitted when a claim issuer is removed from the registry.  the event is emitted by the removeClaimIssuer function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract"
							},
							"ClaimTopicsUpdated(address,uint256[])": {
								"notice": "this event is emitted when the set of claim topics is changed for a given claim issuer.  the event is emitted by the updateIssuerClaimTopics function  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"IClaimTopicsRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "addClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "removeClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addClaimTopic(uint256)": {
								"details": "Add a claim claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							},
							"getClaimTopics()": {
								"details": "Get the claim claim topics for the security token",
								"returns": {
									"_0": "Array of claim claim topics"
								}
							},
							"removeClaimTopic(uint256)": {
								"details": "Remove a claim claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaimTopic(uint256)": "c7b22551",
							"getClaimTopics()": "df09d604",
							"removeClaimTopic(uint256)": "08297846"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"Add a claim claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues\",\"params\":{\"_claimTopic\":\"The claim topic index\"}},\"getClaimTopics()\":{\"details\":\"Get the claim claim topics for the security token\",\"returns\":{\"_0\":\"Array of claim claim topics\"}},\"removeClaimTopic(uint256)\":{\"details\":\"Remove a claim claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event\",\"params\":{\"_claimTopic\":\"The claim topic index\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicAdded(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry\"},\"ClaimTopicRemoved(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IClaimTopicsRegistry.sol\":\"IClaimTopicsRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimTopicAdded(uint256)": {
								"notice": "this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry"
							},
							"ClaimTopicRemoved(uint256)": {
								"notice": "this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"IIdentityRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimIssuersRegistry",
									"name": "claimIssuersRegistry",
									"type": "address"
								}
							],
							"name": "ClaimIssuersRegistrySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IClaimTopicsRegistry",
									"name": "claimTopicsRegistry",
									"type": "address"
								}
							],
							"name": "ClaimTopicsRegistrySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "country",
									"type": "uint16"
								}
							],
							"name": "CountryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentityRegistryStorage",
									"name": "identityStorage",
									"type": "address"
								}
							],
							"name": "IdentityStorageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "oldIdentity",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "newIdentity",
									"type": "address"
								}
							],
							"name": "IdentityUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "contract IIdentity[]",
									"name": "_identities",
									"type": "address[]"
								},
								{
									"internalType": "uint16[]",
									"name": "_countries",
									"type": "uint16[]"
								}
							],
							"name": "batchRegisterIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "contains",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "deleteIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "identity",
							"outputs": [
								{
									"internalType": "contract IIdentity",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "identityStorage",
							"outputs": [
								{
									"internalType": "contract IIdentityRegistryStorage",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "investorCountry",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "isVerified",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "issuersRegistry",
							"outputs": [
								{
									"internalType": "contract IClaimIssuersRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "registerIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimIssuersRegistry",
									"name": "_claimIssuersRegistry",
									"type": "address"
								}
							],
							"name": "setClaimIssuersRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IClaimTopicsRegistry",
									"name": "_claimTopicsRegistry",
									"type": "address"
								}
							],
							"name": "setClaimTopicsRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IIdentityRegistryStorage",
									"name": "_identityRegistryStorage",
									"type": "address"
								}
							],
							"name": "setIdentityRegistryStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "topicsRegistry",
							"outputs": [
								{
									"internalType": "contract IClaimTopicsRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "updateCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "updateIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"batchRegisterIdentity(address[],address[],uint16[])": {
								"details": "function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_countries": "The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events",
									"_identities": "The addresses of the corresponding identity contracts",
									"_userAddresses": "The addresses of the users"
								}
							},
							"contains(address)": {
								"details": "This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.",
								"params": {
									"_userAddress": "The address of the user to be checked."
								},
								"returns": {
									"_0": "'True' if the address is contained in the Identity Registry, 'false' if not."
								}
							},
							"deleteIdentity(address)": {
								"details": "Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_userAddress": "The address of the user to be removed  emits `IdentityRemoved` event"
								}
							},
							"identity(address)": {
								"details": "Returns the onchainID of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"identityStorage()": {
								"details": "Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
							},
							"investorCountry(address)": {
								"details": "Returns the country code of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"isVerified(address)": {
								"details": "This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from claim issuers registry and from the claim topics registry",
								"params": {
									"_userAddress": "The address of the user to be verified."
								},
								"returns": {
									"_0": "'True' if the address is verified, 'false' if not."
								}
							},
							"issuersRegistry()": {
								"details": "Returns the ClaimIssuersRegistry linked to the current IdentityRegistry."
							},
							"registerIdentity(address,address,uint16)": {
								"details": "Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_country": "The country of the investor  emits `IdentityRegistered` event",
									"_identity": "The address of the user's identity contract",
									"_userAddress": "The address of the user"
								}
							},
							"setClaimIssuersRegistry(address)": {
								"details": "Replace the actual claimIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_claimIssuersRegistry": "The address of the new Claim Issuers Registry  emits `ClaimIssuersRegistrySet` event"
								}
							},
							"setClaimTopicsRegistry(address)": {
								"details": "Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_claimTopicsRegistry": "The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event"
								}
							},
							"setIdentityRegistryStorage(address)": {
								"details": "Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
								"params": {
									"_identityRegistryStorage": "The address of the new Identity Registry Storage  emits `IdentityStorageSet` event"
								}
							},
							"topicsRegistry()": {
								"details": "Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
							},
							"updateCountry(address,uint16)": {
								"details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_country": "The new country of the user  emits `CountryUpdated` event",
									"_userAddress": "The address of the user"
								}
							},
							"updateIdentity(address,address)": {
								"details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
								"params": {
									"_identity": "The address of the user's new identity contract  emits `IdentityUpdated` event",
									"_userAddress": "The address of the user"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchRegisterIdentity(address[],address[],uint16[])": "653dc9f1",
							"contains(address)": "5dbe47e8",
							"deleteIdentity(address)": "a8d29d1d",
							"identity(address)": "f0eb5e54",
							"identityStorage()": "f11abfd8",
							"investorCountry(address)": "7e42683b",
							"isVerified(address)": "b9209e33",
							"issuersRegistry()": "b4f3fcb7",
							"registerIdentity(address,address,uint16)": "454a03e0",
							"setClaimIssuersRegistry(address)": "6bc72c90",
							"setClaimTopicsRegistry(address)": "670af6a9",
							"setIdentityRegistryStorage(address)": "26d941ae",
							"topicsRegistry()": "3b3e12f4",
							"updateCountry(address,uint16)": "3b239a7f",
							"updateIdentity(address,address)": "8e098ca1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"ClaimIssuersRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"ClaimTopicsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"_claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"setClaimIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"setClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"_identityRegistryStorage\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicsRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_countries\":\"The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events\",\"_identities\":\"The addresses of the corresponding identity contracts\",\"_userAddresses\":\"The addresses of the users\"}},\"contains(address)\":{\"details\":\"This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.\",\"params\":{\"_userAddress\":\"The address of the user to be checked.\"},\"returns\":{\"_0\":\"'True' if the address is contained in the Identity Registry, 'false' if not.\"}},\"deleteIdentity(address)\":{\"details\":\"Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityRemoved` event\"}},\"identity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"identityStorage()\":{\"details\":\"Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\"},\"investorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"isVerified(address)\":{\"details\":\"This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from claim issuers registry and from the claim topics registry\",\"params\":{\"_userAddress\":\"The address of the user to be verified.\"},\"returns\":{\"_0\":\"'True' if the address is verified, 'false' if not.\"}},\"issuersRegistry()\":{\"details\":\"Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\"},\"registerIdentity(address,address,uint16)\":{\"details\":\"Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityRegistered` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"setClaimIssuersRegistry(address)\":{\"details\":\"Replace the actual claimIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimIssuersRegistry\":\"The address of the new Claim Issuers Registry  emits `ClaimIssuersRegistrySet` event\"}},\"setClaimTopicsRegistry(address)\":{\"details\":\"Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimTopicsRegistry\":\"The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event\"}},\"setIdentityRegistryStorage(address)\":{\"details\":\"Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_identityRegistryStorage\":\"The address of the new Identity Registry Storage  emits `IdentityStorageSet` event\"}},\"topicsRegistry()\":{\"details\":\"Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\"},\"updateCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryUpdated` event\",\"_userAddress\":\"The address of the user\"}},\"updateIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityUpdated` event\",\"_userAddress\":\"The address of the user\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimIssuersRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\"},\"ClaimTopicsRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\"},\"CountryUpdated(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityRegistered(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityRemoved(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityStorageSet(address)\":{\"notice\":\"this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract\"},\"IdentityUpdated(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IIdentityRegistry.sol\":\"IIdentityRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0xbc47d0a331c5a816e8eee459239de4d312a578fbad75985af02ffb04e0389743\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://39a4cdc9fe0479f17ace597e185ee1f179f540af838a5a331244150163bb10f6\",\"dweb:/ipfs/QmWQqSWAgndgbYT6pyHZ9SexrJHZy3XyQ3GMpLRwT743eL\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimIssuersRegistrySet(address)": {
								"notice": "this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract"
							},
							"ClaimTopicsRegistrySet(address)": {
								"notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
							},
							"CountryUpdated(address,uint16)": {
								"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
							},
							"IdentityRegistered(address,address)": {
								"notice": "this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityRemoved(address,address)": {
								"notice": "this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityStorageSet(address)": {
								"notice": "this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract"
							},
							"IdentityUpdated(address,address)": {
								"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"IIdentityRegistryStorage": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "country",
									"type": "uint16"
								}
							],
							"name": "CountryModified",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "oldIdentity",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "newIdentity",
									"type": "address"
								}
							],
							"name": "IdentityModified",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryBound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryUnbound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityStored",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "investorAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IIdentity",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "IdentityUnstored",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "addIdentityToStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "bindIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "linkedIdentityRegistries",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "contract IIdentity",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "modifyStoredIdentity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_country",
									"type": "uint16"
								}
							],
							"name": "modifyStoredInvestorCountry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "removeIdentityFromStorage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "storedIdentity",
							"outputs": [
								{
									"internalType": "contract IIdentity",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "storedInvestorCountry",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "unbindIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addIdentityToStorage(address,address,uint16)": {
								"details": "adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_country": "The country of the investor  emits `IdentityStored` event",
									"_identity": "The address of the user's identity contract",
									"_userAddress": "The address of the user"
								}
							},
							"bindIdentityRegistry(address)": {
								"params": {
									"_identityRegistry": "The identity registry address to add."
								}
							},
							"linkedIdentityRegistries()": {
								"details": "Returns the identity registries linked to the storage contract"
							},
							"modifyStoredIdentity(address,address)": {
								"details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_identity": "The address of the user's new identity contract  emits `IdentityModified` event",
									"_userAddress": "The address of the user"
								}
							},
							"modifyStoredInvestorCountry(address,uint16)": {
								"details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_country": "The new country of the user  emits `CountryModified` event",
									"_userAddress": "The address of the user"
								}
							},
							"removeIdentityFromStorage(address)": {
								"details": "Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract",
								"params": {
									"_userAddress": "The address of the user to be removed  emits `IdentityUnstored` event"
								}
							},
							"storedIdentity(address)": {
								"details": "Returns the onchainID of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"storedInvestorCountry(address)": {
								"details": "Returns the country code of an investor.",
								"params": {
									"_userAddress": "The wallet of the investor"
								}
							},
							"unbindIdentityRegistry(address)": {
								"params": {
									"_identityRegistry": "The identity registry address to remove."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addIdentityToStorage(address,address,uint16)": "a53410dd",
							"bindIdentityRegistry(address)": "690a49f9",
							"linkedIdentityRegistries()": "bf9eb959",
							"modifyStoredIdentity(address,address)": "e805cf86",
							"modifyStoredInvestorCountry(address,uint16)": "9f3418d5",
							"removeIdentityFromStorage(address)": "cf191bcd",
							"storedIdentity(address)": "7988d3a5",
							"storedInvestorCountry(address)": "727e13bc",
							"unbindIdentityRegistry(address)": "97a012f7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityUnstored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"addIdentityToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"bindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedIdentityRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"modifyStoredIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"modifyStoredInvestorCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeIdentityFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedIdentity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedInvestorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"unbindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addIdentityToStorage(address,address,uint16)\":{\"details\":\"adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityStored` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"bindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to add.\"}},\"linkedIdentityRegistries()\":{\"details\":\"Returns the identity registries linked to the storage contract\"},\"modifyStoredIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityModified` event\",\"_userAddress\":\"The address of the user\"}},\"modifyStoredInvestorCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryModified` event\",\"_userAddress\":\"The address of the user\"}},\"removeIdentityFromStorage(address)\":{\"details\":\"Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityUnstored` event\"}},\"storedIdentity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"storedInvestorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"unbindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to remove.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CountryModified(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityModified(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"},\"IdentityRegistryBound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added\"},\"IdentityRegistryUnbound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed\"},\"IdentityStored(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityUnstored(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"}},\"kind\":\"user\",\"methods\":{\"bindIdentityRegistry(address)\":{\"notice\":\"Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS\"},\"unbindIdentityRegistry(address)\":{\"notice\":\"Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/interface/IIdentityRegistryStorage.sol\":\"IIdentityRegistryStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"CountryModified(address,uint16)": {
								"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
							},
							"IdentityModified(address,address)": {
								"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
							},
							"IdentityRegistryBound(address)": {
								"notice": "this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added"
							},
							"IdentityRegistryUnbound(address)": {
								"notice": "this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed"
							},
							"IdentityStored(address,address)": {
								"notice": "this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							},
							"IdentityUnstored(address,address)": {
								"notice": "this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
							}
						},
						"kind": "user",
						"methods": {
							"bindIdentityRegistry(address)": {
								"notice": "Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS"
							},
							"unbindIdentityRegistry(address)": {
								"notice": "Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/token/IToken.sol": {
				"IToken": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bool",
									"name": "_isFrozen",
									"type": "bool"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "AddressFrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_compliance",
									"type": "address"
								}
							],
							"name": "ComplianceAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "IdentityRegistryAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_lostWallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_newWallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_investorOnchainID",
									"type": "address"
								}
							],
							"name": "RecoverySuccess",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "TokensFrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "TokensUnfrozen",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_newOnchainID",
									"type": "address"
								}
							],
							"name": "UpdatedOnchainID",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_fromList",
									"type": "address[]"
								},
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchForcedTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchFreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "bool[]",
									"name": "_freeze",
									"type": "bool[]"
								}
							],
							"name": "batchSetAddressFrozen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_toList",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_userAddresses",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amounts",
									"type": "uint256[]"
								}
							],
							"name": "batchUnfreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "compliance",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "forcedTransfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "freezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "getFrozenTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "identityRegistry",
							"outputs": [
								{
									"internalType": "contract IIdentityRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								}
							],
							"name": "isFrozen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "onchainID",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_lostWallet",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_newWallet",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_investorOnchainID",
									"type": "address"
								}
							],
							"name": "recoveryAddress",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_freeze",
									"type": "bool"
								}
							],
							"name": "setAddressFrozen",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_compliance",
									"type": "address"
								}
							],
							"name": "setCompliance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identityRegistry",
									"type": "address"
								}
							],
							"name": "setIdentityRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_onchainID",
									"type": "address"
								}
							],
							"name": "setOnchainID",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "unfreezePartialTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "version",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "interface",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"batchBurn(address[],uint256[])": {
								"details": "function allowing to burn tokens in batch  Require that the `_userAddresses` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to burn from the corresponding wallets  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `Transfer` events",
									"_userAddresses": "The addresses of the wallets concerned by the burn"
								}
							},
							"batchForcedTransfer(address[],address[],uint256[])": {
								"details": "function allowing to issue forced transfers in batch  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to transfer to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`  emits _fromList.length `Transfer` events",
									"_fromList": "The addresses of the senders",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchFreezePartialTokens(address[],uint256[])": {
								"details": "function allowing to freeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "the amount of tokens to freeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensFrozen` events",
									"_userAddresses": "The addresses on which tokens need to be frozen"
								}
							},
							"batchMint(address[],uint256[])": {
								"details": "function allowing to mint tokens in batch  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to mint to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits _toList.length `Transfer` events",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchSetAddressFrozen(address[],bool[])": {
								"details": "function allowing to set frozen addresses in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_freeze": "Frozen status of the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `AddressFrozen` events",
									"_userAddresses": "The addresses for which to update frozen status"
								}
							},
							"batchTransfer(address[],uint256[])": {
								"details": "function allowing to issue transfers in batch  Require that the msg.sender and `to` addresses are not frozen.  Require that the total value should not exceed available balance.  Require that the `to` addresses are all verified addresses,  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "The number of tokens to transfer to the corresponding receiver  emits _toList.length `Transfer` events",
									"_toList": "The addresses of the receivers"
								}
							},
							"batchUnfreezePartialTokens(address[],uint256[])": {
								"details": "function allowing to unfreeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
								"params": {
									"_amounts": "the amount of tokens to unfreeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensUnfrozen` events",
									"_userAddresses": "The addresses on which tokens need to be unfrozen"
								}
							},
							"burn(address,uint256)": {
								"details": "burn tokens on a wallet  In case the `account` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `value` amount  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the burn, in such a case, the remaining balance on the `account`  is 100% composed of frozen tokens post-transaction.",
								"params": {
									"_amount": "Amount of tokens to burn.  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`  emits a `Transfer` event",
									"_userAddress": "Address to burn the tokens from."
								}
							},
							"compliance()": {
								"details": "Returns the Compliance contract linked to the token"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 1 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including balanceOf() and transfer()."
							},
							"forcedTransfer(address,address,uint256)": {
								"details": "force a transfer of tokens between 2 whitelisted wallets  In case the `from` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `amount`  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the transfer, in such a case, the remaining balance on the `from`  account is 100% composed of frozen tokens post-transfer.  Require that the `to` address is a verified address,",
								"params": {
									"_amount": "The number of tokens to transfer",
									"_from": "The address of the sender",
									"_to": "The address of the receiver"
								},
								"returns": {
									"_0": "`true` if successful and revert if unsuccessful  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`  emits a `Transfer` event"
								}
							},
							"freezePartialTokens(address,uint256)": {
								"details": "freezes token amount specified for given address.",
								"params": {
									"_amount": "Amount of Tokens to be frozen  This function can only be called by a wallet set as agent of the token  emits a `TokensFrozen` event",
									"_userAddress": "The address for which to update frozen tokens"
								}
							},
							"getFrozenTokens(address)": {
								"details": "Returns the amount of tokens that are partially frozen on a wallet  the amount of frozen tokens is always <= to the total balance of the wallet",
								"params": {
									"_userAddress": "the address of the wallet on which getFrozenTokens is called"
								}
							},
							"identityRegistry()": {
								"details": "Returns the Identity Registry linked to the token"
							},
							"isFrozen(address)": {
								"details": "Returns the freezing status of a wallet  if isFrozen returns `true` the wallet is frozen  if isFrozen returns `false` the wallet is not frozen  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by  a partial freeze or the whole token could be blocked by pause",
								"params": {
									"_userAddress": "the address of the wallet on which isFrozen is called"
								}
							},
							"mint(address,uint256)": {
								"details": "mint tokens on a wallet  Improved version of default mint method. Tokens can be minted  to an address if only it is a verified address as per the security token.",
								"params": {
									"_amount": "Amount of tokens to mint.  This function can only be called by a wallet set as agent of the token  emits a `Transfer` event",
									"_to": "Address to mint the tokens to."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"onchainID()": {
								"details": "Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent."
							},
							"pause()": {
								"details": "pauses the token contract, when contract is paused investors cannot transfer tokens anymore  This function can only be called by a wallet set as agent of the token  emits a `Paused` event"
							},
							"recoveryAddress(address,address,address)": {
								"details": "recovery function used to force transfer tokens from a  lost wallet to a new wallet for an investor.",
								"params": {
									"_investorOnchainID": "the onchainID of the investor asking for a recovery  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful  emits a `Transfer` event if the recovery process is successful  emits a `RecoverySuccess` event if the recovery process is successful  emits a `RecoveryFails` event if the recovery process fails",
									"_lostWallet": "the wallet that the investor lost",
									"_newWallet": "the newly provided wallet on which tokens have to be transferred"
								}
							},
							"setAddressFrozen(address,bool)": {
								"details": "sets an address frozen status for this token.",
								"params": {
									"_freeze": "Frozen status of the address  This function can only be called by a wallet set as agent of the token  emits an `AddressFrozen` event",
									"_userAddress": "The address for which to update frozen status"
								}
							},
							"setCompliance(address)": {
								"details": "sets the compliance contract of the token",
								"params": {
									"_compliance": "the address of the compliance contract to set  Only the owner of the token smart contract can call this function  calls bindToken on the compliance contract  emits a `ComplianceAdded` event"
								}
							},
							"setIdentityRegistry(address)": {
								"details": "sets the Identity Registry for the token",
								"params": {
									"_identityRegistry": "the address of the Identity Registry to set  Only the owner of the token smart contract can call this function  emits an `IdentityRegistryAdded` event"
								}
							},
							"setOnchainID(address)": {
								"details": "sets the onchain ID of the token",
								"params": {
									"_onchainID": "the address of the onchain ID to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"unfreezePartialTokens(address,uint256)": {
								"details": "unfreezes token amount specified for given address",
								"params": {
									"_amount": "Amount of Tokens to be unfrozen  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event",
									"_userAddress": "The address for which to update frozen tokens"
								}
							},
							"unpause()": {
								"details": "unpauses the token contract, when contract is unpaused investors can transfer tokens  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens  This function can only be called by a wallet set as agent of the token  emits an `Unpaused` event"
							},
							"version()": {
								"details": "Returns the TREX version of the token. current version is 3.0.0"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"batchBurn(address[],uint256[])": "4a6cc677",
							"batchForcedTransfer(address[],address[],uint256[])": "42a47abc",
							"batchFreezePartialTokens(address[],uint256[])": "fc7e5fa8",
							"batchMint(address[],uint256[])": "68573107",
							"batchSetAddressFrozen(address[],bool[])": "1a7af379",
							"batchTransfer(address[],uint256[])": "88d695b2",
							"batchUnfreezePartialTokens(address[],uint256[])": "4710362d",
							"burn(address,uint256)": "9dc29fac",
							"compliance()": "6290865d",
							"decimals()": "313ce567",
							"forcedTransfer(address,address,uint256)": "9fc1d0e7",
							"freezePartialTokens(address,uint256)": "125c4a33",
							"getFrozenTokens(address)": "158b1a57",
							"identityRegistry()": "134e18f4",
							"isFrozen(address)": "e5839836",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"onchainID()": "aba63705",
							"pause()": "8456cb59",
							"recoveryAddress(address,address,address)": "9285948a",
							"setAddressFrozen(address,bool)": "c69c09cf",
							"setCompliance(address)": "f8981789",
							"setIdentityRegistry(address)": "cbf3f861",
							"setOnchainID(address)": "3d1ddc5b",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unfreezePartialTokens(address,uint256)": "1fe56f7d",
							"unpause()": "3f4ba83a",
							"version()": "54fd4d50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isFrozen\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"ComplianceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"RecoverySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOnchainID\",\"type\":\"address\"}],\"name\":\"UpdatedOnchainID\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchForcedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchFreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_freeze\",\"type\":\"bool[]\"}],\"name\":\"batchSetAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUnfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getFrozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistry\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"recoveryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"setAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"setIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"setOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"batchBurn(address[],uint256[])\":{\"details\":\"function allowing to burn tokens in batch  Require that the `_userAddresses` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to burn from the corresponding wallets  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `Transfer` events\",\"_userAddresses\":\"The addresses of the wallets concerned by the burn\"}},\"batchForcedTransfer(address[],address[],uint256[])\":{\"details\":\"function allowing to issue forced transfers in batch  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to transfer to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`  emits _fromList.length `Transfer` events\",\"_fromList\":\"The addresses of the senders\",\"_toList\":\"The addresses of the receivers\"}},\"batchFreezePartialTokens(address[],uint256[])\":{\"details\":\"function allowing to freeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"the amount of tokens to freeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensFrozen` events\",\"_userAddresses\":\"The addresses on which tokens need to be frozen\"}},\"batchMint(address[],uint256[])\":{\"details\":\"function allowing to mint tokens in batch  Require that the `_toList` addresses are all verified addresses  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to mint to the corresponding receiver  This function can only be called by a wallet set as agent of the token  emits _toList.length `Transfer` events\",\"_toList\":\"The addresses of the receivers\"}},\"batchSetAddressFrozen(address[],bool[])\":{\"details\":\"function allowing to set frozen addresses in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_freeze\":\"Frozen status of the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `AddressFrozen` events\",\"_userAddresses\":\"The addresses for which to update frozen status\"}},\"batchTransfer(address[],uint256[])\":{\"details\":\"function allowing to issue transfers in batch  Require that the msg.sender and `to` addresses are not frozen.  Require that the total value should not exceed available balance.  Require that the `to` addresses are all verified addresses,  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"The number of tokens to transfer to the corresponding receiver  emits _toList.length `Transfer` events\",\"_toList\":\"The addresses of the receivers\"}},\"batchUnfreezePartialTokens(address[],uint256[])\":{\"details\":\"function allowing to unfreeze tokens partially in batch  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_amounts\":\"the amount of tokens to unfreeze on the corresponding address  This function can only be called by a wallet set as agent of the token  emits _userAddresses.length `TokensUnfrozen` events\",\"_userAddresses\":\"The addresses on which tokens need to be unfrozen\"}},\"burn(address,uint256)\":{\"details\":\"burn tokens on a wallet  In case the `account` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `value` amount  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the burn, in such a case, the remaining balance on the `account`  is 100% composed of frozen tokens post-transaction.\",\"params\":{\"_amount\":\"Amount of tokens to burn.  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`  emits a `Transfer` event\",\"_userAddress\":\"Address to burn the tokens from.\"}},\"compliance()\":{\"details\":\"Returns the Compliance contract linked to the token\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 1 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\"},\"forcedTransfer(address,address,uint256)\":{\"details\":\"force a transfer of tokens between 2 whitelisted wallets  In case the `from` address has not enough free tokens (unfrozen tokens)  but has a total balance higher or equal to the `amount`  the amount of frozen tokens is reduced in order to have enough free tokens  to proceed the transfer, in such a case, the remaining balance on the `from`  account is 100% composed of frozen tokens post-transfer.  Require that the `to` address is a verified address,\",\"params\":{\"_amount\":\"The number of tokens to transfer\",\"_from\":\"The address of the sender\",\"_to\":\"The address of the receiver\"},\"returns\":{\"_0\":\"`true` if successful and revert if unsuccessful  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`  emits a `Transfer` event\"}},\"freezePartialTokens(address,uint256)\":{\"details\":\"freezes token amount specified for given address.\",\"params\":{\"_amount\":\"Amount of Tokens to be frozen  This function can only be called by a wallet set as agent of the token  emits a `TokensFrozen` event\",\"_userAddress\":\"The address for which to update frozen tokens\"}},\"getFrozenTokens(address)\":{\"details\":\"Returns the amount of tokens that are partially frozen on a wallet  the amount of frozen tokens is always <= to the total balance of the wallet\",\"params\":{\"_userAddress\":\"the address of the wallet on which getFrozenTokens is called\"}},\"identityRegistry()\":{\"details\":\"Returns the Identity Registry linked to the token\"},\"isFrozen(address)\":{\"details\":\"Returns the freezing status of a wallet  if isFrozen returns `true` the wallet is frozen  if isFrozen returns `false` the wallet is not frozen  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by  a partial freeze or the whole token could be blocked by pause\",\"params\":{\"_userAddress\":\"the address of the wallet on which isFrozen is called\"}},\"mint(address,uint256)\":{\"details\":\"mint tokens on a wallet  Improved version of default mint method. Tokens can be minted  to an address if only it is a verified address as per the security token.\",\"params\":{\"_amount\":\"Amount of tokens to mint.  This function can only be called by a wallet set as agent of the token  emits a `Transfer` event\",\"_to\":\"Address to mint the tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onchainID()\":{\"details\":\"Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent.\"},\"pause()\":{\"details\":\"pauses the token contract, when contract is paused investors cannot transfer tokens anymore  This function can only be called by a wallet set as agent of the token  emits a `Paused` event\"},\"recoveryAddress(address,address,address)\":{\"details\":\"recovery function used to force transfer tokens from a  lost wallet to a new wallet for an investor.\",\"params\":{\"_investorOnchainID\":\"the onchainID of the investor asking for a recovery  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful  emits a `Transfer` event if the recovery process is successful  emits a `RecoverySuccess` event if the recovery process is successful  emits a `RecoveryFails` event if the recovery process fails\",\"_lostWallet\":\"the wallet that the investor lost\",\"_newWallet\":\"the newly provided wallet on which tokens have to be transferred\"}},\"setAddressFrozen(address,bool)\":{\"details\":\"sets an address frozen status for this token.\",\"params\":{\"_freeze\":\"Frozen status of the address  This function can only be called by a wallet set as agent of the token  emits an `AddressFrozen` event\",\"_userAddress\":\"The address for which to update frozen status\"}},\"setCompliance(address)\":{\"details\":\"sets the compliance contract of the token\",\"params\":{\"_compliance\":\"the address of the compliance contract to set  Only the owner of the token smart contract can call this function  calls bindToken on the compliance contract  emits a `ComplianceAdded` event\"}},\"setIdentityRegistry(address)\":{\"details\":\"sets the Identity Registry for the token\",\"params\":{\"_identityRegistry\":\"the address of the Identity Registry to set  Only the owner of the token smart contract can call this function  emits an `IdentityRegistryAdded` event\"}},\"setOnchainID(address)\":{\"details\":\"sets the onchain ID of the token\",\"params\":{\"_onchainID\":\"the address of the onchain ID to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"unfreezePartialTokens(address,uint256)\":{\"details\":\"unfreezes token amount specified for given address\",\"params\":{\"_amount\":\"Amount of Tokens to be unfrozen  This function can only be called by a wallet set as agent of the token  emits a `TokensUnfrozen` event\",\"_userAddress\":\"The address for which to update frozen tokens\"}},\"unpause()\":{\"details\":\"unpauses the token contract, when contract is unpaused investors can transfer tokens  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens  This function can only be called by a wallet set as agent of the token  emits an `Unpaused` event\"},\"version()\":{\"details\":\"Returns the TREX version of the token. current version is 3.0.0\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddressFrozen(address,bool,address)\":{\"notice\":\"this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet\"},\"ComplianceAdded(address)\":{\"notice\":\"this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token\"},\"IdentityRegistryAdded(address)\":{\"notice\":\"this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token\"},\"RecoverySuccess(address,address,address)\":{\"notice\":\"this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\"},\"TokensFrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen\"},\"TokensUnfrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen\"},\"UpdatedOnchainID(address)\":{\"notice\":\"this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/IToken.sol\":\"IToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xbb0ece96ebc110624705b3b6859367974ba6b17cff353df43a83b108680f0d26\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://55a65e7c5daab4b177604b00c68835377386390c05cee4dc26c91aef86af7237\",\"dweb:/ipfs/QmdYNJMYJxFnpaSQZafLpFPER9wyMkUZmGkQko1XrUMHP7\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x7ca841caeee4116062dba880a955796c773d1b0b35a7d69b67104d9e6bd2705a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc05e6f2872be12d06cfe630c13d1d6d74b5b9b587f0797615e5dac88e84f4c8\",\"dweb:/ipfs/Qme2h6ah6uYShmK5x3fgfsH7rCqYtSUns9tyRyKFJYef6c\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x60ac71cd3e106d656dcc26e6f58df6e8c487ce5d0cdeed6f5449cf974a24e587\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26716e36966cb392d6fa8f9a470b69ded94fedf7f9cdd5095af0028d194baa6d\",\"dweb:/ipfs/QmYJ7Lc4vk1LNHtqZPWtZSpStCepQRgzUWvVaGAb5yLFV8\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xa3166f33baa94c9f2a010c8618fdd6038b4a64636eab809c50442c835f08f8dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b84d33d807a86846807678787e89f01ee81903968506caf5bc55c36622670c80\",\"dweb:/ipfs/QmQxG5fp38FTzK22rArNMpknA276Ji5mrrEuaoCR7pwzsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"keccak256\":\"0xa39c1be91cea916b2510a7d741b9a1e78fa03ed8ffee0be6aee95d26e675d874\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://157624f0af04aee04c381389d8fd62a3cfddbd3ab935a89b34f6b931fddce99f\",\"dweb:/ipfs/QmQ9zQ4ueNM75VjDWbVRiDyjW3cdS7k3LWQiZqHeUnfRaJ\"]},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x017f014ce235fc76eb10724fed3a682c47230ba5ff5f3085d437a30294c00fdb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f3b2ee96ecf05e6bb469619f38e469887d1eca34a65b397648f01a033afe3c1\",\"dweb:/ipfs/QmQb6p6HHMUWU5ezTFKpMgeDQcsKUDRMfuJt6uLQPUv6oK\"]},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0xbc47d0a331c5a816e8eee459239de4d312a578fbad75985af02ffb04e0389743\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://39a4cdc9fe0479f17ace597e185ee1f179f540af838a5a331244150163bb10f6\",\"dweb:/ipfs/QmWQqSWAgndgbYT6pyHZ9SexrJHZy3XyQ3GMpLRwT743eL\"]},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xaca97bc7c58c5995e8811774365b4d7e9752e447bf6e137fb632740b2801fd5f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://822e05a46c0e6042cd0d8421ae297b88cfecff55547e7cf2ffc3583759232675\",\"dweb:/ipfs/QmezT6ghV6HppsstueLZpLszjCkEqjBKggAjFduVUtz8dL\"]},\"contracts/token/IToken.sol\":{\"keccak256\":\"0x2bd803bf4c94c206a40052ad13cf63fcf6d6c1d13eb0ff6e2513863faa159ae6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fff7c48b75dccd5998e7e68dc219331db7b7a6421d9feb66ea8694cb286bf566\",\"dweb:/ipfs/QmVSvtaXgVjuivmc9sNchy1PRh1uQGjHd1iszi5gXHHCvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AddressFrozen(address,bool,address)": {
								"notice": "this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet"
							},
							"ComplianceAdded(address)": {
								"notice": "this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token"
							},
							"IdentityRegistryAdded(address)": {
								"notice": "this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token"
							},
							"RecoverySuccess(address,address,address)": {
								"notice": "this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery"
							},
							"TokensFrozen(address,uint256)": {
								"notice": "this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen"
							},
							"TokensUnfrozen(address,uint256)": {
								"notice": "this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen"
							},
							"UpdatedOnchainID(address)": {
								"notice": "this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 50,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:0"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 50,
							"sourceUnit": 329,
							"src": "61:64:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3,
										"name": "IIdentity",
										"nameLocations": [
											"153:9:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 328,
										"src": "153:9:0"
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "153:9:0"
								}
							],
							"canonicalName": "IClaimIssuer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 49,
							"linearizedBaseContracts": [
								49,
								328,
								304,
								196
							],
							"name": "IClaimIssuer",
							"nameLocation": "137:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 5,
										"nodeType": "StructuredDocumentation",
										"src": "170:126:0",
										"text": " @dev Emitted when a claim is revoked.\n Specification: MUST be triggered when revoking a claim."
									},
									"eventSelector": "7f484e37f24c0a92f81dd74afa3027b3ea31f2e9fb6b9fa29fe9865f81ac5569",
									"id": 9,
									"name": "ClaimRevoked",
									"nameLocation": "307:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "334:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "320:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 6,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "320:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:25:0"
									},
									"src": "301:44:0"
								},
								{
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "351:351:0",
										"text": " @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n @notice will fetch the claim from the identity contract (unsafe).\n @param _claimId the id of the claim\n @param _identity the address of the identity contract\n @return isRevoked true when the claim is revoked"
									},
									"functionSelector": "73c33708",
									"id": 19,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeClaim",
									"nameLocation": "716:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "736:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "728:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 11,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "754:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "746:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:37:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "782:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 16,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "782:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "781:6:0"
									},
									"scope": 49,
									"src": "707:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "794:169:0",
										"text": " @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n @param signature the signature of the claim"
									},
									"functionSelector": "9f7f9edd",
									"id": 25,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeClaimBySignature",
									"nameLocation": "977:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1015:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1000:24:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 21,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1000:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:26:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:0:0"
									},
									"scope": 49,
									"src": "968:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1041:181:0",
										"text": " @dev Returns revocation status of a claim.\n @param _sig the signature of the claim\n @return isRevoked true if the claim is revoked and false otherwise"
									},
									"functionSelector": "2646b264",
									"id": 33,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimRevoked",
									"nameLocation": "1236:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "_sig",
												"nameLocation": "1266:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "1251:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 27,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1251:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:21:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "1295:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 30,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1295:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1294:6:0"
									},
									"scope": 49,
									"src": "1227:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										327
									],
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "1307:334:0",
										"text": " @dev Checks if a claim is valid.\n @param _identity the identity contract related to the claim\n @param claimTopic the claim topic of the claim\n @param sig the signature of the claim\n @param data the data field of the claim\n @return claimValid true if the claim is valid, false otherwise"
									},
									"functionSelector": "c0969a6e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimValid",
									"nameLocation": "1655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "1687:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1677:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 36,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 35,
														"name": "IIdentity",
														"nameLocations": [
															"1677:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1677:9:0"
													},
													"referencedDeclaration": 328,
													"src": "1677:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "1714:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1706:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1706:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "sig",
												"nameLocation": "1749:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1734:18:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 40,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1734:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1777:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1762:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 42,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1762:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1667:115:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1810:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 45,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1810:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1809:6:0"
									},
									"scope": 49,
									"src": "1646:170:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 50,
							"src": "127:1691:0",
							"usedErrors": [],
							"usedEvents": [
								9,
								59,
								70,
								81,
								92,
								101,
								110,
								216,
								233,
								250
							]
						}
					],
					"src": "36:1783:0"
				},
				"id": 0
			},
			"@onchain-id/solidity/contracts/interface/IERC734.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IERC734.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						]
					},
					"id": 197,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 51,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC734",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 52,
								"nodeType": "StructuredDocumentation",
								"src": "61:84:1",
								"text": " @dev interface of the ERC734 (Key Holder) standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 196,
							"linearizedBaseContracts": [
								196
							],
							"name": "IERC734",
							"nameLocation": "156:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "171:156:1",
										"text": " @dev Emitted when an execution request was approved.\n Specification: MUST be triggered when approve was successfully called."
									},
									"eventSelector": "b3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8",
									"id": 59,
									"name": "Approved",
									"nameLocation": "338:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "363:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "347:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "347:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "381:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "376:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 56,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "376:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "346:44:1"
									},
									"src": "332:59:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "397:214:1",
										"text": " @dev Emitted when an execute operation was approved and successfully performed.\n Specification: MUST be triggered when approve was called and the execution was successfully approved."
									},
									"eventSelector": "1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8",
									"id": 70,
									"name": "Executed",
									"nameLocation": "622:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "647:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "631:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 61,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "631:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "676:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "660:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "696:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "680:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "680:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "709:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "703:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 67,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "703:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "630:84:1"
									},
									"src": "616:99:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "721:171:1",
										"text": " @dev Emitted when an execution request was performed via `execute`.\n Specification: MUST be triggered when execute was successfully called."
									},
									"eventSelector": "8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8",
									"id": 81,
									"name": "ExecutionRequested",
									"nameLocation": "903:18:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "938:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "922:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "922:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "967:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "951:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "987:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "971:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1000:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "994:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 78,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "994:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "921:84:1"
									},
									"src": "897:109:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "1012:151:1",
										"text": " @dev Emitted when an execute operation was called and failed\n Specification: MUST be triggered when execute call failed"
									},
									"eventSelector": "e10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a68",
									"id": 92,
									"name": "ExecutionFailed",
									"nameLocation": "1174:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"indexed": true,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "1206:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1190:27:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1190:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1235:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1219:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"indexed": true,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1255:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1239:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1239:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1268:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "1262:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 89,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1262:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1189:84:1"
									},
									"src": "1168:106:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "1280:153:1",
										"text": " @dev Emitted when a key was added to the Identity.\n Specification: MUST be triggered when addKey was successfully called."
									},
									"eventSelector": "480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e9",
									"id": 101,
									"name": "KeyAdded",
									"nameLocation": "1444:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1469:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1453:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1453:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "purpose",
												"nameLocation": "1490:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1474:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "1515:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1499:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1499:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1452:71:1"
									},
									"src": "1438:86:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "1530:160:1",
										"text": " @dev Emitted when a key was removed from the Identity.\n Specification: MUST be triggered when removeKey was successfully called."
									},
									"eventSelector": "585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d3397",
									"id": 110,
									"name": "KeyRemoved",
									"nameLocation": "1701:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1728:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1712:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 103,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1712:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "purpose",
												"nameLocation": "1749:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1733:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": true,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "1774:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "1758:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1758:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1711:71:1"
									},
									"src": "1695:88:1"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "1789:319:1",
										"text": " @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n Triggers Event: `KeyAdded`\n Specification: MUST only be done by keys of purpose 1, or the identity\n itself. If it's the identity itself, the approval process will determine its approval."
									},
									"functionSelector": "1d381240",
									"id": 122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addKey",
									"nameLocation": "2122:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "2137:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2129:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2129:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "2151:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2143:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "_keyType",
												"nameLocation": "2169:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2161:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2161:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:50:1"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2202:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "2197:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2197:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2196:14:1"
									},
									"scope": 196,
									"src": "2113:98:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "2217:201:1",
										"text": " @dev Approves an execution.\n Triggers Event: `Approved`\n Triggers on execution successful Event: `Executed`\n Triggers on execution failure Event: `ExecutionFailed`"
									},
									"functionSelector": "747442d3",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2432:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2448:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2440:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "_approve",
												"nameLocation": "2458:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2453:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 126,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2453:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:28:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2491:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2486:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 129,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2486:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2485:14:1"
									},
									"scope": 196,
									"src": "2423:77:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2506:290:1",
										"text": " @dev Removes _purpose for _key from the identity.\n Triggers Event: `KeyRemoved`\n Specification: MUST only be done by keys of purpose 1, or the identity itself.\n If it's the identity itself, the approval process will determine its approval."
									},
									"functionSelector": "53d413c5",
									"id": 142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeKey",
									"nameLocation": "2810:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "2828:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2820:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 134,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "2842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2834:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2834:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2819:32:1"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2875:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2870:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2870:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2869:14:1"
									},
									"scope": 196,
									"src": "2801:83:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "2890:481:1",
										"text": " @dev Passes an execution instruction to an ERC734 identity.\n How the execution is handled is up to the identity implementation:\n An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n approve this execution.\n Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n Triggers Event: ExecutionRequested\n Triggers on direct execution Event: Executed"
									},
									"functionSelector": "b61d27f6",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "3385:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "3401:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3393:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "3414:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3406:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "3437:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3422:20:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 148,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3422:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3392:51:1"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "executionId",
												"nameLocation": "3478:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "3470:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3470:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3469:21:1"
									},
									"scope": 196,
									"src": "3376:115:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "3497:78:1",
										"text": " @dev Returns the full key data, if present in the identity."
									},
									"functionSelector": "12aaac70",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKey",
									"nameLocation": "3589:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "3604:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3596:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 156,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:14:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "purposes",
												"nameLocation": "3650:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3633:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 159,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3633:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 160,
													"nodeType": "ArrayTypeName",
													"src": "3633:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "keyType",
												"nameLocation": "3668:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3660:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3660:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "3685:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3677:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 164,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3677:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3632:57:1"
									},
									"scope": 196,
									"src": "3580:110:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "3696:75:1",
										"text": " @dev Returns the list of purposes associated with a key."
									},
									"functionSelector": "fb307b34",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKeyPurposes",
									"nameLocation": "3785:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "3808:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "3800:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 169,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3800:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3799:14:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "_purposes",
												"nameLocation": "3853:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "3836:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 172,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3836:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 173,
													"nodeType": "ArrayTypeName",
													"src": "3836:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3835:28:1"
									},
									"scope": 196,
									"src": "3776:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "3870:85:1",
										"text": " @dev Returns an array of public key bytes32 held by this identity."
									},
									"functionSelector": "9010f726",
									"id": 185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getKeysByPurpose",
									"nameLocation": "3969:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "3994:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "3986:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3986:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3985:18:1"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "4044:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "4027:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 181,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4027:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 182,
													"nodeType": "ArrayTypeName",
													"src": "4027:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4026:23:1"
									},
									"scope": 196,
									"src": "3960:90:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "4056:127:1",
										"text": " @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE."
									},
									"functionSelector": "d202158d",
									"id": 195,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "keyHasPurpose",
									"nameLocation": "4197:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "_key",
												"nameLocation": "4219:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4211:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 187,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4211:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "_purpose",
												"nameLocation": "4233:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4225:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4225:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4210:32:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "exists",
												"nameLocation": "4271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4266:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 192,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4266:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4265:13:1"
									},
									"scope": 196,
									"src": "4188:91:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 197,
							"src": "146:4135:1",
							"usedErrors": [],
							"usedEvents": [
								59,
								70,
								81,
								92,
								101,
								110
							]
						}
					],
					"src": "36:4246:1"
				},
				"id": 1
			},
			"@onchain-id/solidity/contracts/interface/IERC735.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IERC735.sol",
					"exportedSymbols": {
						"IERC735": [
							304
						]
					},
					"id": 305,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 198,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC735",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 199,
								"nodeType": "StructuredDocumentation",
								"src": "61:86:2",
								"text": " @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 304,
							"linearizedBaseContracts": [
								304
							],
							"name": "IERC735",
							"nameLocation": "158:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "173:139:2",
										"text": " @dev Emitted when a claim was added.\n Specification: MUST be triggered when a claim was successfully added."
									},
									"eventSelector": "46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5",
									"id": 216,
									"name": "ClaimAdded",
									"nameLocation": "323:10:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "359:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "343:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 201,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "343:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "392:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "376:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "415:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "407:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "447:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "431:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "469:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "463:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 209,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "463:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "494:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "488:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 211,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "488:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "515:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "508:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 213,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "508:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "333:186:2"
									},
									"src": "317:203:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "526:146:2",
										"text": " @dev Emitted when a claim was removed.\n Specification: MUST be triggered when removeClaim was successfully called."
									},
									"eventSelector": "3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a",
									"id": 233,
									"name": "ClaimRemoved",
									"nameLocation": "683:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "721:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "705:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 218,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "754:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "738:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "777:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "769:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "809:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "793:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "831:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "825:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 226,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "825:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "856:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "850:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 228,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "850:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "877:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "870:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 230,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "870:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "695:186:2"
									},
									"src": "677:205:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "888:166:2",
										"text": " @dev Emitted when a claim was changed.\n Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
									},
									"eventSelector": "3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b13",
									"id": 250,
									"name": "ClaimChanged",
									"nameLocation": "1065:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimId",
												"nameLocation": "1103:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1087:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 235,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"indexed": true,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "1136:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1120:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1120:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"indexed": false,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "1159:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1151:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"indexed": true,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "1191:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1175:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1175:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 244,
												"indexed": false,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1213:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1207:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 243,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1207:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1238:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1232:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 245,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1232:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"indexed": false,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "1259:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "1252:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 247,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1252:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1077:186:2"
									},
									"src": "1059:205:2"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "1270:438:2",
										"text": " @dev Add or update a claim.\n Triggers Event: `ClaimAdded`, `ClaimChanged`\n Specification: Add or update a claim from an issuer.\n _signature is a signed message of the following structure:\n `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`."
									},
									"functionSelector": "b1a34e0d",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaim",
									"nameLocation": "1722:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "_topic",
												"nameLocation": "1748:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1740:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1740:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "_scheme",
												"nameLocation": "1772:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1764:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1764:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "1797:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1789:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1789:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "_signature",
												"nameLocation": "1828:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1813:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 258,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1813:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "1863:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1848:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 260,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1848:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1894:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1878:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 262,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1878:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:169:2"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "claimRequestId",
												"nameLocation": "1930:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1922:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 265,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1922:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1921:24:2"
									},
									"scope": 304,
									"src": "1713:233:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "1952:193:2",
										"text": " @dev Removes a claim.\n Triggers Event: `ClaimRemoved`\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
									},
									"functionSelector": "4eee424a",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaim",
									"nameLocation": "2159:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "2179:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "2171:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2170:18:2"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "2212:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "2207:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2207:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2206:14:2"
									},
									"scope": 304,
									"src": "2150:71:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "2227:154:2",
										"text": " @dev Get a claim by its ID.\n Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`."
									},
									"functionSelector": "c9100bcb",
									"id": 294,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaim",
									"nameLocation": "2395:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "_claimId",
												"nameLocation": "2412:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2404:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 278,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2404:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2403:18:2"
									},
									"returnParameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "topic",
												"nameLocation": "2465:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2457:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2457:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "scheme",
												"nameLocation": "2488:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2480:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2480:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "issuer",
												"nameLocation": "2512:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2504:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2504:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2541:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2528:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 287,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2528:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2573:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2560:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 289,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2560:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "2601:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2587:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2587:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2447:158:2"
									},
									"scope": 304,
									"src": "2386:220:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "2612:63:2",
										"text": " @dev Returns an array of claim IDs by topic."
									},
									"functionSelector": "80e9e9e1",
									"id": 303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIdsByTopic",
									"nameLocation": "2689:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "_topic",
												"nameLocation": "2716:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "2708:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2708:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2707:16:2"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "claimIds",
												"nameLocation": "2763:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "2746:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 299,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2746:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 300,
													"nodeType": "ArrayTypeName",
													"src": "2746:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2745:27:2"
									},
									"scope": 304,
									"src": "2680:93:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 305,
							"src": "148:2627:2",
							"usedErrors": [],
							"usedEvents": [
								216,
								233,
								250
							]
						}
					],
					"src": "36:2740:2"
				},
				"id": 2
			},
			"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
				"ast": {
					"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 329,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 306,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:3"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IERC734.sol",
							"file": "./IERC734.sol",
							"id": 307,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 197,
							"src": "61:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IERC735.sol",
							"file": "./IERC735.sol",
							"id": 308,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 329,
							"sourceUnit": 305,
							"src": "85:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 309,
										"name": "IERC734",
										"nameLocations": [
											"178:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 196,
										"src": "178:7:3"
									},
									"id": 310,
									"nodeType": "InheritanceSpecifier",
									"src": "178:7:3"
								},
								{
									"baseName": {
										"id": 311,
										"name": "IERC735",
										"nameLocations": [
											"187:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 304,
										"src": "187:7:3"
									},
									"id": 312,
									"nodeType": "InheritanceSpecifier",
									"src": "187:7:3"
								}
							],
							"canonicalName": "IIdentity",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 328,
							"linearizedBaseContracts": [
								328,
								304,
								196
							],
							"name": "IIdentity",
							"nameLocation": "165:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "201:334:3",
										"text": " @dev Checks if a claim is valid.\n @param _identity the identity contract related to the claim\n @param claimTopic the claim topic of the claim\n @param sig the signature of the claim\n @param data the data field of the claim\n @return claimValid true if the claim is valid, false otherwise"
									},
									"functionSelector": "c0969a6e",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimValid",
									"nameLocation": "549:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "581:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "571:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 315,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 314,
														"name": "IIdentity",
														"nameLocations": [
															"571:9:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "571:9:3"
													},
													"referencedDeclaration": 328,
													"src": "571:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "608:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "600:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "600:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "sig",
												"nameLocation": "643:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "628:18:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 319,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "628:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "671:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "656:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "656:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:115:3"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "704:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "704:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "703:6:3"
									},
									"scope": 328,
									"src": "540:170:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 329,
							"src": "155:557:3",
							"usedErrors": [],
							"usedEvents": [
								59,
								70,
								81,
								92,
								101,
								110,
								216,
								233,
								250
							]
						}
					],
					"src": "36:677:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							406
						]
					},
					"id": 407,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 330,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 331,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 406,
							"linearizedBaseContracts": [
								406
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 340,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 349,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 406,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 363,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 406,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 373,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 370,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 406,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 406,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 393,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 390,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 406,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 405,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 406,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 407,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								340,
								349
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"contracts/registry/interface/IClaimIssuersRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IClaimIssuersRegistry.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							509
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						]
					},
					"id": 510,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 408,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:5"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"id": 409,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 510,
							"sourceUnit": 50,
							"src": "61:67:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimIssuersRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 509,
							"linearizedBaseContracts": [
								509
							],
							"name": "IClaimIssuersRegistry",
							"nameLocation": "140:21:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "168:311:5",
										"text": "  this event is emitted when a claim issuer is added in the registry.\n  the event is emitted by the addClaimIssuer function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
									},
									"eventSelector": "375851630239b005eafd9230e43a9a9d4a5d7b96a4956fc8e9d2ab3ff4583d16",
									"id": 418,
									"name": "ClaimIssuerAdded",
									"nameLocation": "490:16:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "537:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "516:32:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 412,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 411,
														"name": "IClaimIssuer",
														"nameLocations": [
															"516:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "516:12:5"
													},
													"referencedDeclaration": 49,
													"src": "516:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 416,
												"indexed": false,
												"mutability": "mutable",
												"name": "claimTopics",
												"nameLocation": "568:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "558:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 414,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "558:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 415,
													"nodeType": "ArrayTypeName",
													"src": "558:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "506:79:5"
									},
									"src": "484:102:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "592:234:5",
										"text": "  this event is emitted when a claim issuer is removed from the registry.\n  the event is emitted by the removeClaimIssuer function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract"
									},
									"eventSelector": "8432c8693d2550c2eb52d3f0a803b38eb8c3c0e62234fa1b6b8b35cc38667854",
									"id": 424,
									"name": "ClaimIssuerRemoved",
									"nameLocation": "837:18:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "877:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "856:32:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 421,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 420,
														"name": "IClaimIssuer",
														"nameLocations": [
															"856:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "856:12:5"
													},
													"referencedDeclaration": 49,
													"src": "856:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:34:5"
									},
									"src": "831:59:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "896:340:5",
										"text": "  this event is emitted when the set of claim topics is changed for a given claim issuer.\n  the event is emitted by the updateIssuerClaimTopics function\n  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\n  `claimTopics` is the set of claims that the claim issuer is allowed to emit"
									},
									"eventSelector": "ec753cfc52044f61676f18a11e500093a9f2b1cd5e4942bc476f2b0438159bcf",
									"id": 433,
									"name": "ClaimTopicsUpdated",
									"nameLocation": "1247:18:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuer",
												"nameLocation": "1296:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1275:32:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 427,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 426,
														"name": "IClaimIssuer",
														"nameLocations": [
															"1275:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "1275:12:5"
													},
													"referencedDeclaration": 49,
													"src": "1275:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"indexed": false,
												"mutability": "mutable",
												"name": "claimTopics",
												"nameLocation": "1327:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1317:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 429,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1317:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 430,
													"nodeType": "ArrayTypeName",
													"src": "1317:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:79:5"
									},
									"src": "1241:104:5"
								},
								{
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "1351:637:5",
										"text": "  @dev registers a ClaimIssuer contract as claim claim issuer.\n  Requires that a ClaimIssuer contract doesn't already exist\n  Requires that the claimTopics set is not empty\n  Requires that there is no more than 15 claimTopics\n  Requires that there is no more than 50 Claim issuers\n  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\n  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimIssuerAdded` event"
									},
									"functionSelector": "38d742a4",
									"id": 443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaimIssuer",
									"nameLocation": "2002:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "2039:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "2026:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 435,
														"name": "IClaimIssuer",
														"nameLocations": [
															"2026:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "2026:12:5"
													},
													"referencedDeclaration": 49,
													"src": "2026:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "_claimTopics",
												"nameLocation": "2080:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "2061:31:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 438,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2061:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 439,
													"nodeType": "ArrayTypeName",
													"src": "2061:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2016:82:5"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2107:0:5"
									},
									"scope": 509,
									"src": "1993:115:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "2114:345:5",
										"text": "  @dev Removes the ClaimIssuer contract of a claim claim issuer.\n  Requires that the claim issuer contract to be registered first\n  @param _claimIssuer the claim issuer to remove.\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimIssuerRemoved` event"
									},
									"functionSelector": "0b4b764c",
									"id": 450,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaimIssuer",
									"nameLocation": "2473:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "2504:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "2491:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 446,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 445,
														"name": "IClaimIssuer",
														"nameLocations": [
															"2491:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "2491:12:5"
													},
													"referencedDeclaration": 49,
													"src": "2491:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2490:27:5"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2526:0:5"
									},
									"scope": 509,
									"src": "2464:63:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "2533:583:5",
										"text": "  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\n  Requires that this ClaimIssuer contract already exists in the registry\n  Requires that the provided claimTopics set is not empty\n  Requires that there is no more than 15 claimTopics\n  @param _claimIssuer the claim issuer to update.\n  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\n  This function can only be called by the owner of the Claim Issuers Registry contract\n  emits a `ClaimTopicsUpdated` event"
									},
									"functionSelector": "04bc7e84",
									"id": 460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateIssuerClaimTopics",
									"nameLocation": "3130:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "3176:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "3163:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 453,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 452,
														"name": "IClaimIssuer",
														"nameLocations": [
															"3163:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "3163:12:5"
													},
													"referencedDeclaration": 49,
													"src": "3163:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "_claimTopics",
												"nameLocation": "3217:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "3198:31:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 455,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3198:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 456,
													"nodeType": "ArrayTypeName",
													"src": "3198:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3153:82:5"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3244:0:5"
									},
									"scope": 509,
									"src": "3121:124:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 461,
										"nodeType": "StructuredDocumentation",
										"src": "3251:136:5",
										"text": "  @dev Function for getting all the claim claim issuers stored.\n  @return array of all claim issuers registered."
									},
									"functionSelector": "d4f4ac4e",
									"id": 468,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuers",
									"nameLocation": "3401:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3416:2:5"
									},
									"returnParameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3442:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_memory_ptr",
													"typeString": "contract IClaimIssuer[]"
												},
												"typeName": {
													"baseType": {
														"id": 464,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 463,
															"name": "IClaimIssuer",
															"nameLocations": [
																"3442:12:5"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 49,
															"src": "3442:12:5"
														},
														"referencedDeclaration": 49,
														"src": "3442:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IClaimIssuer_$49",
															"typeString": "contract IClaimIssuer"
														}
													},
													"id": 465,
													"nodeType": "ArrayTypeName",
													"src": "3442:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_storage_ptr",
														"typeString": "contract IClaimIssuer[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3441:23:5"
									},
									"scope": 509,
									"src": "3392:73:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3471:267:5",
										"text": "  @dev Function for getting all the claim issuer allowed for a given claim topic.\n  @param claimTopic the claim topic to get the claim issuers for.\n  @return array of all claim issuer addresses that are allowed for the given claim topic."
									},
									"functionSelector": "6b2c56bd",
									"id": 478,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuersForClaimTopic",
									"nameLocation": "3752:28:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "3798:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3790:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3780:34:5"
									},
									"returnParameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3838:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_memory_ptr",
													"typeString": "contract IClaimIssuer[]"
												},
												"typeName": {
													"baseType": {
														"id": 474,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 473,
															"name": "IClaimIssuer",
															"nameLocations": [
																"3838:12:5"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 49,
															"src": "3838:12:5"
														},
														"referencedDeclaration": 49,
														"src": "3838:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IClaimIssuer_$49",
															"typeString": "contract IClaimIssuer"
														}
													},
													"id": 475,
													"nodeType": "ArrayTypeName",
													"src": "3838:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IClaimIssuer_$49_$dyn_storage_ptr",
														"typeString": "contract IClaimIssuer[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3837:23:5"
									},
									"scope": 509,
									"src": "3743:118:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "3867:193:5",
										"text": "  @dev Checks if the ClaimIssuer contract is claim\n  @param _issuer the address of the ClaimIssuer contract\n  @return true if the issuer is claim, false otherwise."
									},
									"functionSelector": "6de48708",
									"id": 487,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isClaimIssuer",
									"nameLocation": "4074:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "_issuer",
												"nameLocation": "4101:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "4088:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 481,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 480,
														"name": "IClaimIssuer",
														"nameLocations": [
															"4088:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "4088:12:5"
													},
													"referencedDeclaration": 49,
													"src": "4088:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:22:5"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "4133:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 484,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4133:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4132:6:5"
									},
									"scope": 509,
									"src": "4065:74:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "4145:323:5",
										"text": "  @dev Function for getting all the claim topic of claim claim issuer\n  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\n  @param _claimIssuer the claim issuer concerned.\n  @return The set of claim topics that the claim issuer is allowed to emit"
									},
									"functionSelector": "122dade8",
									"id": 497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimIssuerClaimTopics",
									"nameLocation": "4482:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "_claimIssuer",
												"nameLocation": "4530:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "4517:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 490,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 489,
														"name": "IClaimIssuer",
														"nameLocations": [
															"4517:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "4517:12:5"
													},
													"referencedDeclaration": 49,
													"src": "4517:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4507:41:5"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "4572:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 493,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4572:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 494,
													"nodeType": "ArrayTypeName",
													"src": "4572:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4571:18:5"
									},
									"scope": 509,
									"src": "4473:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "4596:377:5",
										"text": "  @dev Function for checking if the claim claim issuer is allowed\n  to emit a certain claim topic\n  @param _issuer the address of the claim issuer's ClaimIssuer contract\n  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n  @return true if the issuer is claim for this claim topic."
									},
									"functionSelector": "34a89987",
									"id": 508,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasClaimTopic",
									"nameLocation": "4987:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "_issuer",
												"nameLocation": "5023:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "5010:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuer_$49",
													"typeString": "contract IClaimIssuer"
												},
												"typeName": {
													"id": 500,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 499,
														"name": "IClaimIssuer",
														"nameLocations": [
															"5010:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 49,
														"src": "5010:12:5"
													},
													"referencedDeclaration": 49,
													"src": "5010:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuer_$49",
														"typeString": "contract IClaimIssuer"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "5048:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "5040:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5000:65:5"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "5089:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 505,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5089:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5088:6:5"
									},
									"scope": 509,
									"src": "4978:117:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 510,
							"src": "130:4967:5",
							"usedErrors": [],
							"usedEvents": [
								418,
								424,
								433
							]
						}
					],
					"src": "36:5062:5"
				},
				"id": 5
			},
			"contracts/registry/interface/IClaimTopicsRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IClaimTopicsRegistry.sol",
					"exportedSymbols": {
						"IClaimTopicsRegistry": [
							541
						]
					},
					"id": 542,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 511,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimTopicsRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 541,
							"linearizedBaseContracts": [
								541
							],
							"name": "IClaimTopicsRegistry",
							"nameLocation": "71:20:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "98:241:6",
										"text": "  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n  the event is emitted by the 'addClaimTopic' function\n  `claimTopic` is the required claim added to the Claim Topics Registry"
									},
									"eventSelector": "01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d6",
									"id": 516,
									"name": "ClaimTopicAdded",
									"nameLocation": "350:15:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 514,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "382:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "366:26:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:28:6"
									},
									"src": "344:50:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "400:252:6",
										"text": "  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n  the event is emitted by the 'removeClaimTopic' function\n  `claimTopic` is the required claim removed from the Claim Topics Registry"
									},
									"eventSelector": "0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec5",
									"id": 521,
									"name": "ClaimTopicRemoved",
									"nameLocation": "663:17:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "697:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "681:26:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "681:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "680:28:6"
									},
									"src": "657:52:6"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "715:278:6",
										"text": " @dev Add a claim claim topic (For example: KYC=1, AML=2).\n Only owner can call.\n emits `ClaimTopicAdded` event\n cannot add more than 15 topics for 1 token as adding more could create gas issues\n @param _claimTopic The claim topic index"
									},
									"functionSelector": "c7b22551",
									"id": 527,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaimTopic",
									"nameLocation": "1007:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "1029:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "1021:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1020:21:6"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:0:6"
									},
									"scope": 541,
									"src": "998:53:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "1057:198:6",
										"text": "  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\n  Only owner can call.\n  emits `ClaimTopicRemoved` event\n  @param _claimTopic The claim topic index"
									},
									"functionSelector": "08297846",
									"id": 533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaimTopic",
									"nameLocation": "1269:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "1294:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "1286:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1285:21:6"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:0:6"
									},
									"scope": 541,
									"src": "1260:56:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "1322:118:6",
										"text": "  @dev Get the claim claim topics for the security token\n  @return Array of claim claim topics"
									},
									"functionSelector": "df09d604",
									"id": 540,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimTopics",
									"nameLocation": "1454:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1468:2:6"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "1494:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 536,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1494:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 537,
													"nodeType": "ArrayTypeName",
													"src": "1494:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1493:18:6"
									},
									"scope": 541,
									"src": "1445:67:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 542,
							"src": "61:1453:6",
							"usedErrors": [],
							"usedEvents": [
								516,
								521
							]
						}
					],
					"src": "36:1479:6"
				},
				"id": 6
			},
			"contracts/registry/interface/IIdentityRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IIdentityRegistry.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							509
						],
						"IClaimTopicsRegistry": [
							541
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistry": [
							722
						],
						"IIdentityRegistryStorage": [
							838
						]
					},
					"id": 723,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 543,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:7"
						},
						{
							"absolutePath": "contracts/registry/interface/IClaimIssuersRegistry.sol",
							"file": "./IClaimIssuersRegistry.sol",
							"id": 544,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 723,
							"sourceUnit": 510,
							"src": "61:37:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/registry/interface/IClaimTopicsRegistry.sol",
							"file": "./IClaimTopicsRegistry.sol",
							"id": 545,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 723,
							"sourceUnit": 542,
							"src": "99:36:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/registry/interface/IIdentityRegistryStorage.sol",
							"file": "./IIdentityRegistryStorage.sol",
							"id": 546,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 723,
							"sourceUnit": 839,
							"src": "136:40:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
							"id": 547,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 723,
							"sourceUnit": 50,
							"src": "178:67:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 548,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 723,
							"sourceUnit": 329,
							"src": "246:64:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIdentityRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 722,
							"linearizedBaseContracts": [
								722
							],
							"name": "IIdentityRegistry",
							"nameLocation": "322:17:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "346:256:7",
										"text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
									},
									"eventSelector": "7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d0",
									"id": 554,
									"name": "ClaimTopicsRegistrySet",
									"nameLocation": "613:22:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopicsRegistry",
												"nameLocation": "674:19:7",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "645:48:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 551,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 550,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"645:20:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 541,
														"src": "645:20:7"
													},
													"referencedDeclaration": 541,
													"src": "645:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:64:7"
									},
									"src": "607:93:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "706:260:7",
										"text": "  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `identityStorage` is the address of the Identity Registry Storage contract"
									},
									"eventSelector": "2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c",
									"id": 560,
									"name": "IdentityStorageSet",
									"nameLocation": "977:18:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityStorage",
												"nameLocation": "1029:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "996:48:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 557,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 556,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"996:24:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 838,
														"src": "996:24:7"
													},
													"referencedDeclaration": 838,
													"src": "996:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:50:7"
									},
									"src": "971:75:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "1052:259:7",
										"text": "  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract"
									},
									"eventSelector": "811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e8",
									"id": 566,
									"name": "ClaimIssuersRegistrySet",
									"nameLocation": "1322:23:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIssuersRegistry",
												"nameLocation": "1385:20:7",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "1355:50:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 563,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 562,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"1355:21:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 509,
														"src": "1355:21:7"
													},
													"referencedDeclaration": 509,
													"src": "1355:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1345:66:7"
									},
									"src": "1316:96:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 567,
										"nodeType": "StructuredDocumentation",
										"src": "1418:307:7",
										"text": "  this event is emitted when an Identity is registered into the Identity Registry.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af19",
									"id": 574,
									"name": "IdentityRegistered",
									"nameLocation": "1736:18:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "1780:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1764:31:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1764:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "1823:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1805:26:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 571,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 570,
														"name": "IIdentity",
														"nameLocations": [
															"1805:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1805:9:7"
													},
													"referencedDeclaration": 328,
													"src": "1805:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1754:83:7"
									},
									"src": "1730:108:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "1844:302:7",
										"text": "  this event is emitted when an Identity is removed from the Identity Registry.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327",
									"id": 582,
									"name": "IdentityRemoved",
									"nameLocation": "2157:15:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "2198:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "2182:31:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2182:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "2241:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "2223:26:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 579,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 578,
														"name": "IIdentity",
														"nameLocations": [
															"2223:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2223:9:7"
													},
													"referencedDeclaration": 328,
													"src": "2223:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2172:83:7"
									},
									"src": "2151:105:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 583,
										"nodeType": "StructuredDocumentation",
										"src": "2262:261:7",
										"text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
									},
									"eventSelector": "e98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf6010",
									"id": 591,
									"name": "IdentityUpdated",
									"nameLocation": "2534:15:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldIdentity",
												"nameLocation": "2577:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 591,
												"src": "2559:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 585,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 584,
														"name": "IIdentity",
														"nameLocations": [
															"2559:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2559:9:7"
													},
													"referencedDeclaration": 328,
													"src": "2559:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"indexed": true,
												"mutability": "mutable",
												"name": "newIdentity",
												"nameLocation": "2616:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 591,
												"src": "2598:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 588,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 587,
														"name": "IIdentity",
														"nameLocations": [
															"2598:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "2598:9:7"
													},
													"referencedDeclaration": 328,
													"src": "2598:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2549:84:7"
									},
									"src": "2528:106:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 592,
										"nodeType": "StructuredDocumentation",
										"src": "2640:295:7",
										"text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
									},
									"eventSelector": "04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee853",
									"id": 598,
									"name": "CountryUpdated",
									"nameLocation": "2946:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "2986:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "2970:31:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2970:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"indexed": true,
												"mutability": "mutable",
												"name": "country",
												"nameLocation": "3026:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "3011:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 595,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3011:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2960:79:7"
									},
									"src": "2940:100:7"
								},
								{
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "3046:474:7",
										"text": "  @dev Register an identity contract corresponding to a user address.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityRegistered` event"
									},
									"functionSelector": "454a03e0",
									"id": 609,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerIdentity",
									"nameLocation": "3534:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3568:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3560:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3560:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "3600:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3590:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 603,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 602,
														"name": "IIdentity",
														"nameLocations": [
															"3590:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "3590:9:7"
													},
													"referencedDeclaration": 328,
													"src": "3590:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "3626:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3619:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 605,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3619:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:90:7"
									},
									"returnParameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3649:0:7"
									},
									"scope": 722,
									"src": "3525:125:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 610,
										"nodeType": "StructuredDocumentation",
										"src": "3656:356:7",
										"text": "  @dev Removes an user from the identity registry.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityRemoved` event"
									},
									"functionSelector": "a8d29d1d",
									"id": 615,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteIdentity",
									"nameLocation": "4026:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4049:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "4041:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4041:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4040:22:7"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4071:0:7"
									},
									"scope": 722,
									"src": "4017:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "4078:312:7",
										"text": "  @dev Replace the actual identityRegistryStorage contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _identityRegistryStorage The address of the new Identity Registry Storage\n  emits `IdentityStorageSet` event"
									},
									"functionSelector": "26d941ae",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setIdentityRegistryStorage",
									"nameLocation": "4404:26:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "_identityRegistryStorage",
												"nameLocation": "4465:24:7",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4440:49:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 618,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 617,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"4440:24:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 838,
														"src": "4440:24:7"
													},
													"referencedDeclaration": 838,
													"src": "4440:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4430:65:7"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4504:0:7"
									},
									"scope": 722,
									"src": "4395:110:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "4511:304:7",
										"text": "  @dev Replace the actual claimTopicsRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimTopicsRegistry The address of the new claim Topics Registry\n  emits `ClaimTopicsRegistrySet` event"
									},
									"functionSelector": "670af6a9",
									"id": 629,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setClaimTopicsRegistry",
									"nameLocation": "4829:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "_claimTopicsRegistry",
												"nameLocation": "4882:20:7",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "4861:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 625,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 624,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"4861:20:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 541,
														"src": "4861:20:7"
													},
													"referencedDeclaration": 541,
													"src": "4861:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4851:57:7"
									},
									"returnParameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4917:0:7"
									},
									"scope": 722,
									"src": "4820:98:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 630,
										"nodeType": "StructuredDocumentation",
										"src": "4924:308:7",
										"text": "  @dev Replace the actual claimIssuersRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\n  emits `ClaimIssuersRegistrySet` event"
									},
									"functionSelector": "6bc72c90",
									"id": 636,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setClaimIssuersRegistry",
									"nameLocation": "5246:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "_claimIssuersRegistry",
												"nameLocation": "5301:21:7",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "5279:43:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 632,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 631,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"5279:21:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 509,
														"src": "5279:21:7"
													},
													"referencedDeclaration": 509,
													"src": "5279:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5269:59:7"
									},
									"returnParameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5337:0:7"
									},
									"scope": 722,
									"src": "5237:101:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "5344:410:7",
										"text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryUpdated` event"
									},
									"functionSelector": "3b239a7f",
									"id": 644,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateCountry",
									"nameLocation": "5768:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5790:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "5782:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5782:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "5811:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "5804:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 640,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5804:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5781:39:7"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5829:0:7"
									},
									"scope": 722,
									"src": "5759:71:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 645,
										"nodeType": "StructuredDocumentation",
										"src": "5836:526:7",
										"text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityUpdated` event"
									},
									"functionSelector": "8e098ca1",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateIdentity",
									"nameLocation": "6376:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6399:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6391:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6391:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "6423:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6413:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 649,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 648,
														"name": "IIdentity",
														"nameLocations": [
															"6413:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6413:9:7"
													},
													"referencedDeclaration": 328,
													"src": "6413:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6390:43:7"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6442:0:7"
									},
									"scope": 722,
									"src": "6367:76:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "6449:701:7",
										"text": "  @dev function allowing to register identities in batch\n  This function can only be called by a wallet set as agent of the smart contract\n  Requires that none of the users has an identity contract already registered.\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the users\n  @param _identities The addresses of the corresponding identity contracts\n  @param _countries The countries of the corresponding investors\n  emits _userAddresses.length `IdentityRegistered` events"
									},
									"functionSelector": "653dc9f1",
									"id": 667,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchRegisterIdentity",
									"nameLocation": "7164:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "7214:14:7",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7195:33:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 655,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "7195:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 656,
													"nodeType": "ArrayTypeName",
													"src": "7195:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "_identities",
												"nameLocation": "7259:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7238:32:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IIdentity_$328_$dyn_calldata_ptr",
													"typeString": "contract IIdentity[]"
												},
												"typeName": {
													"baseType": {
														"id": 659,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 658,
															"name": "IIdentity",
															"nameLocations": [
																"7238:9:7"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 328,
															"src": "7238:9:7"
														},
														"referencedDeclaration": 328,
														"src": "7238:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IIdentity_$328",
															"typeString": "contract IIdentity"
														}
													},
													"id": 660,
													"nodeType": "ArrayTypeName",
													"src": "7238:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IIdentity_$328_$dyn_storage_ptr",
														"typeString": "contract IIdentity[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "_countries",
												"nameLocation": "7298:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7280:28:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint16_$dyn_calldata_ptr",
													"typeString": "uint16[]"
												},
												"typeName": {
													"baseType": {
														"id": 662,
														"name": "uint16",
														"nodeType": "ElementaryTypeName",
														"src": "7280:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"id": 663,
													"nodeType": "ArrayTypeName",
													"src": "7280:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint16_$dyn_storage_ptr",
														"typeString": "uint16[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7185:129:7"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7323:0:7"
									},
									"scope": 722,
									"src": "7155:169:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "7330:292:7",
										"text": "  @dev This functions checks whether a wallet has its Identity registered or not\n  in the Identity Registry.\n  @param _userAddress The address of the user to be checked.\n  @return 'True' if the address is contained in the Identity Registry, 'false' if not."
									},
									"functionSelector": "5dbe47e8",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "7636:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "7653:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "7645:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7645:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7644:22:7"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "7690:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 672,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7690:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7689:6:7"
									},
									"scope": 722,
									"src": "7627:69:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "7702:389:7",
										"text": "  @dev This functions checks whether an identity contract\n  corresponding to the provided user address has the required claims or not based\n  on the data fetched from claim issuers registry and from the claim topics registry\n  @param _userAddress The address of the user to be verified.\n  @return 'True' if the address is verified, 'false' if not."
									},
									"functionSelector": "b9209e33",
									"id": 683,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isVerified",
									"nameLocation": "8105:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8124:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "8116:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8116:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8115:22:7"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "8161:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 680,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8161:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8160:6:7"
									},
									"scope": 722,
									"src": "8096:71:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "8173:117:7",
										"text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "f0eb5e54",
									"id": 692,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identity",
									"nameLocation": "8304:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8321:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "8313:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8313:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8312:22:7"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "8358:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 689,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 688,
														"name": "IIdentity",
														"nameLocations": [
															"8358:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "8358:9:7"
													},
													"referencedDeclaration": 328,
													"src": "8358:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8357:11:7"
									},
									"scope": 722,
									"src": "8295:74:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 693,
										"nodeType": "StructuredDocumentation",
										"src": "8375:120:7",
										"text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "7e42683b",
									"id": 700,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "investorCountry",
									"nameLocation": "8509:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8542:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "8534:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8534:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8524:36:7"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "8584:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 697,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "8584:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8583:8:7"
									},
									"scope": 722,
									"src": "8500:92:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 701,
										"nodeType": "StructuredDocumentation",
										"src": "8598:100:7",
										"text": "  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
									},
									"functionSelector": "f11abfd8",
									"id": 707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identityStorage",
									"nameLocation": "8712:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8727:2:7"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "8753:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
													"typeString": "contract IIdentityRegistryStorage"
												},
												"typeName": {
													"id": 704,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 703,
														"name": "IIdentityRegistryStorage",
														"nameLocations": [
															"8753:24:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 838,
														"src": "8753:24:7"
													},
													"referencedDeclaration": 838,
													"src": "8753:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistryStorage_$838",
														"typeString": "contract IIdentityRegistryStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8752:26:7"
									},
									"scope": 722,
									"src": "8703:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "8785:97:7",
										"text": "  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry."
									},
									"functionSelector": "b4f3fcb7",
									"id": 714,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "issuersRegistry",
									"nameLocation": "8896:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8911:2:7"
									},
									"returnParameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "8937:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
													"typeString": "contract IClaimIssuersRegistry"
												},
												"typeName": {
													"id": 711,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 710,
														"name": "IClaimIssuersRegistry",
														"nameLocations": [
															"8937:21:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 509,
														"src": "8937:21:7"
													},
													"referencedDeclaration": 509,
													"src": "8937:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimIssuersRegistry_$509",
														"typeString": "contract IClaimIssuersRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8936:23:7"
									},
									"scope": 722,
									"src": "8887:73:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "8966:96:7",
										"text": "  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
									},
									"functionSelector": "3b3e12f4",
									"id": 721,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "topicsRegistry",
									"nameLocation": "9076:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9090:2:7"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "9116:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
													"typeString": "contract IClaimTopicsRegistry"
												},
												"typeName": {
													"id": 718,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 717,
														"name": "IClaimTopicsRegistry",
														"nameLocations": [
															"9116:20:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 541,
														"src": "9116:20:7"
													},
													"referencedDeclaration": 541,
													"src": "9116:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IClaimTopicsRegistry_$541",
														"typeString": "contract IClaimTopicsRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9115:22:7"
									},
									"scope": 722,
									"src": "9067:71:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 723,
							"src": "312:8828:7",
							"usedErrors": [],
							"usedEvents": [
								554,
								560,
								566,
								574,
								582,
								591,
								598
							]
						}
					],
					"src": "36:9105:7"
				},
				"id": 7
			},
			"contracts/registry/interface/IIdentityRegistryStorage.sol": {
				"ast": {
					"absolutePath": "contracts/registry/interface/IIdentityRegistryStorage.sol",
					"exportedSymbols": {
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistryStorage": [
							838
						]
					},
					"id": 839,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 724,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:8"
						},
						{
							"absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
							"id": 725,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 839,
							"sourceUnit": 329,
							"src": "61:64:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIdentityRegistryStorage",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 838,
							"linearizedBaseContracts": [
								838
							],
							"name": "IIdentityRegistryStorage",
							"nameLocation": "137:24:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 726,
										"nodeType": "StructuredDocumentation",
										"src": "184:306:8",
										"text": "  this event is emitted when an Identity is registered into the storage contract.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "0030dea7e9c9afaa2e3c9810f2fc9b5181f1bad74ca5a8db85f746a33585e747",
									"id": 733,
									"name": "IdentityStored",
									"nameLocation": "501:14:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "541:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "525:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "525:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "584:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "566:26:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 730,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 729,
														"name": "IIdentity",
														"nameLocations": [
															"566:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "566:9:8"
													},
													"referencedDeclaration": 328,
													"src": "566:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "515:83:8"
									},
									"src": "495:104:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 734,
										"nodeType": "StructuredDocumentation",
										"src": "605:301:8",
										"text": "  this event is emitted when an Identity is removed from the storage contract.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
									},
									"eventSelector": "ca6a4c3370b859312246e7f086284076e557997e10d856b716c23ab67067790b",
									"id": 741,
									"name": "IdentityUnstored",
									"nameLocation": "917:16:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "959:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "943:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "1002:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "984:26:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 738,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 737,
														"name": "IIdentity",
														"nameLocations": [
															"984:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "984:9:8"
													},
													"referencedDeclaration": 328,
													"src": "984:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:83:8"
									},
									"src": "911:106:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "1023:261:8",
										"text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
									},
									"eventSelector": "556ce885dfcea52155c773f1ed2e58781c51945c13030ab8f793c61f51d1b808",
									"id": 750,
									"name": "IdentityModified",
									"nameLocation": "1295:16:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldIdentity",
												"nameLocation": "1339:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "1321:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 744,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 743,
														"name": "IIdentity",
														"nameLocations": [
															"1321:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1321:9:8"
													},
													"referencedDeclaration": 328,
													"src": "1321:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"indexed": true,
												"mutability": "mutable",
												"name": "newIdentity",
												"nameLocation": "1378:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "1360:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 747,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 746,
														"name": "IIdentity",
														"nameLocations": [
															"1360:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "1360:9:8"
													},
													"referencedDeclaration": 328,
													"src": "1360:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:84:8"
									},
									"src": "1289:107:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "1402:295:8",
										"text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
									},
									"eventSelector": "20965fcdc6eed7ae398065b40ece4e732ba667992ca819fc54e80e9f2047c4cf",
									"id": 757,
									"name": "CountryModified",
									"nameLocation": "1708:15:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"indexed": true,
												"mutability": "mutable",
												"name": "investorAddress",
												"nameLocation": "1749:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "1733:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"indexed": true,
												"mutability": "mutable",
												"name": "country",
												"nameLocation": "1789:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "1774:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 754,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1774:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1723:79:8"
									},
									"src": "1702:101:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 758,
										"nodeType": "StructuredDocumentation",
										"src": "1809:240:8",
										"text": "  this event is emitted when an Identity Registry is bound to the storage contract\n  the event is emitted by the 'addIdentityRegistry' function\n  `identityRegistry` is the address of the identity registry added"
									},
									"eventSelector": "500c250171aa20e861b680f93502547b9d436eda7d4c537fc360db6e0c6eedfb",
									"id": 762,
									"name": "IdentityRegistryBound",
									"nameLocation": "2060:21:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityRegistry",
												"nameLocation": "2098:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "2082:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2082:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2081:34:8"
									},
									"src": "2054:62:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "2122:249:8",
										"text": "  this event is emitted when an Identity Registry is unbound from the storage contract\n  the event is emitted by the 'removeIdentityRegistry' function\n  `identityRegistry` is the address of the identity registry removed"
									},
									"eventSelector": "51f353eb5801583fdf2706e43c045b62fdf6b1566820b349390616363ecf72c9",
									"id": 767,
									"name": "IdentityRegistryUnbound",
									"nameLocation": "2382:23:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"indexed": true,
												"mutability": "mutable",
												"name": "identityRegistry",
												"nameLocation": "2422:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "2406:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2405:34:8"
									},
									"src": "2376:64:8"
								},
								{
									"documentation": {
										"id": 768,
										"nodeType": "StructuredDocumentation",
										"src": "2465:483:8",
										"text": "  @dev adds an identity contract corresponding to a user address in the storage.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityStored` event"
									},
									"functionSelector": "a53410dd",
									"id": 778,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addIdentityToStorage",
									"nameLocation": "2962:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3000:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "2992:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2992:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "3032:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "3022:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 772,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 771,
														"name": "IIdentity",
														"nameLocations": [
															"3022:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "3022:9:8"
													},
													"referencedDeclaration": 328,
													"src": "3022:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "3058:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "3051:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 774,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3051:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2982:90:8"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3081:0:8"
									},
									"scope": 838,
									"src": "2953:129:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "3088:349:8",
										"text": "  @dev Removes an user from the storage.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityUnstored` event"
									},
									"functionSelector": "cf191bcd",
									"id": 784,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeIdentityFromStorage",
									"nameLocation": "3451:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3485:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "3477:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3477:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3476:22:8"
									},
									"returnParameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3507:0:8"
									},
									"scope": 838,
									"src": "3442:66:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 785,
										"nodeType": "StructuredDocumentation",
										"src": "3514:413:8",
										"text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryModified` event"
									},
									"functionSelector": "9f3418d5",
									"id": 792,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "modifyStoredInvestorCountry",
									"nameLocation": "3941:27:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3986:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "3978:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 786,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "_country",
												"nameLocation": "4015:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "4008:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 788,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4008:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3968:61:8"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4038:0:8"
									},
									"scope": 838,
									"src": "3932:107:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "4045:529:8",
										"text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by an address set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityModified` event"
									},
									"functionSelector": "e805cf86",
									"id": 801,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "modifyStoredIdentity",
									"nameLocation": "4588:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4626:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "4618:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4618:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "4658:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "4648:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 797,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 796,
														"name": "IIdentity",
														"nameLocations": [
															"4648:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "4648:9:8"
													},
													"referencedDeclaration": 328,
													"src": "4648:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4608:65:8"
									},
									"returnParameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4682:0:8"
									},
									"scope": 838,
									"src": "4579:104:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "4689:426:8",
										"text": "  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n  cannot bind more than 300 IR to 1 IRS\n  @param _identityRegistry The identity registry address to add."
									},
									"functionSelector": "690a49f9",
									"id": 807,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "bindIdentityRegistry",
									"nameLocation": "5129:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5158:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "5150:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 803,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5150:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5149:27:8"
									},
									"returnParameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5185:0:8"
									},
									"scope": 838,
									"src": "5120:66:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "5192:399:8",
										"text": "  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n  @param _identityRegistry The identity registry address to remove."
									},
									"functionSelector": "97a012f7",
									"id": 813,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unbindIdentityRegistry",
									"nameLocation": "5605:22:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5636:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "5628:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5628:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5627:27:8"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5663:0:8"
									},
									"scope": 838,
									"src": "5596:68:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "5670:87:8",
										"text": "  @dev Returns the identity registries linked to the storage contract"
									},
									"functionSelector": "bf9eb959",
									"id": 820,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "linkedIdentityRegistries",
									"nameLocation": "5771:24:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5795:2:8"
									},
									"returnParameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "5845:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 816,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5845:7:8",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 817,
													"nodeType": "ArrayTypeName",
													"src": "5845:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5844:18:8"
									},
									"scope": 838,
									"src": "5762:101:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "5869:117:8",
										"text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "7988d3a5",
									"id": 829,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "storedIdentity",
									"nameLocation": "6000:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6032:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6024:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6024:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6014:36:8"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6074:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentity_$328",
													"typeString": "contract IIdentity"
												},
												"typeName": {
													"id": 826,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 825,
														"name": "IIdentity",
														"nameLocations": [
															"6074:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 328,
														"src": "6074:9:8"
													},
													"referencedDeclaration": 328,
													"src": "6074:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentity_$328",
														"typeString": "contract IIdentity"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6073:11:8"
									},
									"scope": 838,
									"src": "5991:94:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 830,
										"nodeType": "StructuredDocumentation",
										"src": "6091:120:8",
										"text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
									},
									"functionSelector": "727e13bc",
									"id": 837,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "storedInvestorCountry",
									"nameLocation": "6225:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "6264:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "6256:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6256:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6246:36:8"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "6306:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 834,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6306:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6305:8:8"
									},
									"scope": 838,
									"src": "6216:98:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 839,
							"src": "127:6189:8",
							"usedErrors": [],
							"usedEvents": [
								733,
								741,
								750,
								757,
								762,
								767
							]
						}
					],
					"src": "36:6281:8"
				},
				"id": 8
			},
			"contracts/token/IToken.sol": {
				"ast": {
					"absolutePath": "contracts/token/IToken.sol",
					"exportedSymbols": {
						"IClaimIssuer": [
							49
						],
						"IClaimIssuersRegistry": [
							509
						],
						"IClaimTopicsRegistry": [
							541
						],
						"IERC20": [
							406
						],
						"IERC734": [
							196
						],
						"IERC735": [
							304
						],
						"IIdentity": [
							328
						],
						"IIdentityRegistry": [
							722
						],
						"IIdentityRegistryStorage": [
							838
						],
						"IToken": [
							1115
						]
					},
					"id": 1116,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 840,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:9"
						},
						{
							"absolutePath": "contracts/registry/interface/IIdentityRegistry.sol",
							"file": "../registry/interface/IIdentityRegistry.sol",
							"id": 841,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1116,
							"sourceUnit": 723,
							"src": "61:53:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 842,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1116,
							"sourceUnit": 407,
							"src": "115:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 844,
										"name": "IERC20",
										"nameLocations": [
											"212:6:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 406,
										"src": "212:6:9"
									},
									"id": 845,
									"nodeType": "InheritanceSpecifier",
									"src": "212:6:9"
								}
							],
							"canonicalName": "IToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 843,
								"nodeType": "StructuredDocumentation",
								"src": "173:19:9",
								"text": "@dev interface"
							},
							"fullyImplemented": false,
							"id": 1115,
							"linearizedBaseContracts": [
								1115,
								406
							],
							"name": "IToken",
							"nameLocation": "202:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 846,
										"nodeType": "StructuredDocumentation",
										"src": "241:231:9",
										"text": "  this event is emitted when the onchainID  is updated.\n  the event is emitted by the token init function and by the setOnchainID function\n  `_newOnchainID` is the address of the onchainID of the token"
									},
									"eventSelector": "b940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f",
									"id": 850,
									"name": "UpdatedOnchainID",
									"nameLocation": "483:16:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"indexed": true,
												"mutability": "mutable",
												"name": "_newOnchainID",
												"nameLocation": "516:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "500:29:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:31:9"
									},
									"src": "477:54:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "537:269:9",
										"text": "  this event is emitted when the IdentityRegistry has been set for the token\n  the event is emitted by the token constructor and by the setIdentityRegistry function\n  `_identityRegistry` is the address of the Identity Registry of the token"
									},
									"eventSelector": "d2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c",
									"id": 855,
									"name": "IdentityRegistryAdded",
									"nameLocation": "817:21:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"indexed": true,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "855:17:9",
												"nodeType": "VariableDeclaration",
												"scope": 855,
												"src": "839:33:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 852,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:35:9"
									},
									"src": "811:63:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 856,
										"nodeType": "StructuredDocumentation",
										"src": "880:253:9",
										"text": "  this event is emitted when the Compliance has been set for the token\n  the event is emitted by the token constructor and by the setCompliance function\n  `_compliance` is the address of the Compliance contract of the token"
									},
									"eventSelector": "7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b6",
									"id": 860,
									"name": "ComplianceAdded",
									"nameLocation": "1144:15:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 858,
												"indexed": true,
												"mutability": "mutable",
												"name": "_compliance",
												"nameLocation": "1176:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "1160:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1160:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1159:29:9"
									},
									"src": "1138:51:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "1195:432:9",
										"text": "  this event is emitted when an investor successfully recovers his tokens\n  the event is emitted by the recoveryAddress function\n  `_lostWallet` is the address of the wallet that the investor lost access to\n  `_newWallet` is the address of the wallet that the investor provided for the recovery\n  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery"
									},
									"eventSelector": "f0c9129a94f30f1caaceb63e44b9811d0a3edf1d6c23757f346093af5553fed0",
									"id": 869,
									"name": "RecoverySuccess",
									"nameLocation": "1638:15:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"indexed": true,
												"mutability": "mutable",
												"name": "_lostWallet",
												"nameLocation": "1679:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1663:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 862,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1663:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 865,
												"indexed": true,
												"mutability": "mutable",
												"name": "_newWallet",
												"nameLocation": "1716:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1700:26:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 864,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1700:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 867,
												"indexed": true,
												"mutability": "mutable",
												"name": "_investorOnchainID",
												"nameLocation": "1752:18:9",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1736:34:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1736:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1653:123:9"
									},
									"src": "1632:145:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "1783:595:9",
										"text": "  this event is emitted when the wallet of an investor is frozen or unfrozen\n  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_isFrozen` is the freezing status of the wallet\n  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n  `_owner` is the address of the agent who called the function to freeze the wallet"
									},
									"eventSelector": "7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f436",
									"id": 878,
									"name": "AddressFrozen",
									"nameLocation": "2389:13:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "2428:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "2412:28:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2412:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"indexed": true,
												"mutability": "mutable",
												"name": "_isFrozen",
												"nameLocation": "2463:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "2450:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2450:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"indexed": true,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "2498:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "2482:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 875,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2482:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2402:108:9"
									},
									"src": "2383:128:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 879,
										"nodeType": "StructuredDocumentation",
										"src": "2517:338:9",
										"text": "  this event is emitted when a certain amount of tokens is frozen on a wallet\n  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_amount` is the amount of tokens that are frozen"
									},
									"eventSelector": "a065e63c631c86f1b9f66a4a2f63f2093bf1c2168d23290259dbd969e0222a45",
									"id": 885,
									"name": "TokensFrozen",
									"nameLocation": "2866:12:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "2895:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "2879:28:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2879:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 883,
												"indexed": false,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2917:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "2909:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2909:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2878:47:9"
									},
									"src": "2860:66:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 886,
										"nodeType": "StructuredDocumentation",
										"src": "2932:346:9",
										"text": "  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n  `_amount` is the amount of tokens that are unfrozen"
									},
									"eventSelector": "9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6",
									"id": 892,
									"name": "TokensUnfrozen",
									"nameLocation": "3289:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"indexed": true,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "3320:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "3304:28:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3304:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"indexed": false,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3342:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "3334:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3334:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3303:47:9"
									},
									"src": "3283:68:9"
								},
								{
									"documentation": {
										"id": 893,
										"nodeType": "StructuredDocumentation",
										"src": "3357:242:9",
										"text": "  @dev sets the onchain ID of the token\n  @param _onchainID the address of the onchain ID to set\n  Only the owner of the token smart contract can call this function\n  emits a `UpdatedTokenInformation` event"
									},
									"functionSelector": "3d1ddc5b",
									"id": 898,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOnchainID",
									"nameLocation": "3613:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "_onchainID",
												"nameLocation": "3634:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "3626:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3626:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3625:20:9"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3654:0:9"
									},
									"scope": 1115,
									"src": "3604:51:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 899,
										"nodeType": "StructuredDocumentation",
										"src": "3661:226:9",
										"text": "  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n  This function can only be called by a wallet set as agent of the token\n  emits a `Paused` event"
									},
									"functionSelector": "8456cb59",
									"id": 902,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pause",
									"nameLocation": "3901:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3906:2:9"
									},
									"returnParameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3917:0:9"
									},
									"scope": 1115,
									"src": "3892:26:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "3924:324:9",
										"text": "  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n  This function can only be called by a wallet set as agent of the token\n  emits an `Unpaused` event"
									},
									"functionSelector": "3f4ba83a",
									"id": 906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unpause",
									"nameLocation": "4262:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4269:2:9"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4280:0:9"
									},
									"scope": 1115,
									"src": "4253:28:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "4287:314:9",
										"text": "  @dev sets an address frozen status for this token.\n  @param _userAddress The address for which to update frozen status\n  @param _freeze Frozen status of the address\n  This function can only be called by a wallet set as agent of the token\n  emits an `AddressFrozen` event"
									},
									"functionSelector": "c69c09cf",
									"id": 914,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAddressFrozen",
									"nameLocation": "4615:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "4640:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4632:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4632:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "_freeze",
												"nameLocation": "4659:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4654:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 910,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4654:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4631:36:9"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4676:0:9"
									},
									"scope": 1115,
									"src": "4606:71:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "4683:317:9",
										"text": "  @dev freezes token amount specified for given address.\n  @param _userAddress The address for which to update frozen tokens\n  @param _amount Amount of Tokens to be frozen\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensFrozen` event"
									},
									"functionSelector": "125c4a33",
									"id": 922,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "freezePartialTokens",
									"nameLocation": "5014:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5051:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "5043:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 916,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5043:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5081:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "5073:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5073:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5033:61:9"
									},
									"returnParameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5103:0:9"
									},
									"scope": 1115,
									"src": "5005:99:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "5110:322:9",
										"text": "  @dev unfreezes token amount specified for given address\n  @param _userAddress The address for which to update frozen tokens\n  @param _amount Amount of Tokens to be unfrozen\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event"
									},
									"functionSelector": "1fe56f7d",
									"id": 930,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unfreezePartialTokens",
									"nameLocation": "5446:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "5485:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "5477:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5477:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5515:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "5507:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5507:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5467:61:9"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5537:0:9"
									},
									"scope": 1115,
									"src": "5437:101:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "5544:263:9",
										"text": "  @dev sets the Identity Registry for the token\n  @param _identityRegistry the address of the Identity Registry to set\n  Only the owner of the token smart contract can call this function\n  emits an `IdentityRegistryAdded` event"
									},
									"functionSelector": "cbf3f861",
									"id": 936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setIdentityRegistry",
									"nameLocation": "5821:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "_identityRegistry",
												"nameLocation": "5849:17:9",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "5841:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5841:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5840:27:9"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5876:0:9"
									},
									"scope": 1115,
									"src": "5812:65:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 937,
										"nodeType": "StructuredDocumentation",
										"src": "5883:304:9",
										"text": "  @dev sets the compliance contract of the token\n  @param _compliance the address of the compliance contract to set\n  Only the owner of the token smart contract can call this function\n  calls bindToken on the compliance contract\n  emits a `ComplianceAdded` event"
									},
									"functionSelector": "f8981789",
									"id": 942,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCompliance",
									"nameLocation": "6201:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "_compliance",
												"nameLocation": "6223:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "6215:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6215:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6214:21:9"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6244:0:9"
									},
									"scope": 1115,
									"src": "6192:53:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 943,
										"nodeType": "StructuredDocumentation",
										"src": "6251:940:9",
										"text": "  @dev force a transfer of tokens between 2 whitelisted wallets\n  In case the `from` address has not enough free tokens (unfrozen tokens)\n  but has a total balance higher or equal to the `amount`\n  the amount of frozen tokens is reduced in order to have enough free tokens\n  to proceed the transfer, in such a case, the remaining balance on the `from`\n  account is 100% composed of frozen tokens post-transfer.\n  Require that the `to` address is a verified address,\n  @param _from The address of the sender\n  @param _to The address of the receiver\n  @param _amount The number of tokens to transfer\n  @return `true` if successful and revert if unsuccessful\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n  emits a `Transfer` event"
									},
									"functionSelector": "9fc1d0e7",
									"id": 954,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "forcedTransfer",
									"nameLocation": "7205:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "_from",
												"nameLocation": "7237:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "7229:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 944,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7229:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "7260:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "7252:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7252:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7281:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "7273:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7273:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7219:75:9"
									},
									"returnParameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "7313:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 951,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7313:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7312:6:9"
									},
									"scope": 1115,
									"src": "7196:123:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 955,
										"nodeType": "StructuredDocumentation",
										"src": "7325:411:9",
										"text": "  @dev mint tokens on a wallet\n  Improved version of default mint method. Tokens can be minted\n  to an address if only it is a verified address as per the security token.\n  @param _to Address to mint the tokens to.\n  @param _amount Amount of tokens to mint.\n  This function can only be called by a wallet set as agent of the token\n  emits a `Transfer` event"
									},
									"functionSelector": "40c10f19",
									"id": 962,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7750:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "7763:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7755:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 956,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7755:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7776:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7768:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7768:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7754:30:9"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7793:0:9"
									},
									"scope": 1115,
									"src": "7741:53:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "7800:752:9",
										"text": "  @dev burn tokens on a wallet\n  In case the `account` address has not enough free tokens (unfrozen tokens)\n  but has a total balance higher or equal to the `value` amount\n  the amount of frozen tokens is reduced in order to have enough free tokens\n  to proceed the burn, in such a case, the remaining balance on the `account`\n  is 100% composed of frozen tokens post-transaction.\n  @param _userAddress Address to burn the tokens from.\n  @param _amount Amount of tokens to burn.\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n  emits a `Transfer` event"
									},
									"functionSelector": "9dc29fac",
									"id": 970,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8566:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "8579:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "8571:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8571:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8601:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "8593:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 966,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8593:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8570:39:9"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8618:0:9"
									},
									"scope": 1115,
									"src": "8557:62:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "8625:793:9",
										"text": "  @dev recovery function used to force transfer tokens from a\n  lost wallet to a new wallet for an investor.\n  @param _lostWallet the wallet that the investor lost\n  @param _newWallet the newly provided wallet on which tokens have to be transferred\n  @param _investorOnchainID the onchainID of the investor asking for a recovery\n  This function can only be called by a wallet set as agent of the token\n  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n  emits a `Transfer` event if the recovery process is successful\n  emits a `RecoverySuccess` event if the recovery process is successful\n  emits a `RecoveryFails` event if the recovery process fails"
									},
									"functionSelector": "9285948a",
									"id": 982,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoveryAddress",
									"nameLocation": "9432:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "_lostWallet",
												"nameLocation": "9465:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "9457:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9457:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "_newWallet",
												"nameLocation": "9494:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "9486:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9486:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "_investorOnchainID",
												"nameLocation": "9522:18:9",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "9514:26:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9514:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9447:99:9"
									},
									"returnParameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "9565:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 979,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9565:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9564:6:9"
									},
									"scope": 1115,
									"src": "9423:148:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "9577:645:9",
										"text": "  @dev function allowing to issue transfers in batch\n  Require that the msg.sender and `to` addresses are not frozen.\n  Require that the total value should not exceed available balance.\n  Require that the `to` addresses are all verified addresses,\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to transfer to the corresponding receiver\n  emits _toList.length `Transfer` events"
									},
									"functionSelector": "88d695b2",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchTransfer",
									"nameLocation": "10236:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "10278:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "10259:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 984,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10259:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 985,
													"nodeType": "ArrayTypeName",
													"src": "10259:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "10314:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "10295:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 987,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "10295:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 988,
													"nodeType": "ArrayTypeName",
													"src": "10295:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10249:79:9"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10337:0:9"
									},
									"scope": 1115,
									"src": "10227:111:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "10344:843:9",
										"text": "  @dev function allowing to issue forced transfers in batch\n  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n  Require that the `_toList` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _fromList The addresses of the senders\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to transfer to the corresponding receiver\n  This function can only be called by a wallet set as agent of the token\n  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n  emits _fromList.length `Transfer` events"
									},
									"functionSelector": "42a47abc",
									"id": 1005,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchForcedTransfer",
									"nameLocation": "11201:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "_fromList",
												"nameLocation": "11249:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "11230:28:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 994,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11230:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 995,
													"nodeType": "ArrayTypeName",
													"src": "11230:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "11287:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "11268:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 997,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11268:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 998,
													"nodeType": "ArrayTypeName",
													"src": "11268:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "11323:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "11304:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1000,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11304:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1001,
													"nodeType": "ArrayTypeName",
													"src": "11304:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11220:117:9"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11346:0:9"
									},
									"scope": 1115,
									"src": "11192:155:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "11353:575:9",
										"text": "  @dev function allowing to mint tokens in batch\n  Require that the `_toList` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _toList The addresses of the receivers\n  @param _amounts The number of tokens to mint to the corresponding receiver\n  This function can only be called by a wallet set as agent of the token\n  emits _toList.length `Transfer` events"
									},
									"functionSelector": "68573107",
									"id": 1015,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchMint",
									"nameLocation": "11942:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "_toList",
												"nameLocation": "11980:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "11961:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1007,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11961:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1008,
													"nodeType": "ArrayTypeName",
													"src": "11961:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "12016:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "11997:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1010,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11997:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1011,
													"nodeType": "ArrayTypeName",
													"src": "11997:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11951:79:9"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12039:0:9"
									},
									"scope": 1115,
									"src": "11933:107:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1016,
										"nodeType": "StructuredDocumentation",
										"src": "12046:624:9",
										"text": "  @dev function allowing to burn tokens in batch\n  Require that the `_userAddresses` addresses are all verified addresses\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the wallets concerned by the burn\n  @param _amounts The number of tokens to burn from the corresponding wallets\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `Transfer` events"
									},
									"functionSelector": "4a6cc677",
									"id": 1025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchBurn",
									"nameLocation": "12684:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "12722:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "12703:33:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1017,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12703:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1018,
													"nodeType": "ArrayTypeName",
													"src": "12703:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "12765:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "12746:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1020,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12746:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1021,
													"nodeType": "ArrayTypeName",
													"src": "12746:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12693:86:9"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12788:0:9"
									},
									"scope": 1115,
									"src": "12675:114:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "12795:538:9",
										"text": "  @dev function allowing to set frozen addresses in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses for which to update frozen status\n  @param _freeze Frozen status of the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `AddressFrozen` events"
									},
									"functionSelector": "1a7af379",
									"id": 1035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchSetAddressFrozen",
									"nameLocation": "13347:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "13397:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "13378:33:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1027,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "13378:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1028,
													"nodeType": "ArrayTypeName",
													"src": "13378:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "_freeze",
												"nameLocation": "13437:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "13421:23:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1030,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13421:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1031,
													"nodeType": "ArrayTypeName",
													"src": "13421:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13368:82:9"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13459:0:9"
									},
									"scope": 1115,
									"src": "13338:122:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "13466:558:9",
										"text": "  @dev function allowing to freeze tokens partially in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses on which tokens need to be frozen\n  @param _amounts the amount of tokens to freeze on the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `TokensFrozen` events"
									},
									"functionSelector": "fc7e5fa8",
									"id": 1045,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchFreezePartialTokens",
									"nameLocation": "14038:24:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "14091:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "14072:33:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1037,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "14072:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1038,
													"nodeType": "ArrayTypeName",
													"src": "14072:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "14134:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "14115:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1040,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14115:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1041,
													"nodeType": "ArrayTypeName",
													"src": "14115:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14062:86:9"
									},
									"returnParameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14157:0:9"
									},
									"scope": 1115,
									"src": "14029:129:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "14164:566:9",
										"text": "  @dev function allowing to unfreeze tokens partially in batch\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses on which tokens need to be unfrozen\n  @param _amounts the amount of tokens to unfreeze on the corresponding address\n  This function can only be called by a wallet set as agent of the token\n  emits _userAddresses.length `TokensUnfrozen` events"
									},
									"functionSelector": "4710362d",
									"id": 1055,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchUnfreezePartialTokens",
									"nameLocation": "14744:26:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "_userAddresses",
												"nameLocation": "14799:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "14780:33:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1047,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "14780:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1048,
													"nodeType": "ArrayTypeName",
													"src": "14780:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "_amounts",
												"nameLocation": "14842:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "14823:27:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1050,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14823:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1051,
													"nodeType": "ArrayTypeName",
													"src": "14823:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14770:86:9"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14865:0:9"
									},
									"scope": 1115,
									"src": "14735:131:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1056,
										"nodeType": "StructuredDocumentation",
										"src": "14872:523:9",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 1 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n balanceOf() and transfer()."
									},
									"functionSelector": "313ce567",
									"id": 1061,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "15409:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15417:2:9"
									},
									"returnParameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "15443:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1058,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "15443:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15442:7:9"
									},
									"scope": 1115,
									"src": "15400:50:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1062,
										"nodeType": "StructuredDocumentation",
										"src": "15456:54:9",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1067,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "15524:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15528:2:9"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "15554:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1064,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "15554:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15553:15:9"
									},
									"scope": 1115,
									"src": "15515:54:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "15575:216:9",
										"text": " @dev Returns the address of the onchainID of the token.\n the onchainID of the token gives all the information available\n about the token and is managed by the token issuer or his agent."
									},
									"functionSelector": "aba63705",
									"id": 1073,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onchainID",
									"nameLocation": "15805:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15814:2:9"
									},
									"returnParameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "15840:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1070,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15840:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15839:9:9"
									},
									"scope": 1115,
									"src": "15796:53:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "15855:102:9",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1079,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "15971:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15977:2:9"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "16003:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1076,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "16003:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16002:15:9"
									},
									"scope": 1115,
									"src": "15962:56:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1080,
										"nodeType": "StructuredDocumentation",
										"src": "16024:94:9",
										"text": " @dev Returns the TREX version of the token.\n current version is 3.0.0"
									},
									"functionSelector": "54fd4d50",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "version",
									"nameLocation": "16132:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16139:2:9"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "16165:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1082,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "16165:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16164:15:9"
									},
									"scope": 1115,
									"src": "16123:57:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "16186:74:9",
										"text": "  @dev Returns the Identity Registry linked to the token"
									},
									"functionSelector": "134e18f4",
									"id": 1092,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "identityRegistry",
									"nameLocation": "16274:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16290:2:9"
									},
									"returnParameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "16316:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IIdentityRegistry_$722",
													"typeString": "contract IIdentityRegistry"
												},
												"typeName": {
													"id": 1089,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1088,
														"name": "IIdentityRegistry",
														"nameLocations": [
															"16316:17:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 722,
														"src": "16316:17:9"
													},
													"referencedDeclaration": 722,
													"src": "16316:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IIdentityRegistry_$722",
														"typeString": "contract IIdentityRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16315:19:9"
									},
									"scope": 1115,
									"src": "16265:70:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "16341:76:9",
										"text": "  @dev Returns the Compliance contract linked to the token"
									},
									"functionSelector": "6290865d",
									"id": 1098,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "compliance",
									"nameLocation": "16431:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16441:2:9"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1098,
												"src": "16467:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16467:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16466:9:9"
									},
									"scope": 1115,
									"src": "16422:54:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1099,
										"nodeType": "StructuredDocumentation",
										"src": "16482:433:9",
										"text": "  @dev Returns the freezing status of a wallet\n  if isFrozen returns `true` the wallet is frozen\n  if isFrozen returns `false` the wallet is not frozen\n  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n  a partial freeze or the whole token could be blocked by pause\n  @param _userAddress the address of the wallet on which isFrozen is called"
									},
									"functionSelector": "e5839836",
									"id": 1106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isFrozen",
									"nameLocation": "16929:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "16946:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1106,
												"src": "16938:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16938:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16937:22:9"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1106,
												"src": "16983:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1103,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16983:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16982:6:9"
									},
									"scope": 1115,
									"src": "16920:69:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1107,
										"nodeType": "StructuredDocumentation",
										"src": "16995:264:9",
										"text": "  @dev Returns the amount of tokens that are partially frozen on a wallet\n  the amount of frozen tokens is always <= to the total balance of the wallet\n  @param _userAddress the address of the wallet on which getFrozenTokens is called"
									},
									"functionSelector": "158b1a57",
									"id": 1114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFrozenTokens",
									"nameLocation": "17273:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "_userAddress",
												"nameLocation": "17306:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "17298:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17298:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17288:36:9"
									},
									"returnParameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "17348:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17348:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17347:9:9"
									},
									"scope": 1115,
									"src": "17264:93:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1116,
							"src": "192:17167:9",
							"usedErrors": [],
							"usedEvents": [
								340,
								349,
								850,
								855,
								860,
								869,
								878,
								885,
								892
							]
						}
					],
					"src": "36:17324:9"
				},
				"id": 9
			}
		}
	}
}