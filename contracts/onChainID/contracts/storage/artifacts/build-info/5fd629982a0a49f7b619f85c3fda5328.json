{
	"id": "5fd629982a0a49f7b619f85c3fda5328",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/onChainID/contracts/storage/Storage.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\nimport \"./Structs.sol\";\n\ncontract Storage is Structs {\n    // nonce used by the execute/approve function\n    uint256 internal _executionNonce;\n\n    // keys as defined by IERC734\n    mapping(bytes32 => Key) internal _keys;\n\n    // keys for a given purpose\n    // purpose 1 = MANAGEMENT\n    // purpose 2 = ACTION\n    // purpose 3 = CLAIM\n    mapping(uint256 => bytes32[]) internal _keysByPurpose;\n\n    // execution data\n    mapping(uint256 => Execution) internal _executions;\n\n    // claims held by the ONCHAINID\n    mapping(bytes32 => Claim) internal _claims;\n\n    // array of claims for a given topic\n    mapping(uint256 => bytes32[]) internal _claimsByTopic;\n\n    // status on initialization\n    bool internal _initialized = false;\n\n    // status on potential interactions with the contract\n    bool internal _canInteract = false;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"contracts/onChainID/contracts/storage/Structs.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.20;\n\ncontract Structs {\n\n   /**\n    *  @dev Definition of the structure of a Key.\n    *\n    *  Specification: Keys are cryptographic public keys, or contract addresses associated with this identity.\n    *  The structure should be as follows:\n    *  key: A public key owned by this identity\n    *  purposes: uint256[] Array of the key purposes, like 1 = MANAGEMENT, 2 = EXECUTION\n    *  keyType: The type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\n    *  key: bytes32 The public key. // Its the Keccak256 hash of the key\n    */\n    struct Key {\n        uint256[] purposes;\n        uint256 keyType;\n        bytes32 key;\n    }\n\n    /**\n    *  @dev Definition of the structure of an Execution\n    *\n    *  Specification: Executions are requests for transactions to be issued by the ONCHAINID\n    *  to: address of contract to interact with, can be address(this)\n    *  value: ETH to transfer with the transaction\n    *  data: payload of the transaction to execute\n    *  approved: approval status of the Execution\n    *  executed: execution status of the Execution (set as false when the Execution is created\n    *  and updated to true when the Execution is processed)\n    */\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n   /**\n    *  @dev Definition of the structure of a Claim.\n    *\n    *  Specification: Claims are information an issuer has about the identity holder.\n    *  The structure should be as follows:\n    *  claim: A claim published for the Identity.\n    *  topic: A uint256 number which represents the topic of the claim. (e.g. 1 biometric, 2 residence (ToBeDefined:\n    *  number schemes, sub topics based on number ranges??))\n    *  scheme : The scheme with which this claim SHOULD be verified or how it should be processed. Its a uint256 for\n    *  different schemes. E.g. could 3 mean contract verification, where the data will be call data, and the issuer a\n    *  contract address to call (ToBeDefined). Those can also mean different key types e.g. 1 = ECDSA, 2 = RSA, etc.\n    *  (ToBeDefined)\n    *  issuer: The issuers identity contract address, or the address used to sign the above signature. If an\n    *  identity contract, it should hold the key with which the above message was signed, if the key is not present\n    *  anymore, the claim SHOULD be treated as invalid. The issuer can also be a contract address itself, at which the\n    *  claim can be verified using the call data.\n    *  signature: Signature which is the proof that the claim issuer issued a claim of topic for this identity. it\n    *  MUST be a signed message of the following structure: `keccak256(abi.encode(identityHolder_address, topic, data))`\n    *  data: The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on\n    *  the claim scheme.\n    *  uri: The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.\n    */\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer;\n        bytes signature;\n        bytes data;\n        string uri;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/onChainID/contracts/storage/Storage.sol": {
				"Storage": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/onChainID/contracts/storage/Storage.sol\":85:1104  contract Storage is Structs {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/onChainID/contracts/storage/Storage.sol\":786:791  false */\n  0x00\n    /* \"contracts/onChainID/contracts/storage/Storage.sol\":757:791  bool internal _initialized = false */\n  0x06\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/onChainID/contracts/storage/Storage.sol\":885:890  false */\n  0x00\n    /* \"contracts/onChainID/contracts/storage/Storage.sol\":856:890  bool internal _canInteract = false */\n  0x06\n  exp(0x0100, 0x01)\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/onChainID/contracts/storage/Storage.sol\":85:1104  contract Storage is Structs {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/onChainID/contracts/storage/Storage.sol\":85:1104  contract Storage is Structs {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122005b89fd455078cf2954beb10e89da0cfa9ad095f734b5cd939e2604db2fa836164736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040525f60065f6101000a81548160ff0219169083151502179055505f600660016101000a81548160ff0219169083151502179055503480156041575f80fd5b50603e80604d5f395ff3fe60806040525f80fdfea264697066735822122005b89fd455078cf2954beb10e89da0cfa9ad095f734b5cd939e2604db2fa836164736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH1 0x6 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH0 PUSH1 0x6 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH1 0x41 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x4D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV 0xB8 SWAP16 0xD4 SSTORE SMOD DUP13 CALLCODE SWAP6 0x4B 0xEB LT 0xE8 SWAP14 LOG0 0xCF 0xA9 0xAD MULMOD PUSH0 PUSH20 0x4B5CD939E2604DB2FA836164736F6C6343000814 STOP CALLER ",
							"sourceMap": "85:1019:0:-:0;;;786:5;757:34;;;;;;;;;;;;;;;;;;;;885:5;856:34;;;;;;;;;;;;;;;;;;;;85:1019;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea264697066735822122005b89fd455078cf2954beb10e89da0cfa9ad095f734b5cd939e2604db2fa836164736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV 0xB8 SWAP16 0xD4 SSTORE SMOD DUP13 CALLCODE SWAP6 0x4B 0xEB LT 0xE8 SWAP14 LOG0 0xCF 0xA9 0xAD MULMOD PUSH0 PUSH20 0x4B5CD939E2604DB2FA836164736F6C6343000814 STOP CALLER ",
							"sourceMap": "85:1019:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "48645",
								"totalCost": "61045"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 786,
									"end": 791,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 757,
									"end": 791,
									"name": "PUSH",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 757,
									"end": 791,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 757,
									"end": 791,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 757,
									"end": 791,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 757,
									"end": 791,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 757,
									"end": 791,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 885,
									"end": 890,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 856,
									"end": 890,
									"name": "PUSH",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 856,
									"end": 890,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 856,
									"end": 890,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 856,
									"end": 890,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 856,
									"end": 890,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 856,
									"end": 890,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 85,
									"end": 1104,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122005b89fd455078cf2954beb10e89da0cfa9ad095f734b5cd939e2604db2fa836164736f6c63430008140033",
									".code": [
										{
											"begin": 85,
											"end": 1104,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 85,
											"end": 1104,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85,
											"end": 1104,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85,
											"end": 1104,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 85,
											"end": 1104,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85,
											"end": 1104,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/onChainID/contracts/storage/Storage.sol",
								"contracts/onChainID/contracts/storage/Structs.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onChainID/contracts/storage/Storage.sol\":\"Storage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/onChainID/contracts/storage/Storage.sol\":{\"keccak256\":\"0xe793101d554d37fab96da523a59489f5874d6b460e5bb34b3e7561f0a92cbd70\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://121d46d35633a0bdd37b7d674a744323600fd64899568f86f5869f89f5aa3020\",\"dweb:/ipfs/QmZPBS4b6qB9urv4sdq2UZRrNfKw6fqGVsZN3VPiw5Nw1e\"]},\"contracts/onChainID/contracts/storage/Structs.sol\":{\"keccak256\":\"0x49e2af7bf192ca52a2f62b86b58664bf8769df38ef44fb62bde43cd04d64dc03\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6b9e5c38fabefc0bf21df8f65bebc64336a00ff54399a9aad0a626523fe4ff1a\",\"dweb:/ipfs/QmUo3W97K1XcU7RsPenJ9cMttd9sHbGvfTxyyDyXBTERML\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_executionNonce",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 11,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_keys",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_bytes32,t_struct(Key)54_storage)"
							},
							{
								"astId": 16,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_keysByPurpose",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
							},
							{
								"astId": 21,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_executions",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint256,t_struct(Execution)66_storage)"
							},
							{
								"astId": 26,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_claims",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_bytes32,t_struct(Claim)80_storage)"
							},
							{
								"astId": 31,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_claimsByTopic",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
							},
							{
								"astId": 34,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_initialized",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 37,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "_canInteract",
								"offset": 1,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 42,
								"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
								"label": "__gap",
								"offset": 0,
								"slot": "7",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_bytes_storage": {
								"encoding": "bytes",
								"label": "bytes",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_struct(Claim)80_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct Structs.Claim)",
								"numberOfBytes": "32",
								"value": "t_struct(Claim)80_storage"
							},
							"t_mapping(t_bytes32,t_struct(Key)54_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct Structs.Key)",
								"numberOfBytes": "32",
								"value": "t_struct(Key)54_storage"
							},
							"t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bytes32[])",
								"numberOfBytes": "32",
								"value": "t_array(t_bytes32)dyn_storage"
							},
							"t_mapping(t_uint256,t_struct(Execution)66_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct Structs.Execution)",
								"numberOfBytes": "32",
								"value": "t_struct(Execution)66_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Claim)80_storage": {
								"encoding": "inplace",
								"label": "struct Structs.Claim",
								"members": [
									{
										"astId": 69,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "topic",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 71,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "scheme",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 73,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "issuer",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 75,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "signature",
										"offset": 0,
										"slot": "3",
										"type": "t_bytes_storage"
									},
									{
										"astId": 77,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "data",
										"offset": 0,
										"slot": "4",
										"type": "t_bytes_storage"
									},
									{
										"astId": 79,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "uri",
										"offset": 0,
										"slot": "5",
										"type": "t_string_storage"
									}
								],
								"numberOfBytes": "192"
							},
							"t_struct(Execution)66_storage": {
								"encoding": "inplace",
								"label": "struct Structs.Execution",
								"members": [
									{
										"astId": 57,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "to",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 59,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "value",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 61,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "data",
										"offset": 0,
										"slot": "2",
										"type": "t_bytes_storage"
									},
									{
										"astId": 63,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "approved",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									},
									{
										"astId": 65,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "executed",
										"offset": 1,
										"slot": "3",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "128"
							},
							"t_struct(Key)54_storage": {
								"encoding": "inplace",
								"label": "struct Structs.Key",
								"members": [
									{
										"astId": 49,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "purposes",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_uint256)dyn_storage"
									},
									{
										"astId": 51,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "keyType",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 53,
										"contract": "contracts/onChainID/contracts/storage/Storage.sol:Storage",
										"label": "key",
										"offset": 0,
										"slot": "2",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/onChainID/contracts/storage/Structs.sol": {
				"Structs": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/onChainID/contracts/storage/Structs.sol\":61:3253  contract Structs {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/onChainID/contracts/storage/Structs.sol\":61:3253  contract Structs {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122013575477d2329bf72b5ccc9c86c78ec57c80b55e39007c65d660fe470283729764736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea264697066735822122013575477d2329bf72b5ccc9c86c78ec57c80b55e39007c65d660fe470283729764736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT JUMPI SLOAD PUSH24 0xD2329BF72B5CCC9C86C78EC57C80B55E39007C65D660FE47 MUL DUP4 PUSH19 0x9764736F6C6343000814003300000000000000 ",
							"sourceMap": "61:3192:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea264697066735822122013575477d2329bf72b5ccc9c86c78ec57c80b55e39007c65d660fe470283729764736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT JUMPI SLOAD PUSH24 0xD2329BF72B5CCC9C86C78EC57C80B55E39007C65D660FE47 MUL DUP4 PUSH19 0x9764736F6C6343000814003300000000000000 ",
							"sourceMap": "61:3192:1:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 61,
									"end": 3253,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122013575477d2329bf72b5ccc9c86c78ec57c80b55e39007c65d660fe470283729764736f6c63430008140033",
									".code": [
										{
											"begin": 61,
											"end": 3253,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 61,
											"end": 3253,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 61,
											"end": 3253,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 61,
											"end": 3253,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 61,
											"end": 3253,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 61,
											"end": 3253,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"contracts/onChainID/contracts/storage/Storage.sol",
								"contracts/onChainID/contracts/storage/Structs.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onChainID/contracts/storage/Structs.sol\":\"Structs\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/onChainID/contracts/storage/Structs.sol\":{\"keccak256\":\"0x49e2af7bf192ca52a2f62b86b58664bf8769df38ef44fb62bde43cd04d64dc03\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6b9e5c38fabefc0bf21df8f65bebc64336a00ff54399a9aad0a626523fe4ff1a\",\"dweb:/ipfs/QmUo3W97K1XcU7RsPenJ9cMttd9sHbGvfTxyyDyXBTERML\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/onChainID/contracts/storage/Storage.sol": {
				"ast": {
					"absolutePath": "contracts/onChainID/contracts/storage/Storage.sol",
					"exportedSymbols": {
						"Storage": [
							43
						],
						"Structs": [
							81
						]
					},
					"id": 44,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:0"
						},
						{
							"absolutePath": "contracts/onChainID/contracts/storage/Structs.sol",
							"file": "./Structs.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 44,
							"sourceUnit": 82,
							"src": "60:23:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3,
										"name": "Structs",
										"nameLocations": [
											"105:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 81,
										"src": "105:7:0"
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "105:7:0"
								}
							],
							"canonicalName": "Storage",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 43,
							"linearizedBaseContracts": [
								43,
								81
							],
							"name": "Storage",
							"nameLocation": "94:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 6,
									"mutability": "mutable",
									"name": "_executionNonce",
									"nameLocation": "186:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "169:32:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 5,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "169:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "_keys",
									"nameLocation": "275:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "242:38:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Key_$54_storage_$",
										"typeString": "mapping(bytes32 => struct Structs.Key)"
									},
									"typeName": {
										"id": 10,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 7,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "250:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "242:23:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Key_$54_storage_$",
											"typeString": "mapping(bytes32 => struct Structs.Key)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 9,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 8,
												"name": "Key",
												"nameLocations": [
													"261:3:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 54,
												"src": "261:3:0"
											},
											"referencedDeclaration": 54,
											"src": "261:3:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Key_$54_storage_ptr",
												"typeString": "struct Structs.Key"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 16,
									"mutability": "mutable",
									"name": "_keysByPurpose",
									"nameLocation": "439:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "400:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_bytes32_$dyn_storage_$",
										"typeString": "mapping(uint256 => bytes32[])"
									},
									"typeName": {
										"id": 15,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 12,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "408:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "400:29:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_bytes32_$dyn_storage_$",
											"typeString": "mapping(uint256 => bytes32[])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 13,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "419:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"id": 14,
											"nodeType": "ArrayTypeName",
											"src": "419:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_executions",
									"nameLocation": "521:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "482:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Execution_$66_storage_$",
										"typeString": "mapping(uint256 => struct Structs.Execution)"
									},
									"typeName": {
										"id": 20,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 17,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "490:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "482:29:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Execution_$66_storage_$",
											"typeString": "mapping(uint256 => struct Structs.Execution)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 19,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 18,
												"name": "Execution",
												"nameLocations": [
													"501:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 66,
												"src": "501:9:0"
											},
											"referencedDeclaration": 66,
											"src": "501:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Execution_$66_storage_ptr",
												"typeString": "struct Structs.Execution"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "_claims",
									"nameLocation": "610:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "575:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Claim_$80_storage_$",
										"typeString": "mapping(bytes32 => struct Structs.Claim)"
									},
									"typeName": {
										"id": 25,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 22,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "583:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "575:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Claim_$80_storage_$",
											"typeString": "mapping(bytes32 => struct Structs.Claim)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 24,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 23,
												"name": "Claim",
												"nameLocations": [
													"594:5:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 80,
												"src": "594:5:0"
											},
											"referencedDeclaration": 80,
											"src": "594:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Claim_$80_storage_ptr",
												"typeString": "struct Structs.Claim"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 31,
									"mutability": "mutable",
									"name": "_claimsByTopic",
									"nameLocation": "704:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "665:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_bytes32_$dyn_storage_$",
										"typeString": "mapping(uint256 => bytes32[])"
									},
									"typeName": {
										"id": 30,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 27,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "673:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "665:29:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_bytes32_$dyn_storage_$",
											"typeString": "mapping(uint256 => bytes32[])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 28,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "684:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"id": 29,
											"nodeType": "ArrayTypeName",
											"src": "684:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 34,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "771:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "757:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 32,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "757:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"hexValue": "66616c7365",
										"id": 33,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "786:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 37,
									"mutability": "mutable",
									"name": "_canInteract",
									"nameLocation": "870:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "856:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 35,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "856:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"hexValue": "66616c7365",
										"id": 36,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "885:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "897:174:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain."
									},
									"id": 42,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1096:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 43,
									"src": "1076:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 39,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1076:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 41,
										"length": {
											"hexValue": "3439",
											"id": 40,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1084:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "1076:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 44,
							"src": "85:1019:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "36:1069:0"
				},
				"id": 0
			},
			"contracts/onChainID/contracts/storage/Structs.sol": {
				"ast": {
					"absolutePath": "contracts/onChainID/contracts/storage/Structs.sol",
					"exportedSymbols": {
						"Structs": [
							81
						]
					},
					"id": 82,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 45,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Structs",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 81,
							"linearizedBaseContracts": [
								81
							],
							"name": "Structs",
							"nameLocation": "70:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Structs.Key",
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "84:548:1",
										"text": "  @dev Definition of the structure of a Key.\n  Specification: Keys are cryptographic public keys, or contract addresses associated with this identity.\n  The structure should be as follows:\n  key: A public key owned by this identity\n  purposes: uint256[] Array of the key purposes, like 1 = MANAGEMENT, 2 = EXECUTION\n  keyType: The type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\n  key: bytes32 The public key. // Its the Keccak256 hash of the key"
									},
									"id": 54,
									"members": [
										{
											"constant": false,
											"id": 49,
											"mutability": "mutable",
											"name": "purposes",
											"nameLocation": "668:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 54,
											"src": "658:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 48,
												"nodeType": "ArrayTypeName",
												"src": "658:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 51,
											"mutability": "mutable",
											"name": "keyType",
											"nameLocation": "694:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 54,
											"src": "686:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 50,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "686:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 53,
											"mutability": "mutable",
											"name": "key",
											"nameLocation": "719:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 54,
											"src": "711:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 52,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "711:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Key",
									"nameLocation": "644:3:1",
									"nodeType": "StructDefinition",
									"scope": 81,
									"src": "637:92:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Structs.Execution",
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "735:542:1",
										"text": "  @dev Definition of the structure of an Execution\n  Specification: Executions are requests for transactions to be issued by the ONCHAINID\n  to: address of contract to interact with, can be address(this)\n  value: ETH to transfer with the transaction\n  data: payload of the transaction to execute\n  approved: approval status of the Execution\n  executed: execution status of the Execution (set as false when the Execution is created\n  and updated to true when the Execution is processed)"
									},
									"id": 66,
									"members": [
										{
											"constant": false,
											"id": 57,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "1317:2:1",
											"nodeType": "VariableDeclaration",
											"scope": 66,
											"src": "1309:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 56,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1309:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 59,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1337:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 66,
											"src": "1329:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 58,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1329:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 61,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "1358:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 66,
											"src": "1352:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 60,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1352:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 63,
											"mutability": "mutable",
											"name": "approved",
											"nameLocation": "1377:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 66,
											"src": "1372:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 62,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1372:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 65,
											"mutability": "mutable",
											"name": "executed",
											"nameLocation": "1400:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 66,
											"src": "1395:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 64,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1395:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Execution",
									"nameLocation": "1289:9:1",
									"nodeType": "StructDefinition",
									"scope": 81,
									"src": "1282:133:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Structs.Claim",
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "1420:1670:1",
										"text": "  @dev Definition of the structure of a Claim.\n  Specification: Claims are information an issuer has about the identity holder.\n  The structure should be as follows:\n  claim: A claim published for the Identity.\n  topic: A uint256 number which represents the topic of the claim. (e.g. 1 biometric, 2 residence (ToBeDefined:\n  number schemes, sub topics based on number ranges??))\n  scheme : The scheme with which this claim SHOULD be verified or how it should be processed. Its a uint256 for\n  different schemes. E.g. could 3 mean contract verification, where the data will be call data, and the issuer a\n  contract address to call (ToBeDefined). Those can also mean different key types e.g. 1 = ECDSA, 2 = RSA, etc.\n  (ToBeDefined)\n  issuer: The issuers identity contract address, or the address used to sign the above signature. If an\n  identity contract, it should hold the key with which the above message was signed, if the key is not present\n  anymore, the claim SHOULD be treated as invalid. The issuer can also be a contract address itself, at which the\n  claim can be verified using the call data.\n  signature: Signature which is the proof that the claim issuer issued a claim of topic for this identity. it\n  MUST be a signed message of the following structure: `keccak256(abi.encode(identityHolder_address, topic, data))`\n  data: The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on\n  the claim scheme.\n  uri: The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such."
									},
									"id": 80,
									"members": [
										{
											"constant": false,
											"id": 69,
											"mutability": "mutable",
											"name": "topic",
											"nameLocation": "3126:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3118:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 68,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "3118:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 71,
											"mutability": "mutable",
											"name": "scheme",
											"nameLocation": "3149:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3141:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 70,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "3141:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 73,
											"mutability": "mutable",
											"name": "issuer",
											"nameLocation": "3173:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3165:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 72,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3165:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 75,
											"mutability": "mutable",
											"name": "signature",
											"nameLocation": "3195:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3189:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 74,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "3189:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 77,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "3220:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3214:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 76,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "3214:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 79,
											"mutability": "mutable",
											"name": "uri",
											"nameLocation": "3241:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 80,
											"src": "3234:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 78,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "3234:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Claim",
									"nameLocation": "3102:5:1",
									"nodeType": "StructDefinition",
									"scope": 81,
									"src": "3095:156:1",
									"visibility": "public"
								}
							],
							"scope": 82,
							"src": "61:3192:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "36:3218:1"
				},
				"id": 1
			}
		}
	}
}